{"ast":null,"code":"import _objectSpread from\"C:/Users/User/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{send,assign,actions}from\"xstate\";import\"./styles.scss\";const cancel=actions.cancel;function say(text){return send(_context=>({type:\"SPEAK\",value:text}));}function listen(){return send('LISTEN');}function promptAndAsk(prompt,speechprompt){return{initial:\"prompt\",states:{prompt:{entry:say(prompt),on:{ENDSPEECH:\"ask\"}},hist:{type:\"history\"},maxspeech:_objectSpread({},speech(speechprompt)),ask:{entry:[listen(),send('MAXSPEECH',{delay:5000})]}}};}function helpm(prompt,name){return{entry:say(prompt),on:{ENDSPEECH:name+\".hist\"}};}function speech(prompt){return{entry:say(prompt),on:{ENDSPEECH:\"ask\"}};}const grammar={\"John\":{person:\"John Appleseed\"},\"Chris\":{person:\"Chris Thomas\"},\"Grace\":{person:\"Grace Jane\"},\"on Friday\":{day:\"Friday\"},\"on Monday\":{day:\"Monday\"},\"at8\":{time:\"eight o'clock\"},\"at eight\":{time:\"eight o'clcok\"},\"at10\":{time:\"ten o'clcok\"},\"at ten\":{time:\"ten o'clcok\"},\"at7\":{time:\"seven o'clock\"},\"at seven\":{time:\"seven o'clock\"},\"at11\":{time:\"eleven o'clock\"},\"at eleven\":{time:\"eleven o'clock\"}};const grammar2={\"yes\":true,\"Yes\":true,\"Of course\":true,\"of course\":true,\"No\":false,\"no\":false,\"No way\":false,\"no way\":false};const commands={\"help\":\"h\",\"Help\":\"H\"};const grammar3={\"count\":0};export const dmMachine={initial:'init',states:{init:{on:{CLICK:'welcome'}},welcome:{initial:\"prompt\",on:{RECOGNISED:[{target:\"query\",cond:context=>!(context.recResult in commands),actions:[assign(context=>{return{option:context.recResult};}),assign(context=>{grammar3[\"count\"]=0;}),cancel(\"maxsp\")]},{target:\"help1\",cond:context=>context.recResult in commands,actions:cancel(\"maxsp\")}],MAXSPEECH:[{target:\".maxspeech\",cond:context=>grammar3[\"count\"]<=2,actions:assign(context=>{grammar3[\"count\"]=grammar3[\"count\"]+1;})},{target:\"#root.dm.init\",cond:context=>grammar3[\"count\"]>2,actions:assign(context=>{grammar3[\"count\"]=0;})}]},states:{prompt:{entry:say(\"What would you like to do?\"),on:{ENDSPEECH:\"ask\"}},hist:{type:\"history\"},maxspeech:_objectSpread({},speech(\"You did not respondï¼Œjust tell me what you want to do\")),ask:{entry:[listen(),send('MAXSPEECH',{delay:5000})]}}},help1:_objectSpread({},helpm(\"Please kindly tell me what you want to do\",\"welcome\")),query:{invoke:{id:\"rasa\",src:(context,event)=>nluRequest(context.option),onDone:{target:\"menu\",actions:[assign((context,event)=>{return{option:event.data.intent.name};}),(context,event)=>console.log(event.data)]//actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n},onError:{target:\"welcome\",actions:(context,event)=>console.log(event.data)}}},menu:{initial:\"prompt\",on:{ENDSPEECH:[{target:\"todo\",cond:context=>context.option===\"todo\"},{target:\"timer\",cond:context=>context.option===\"timer\"},{target:\"appointment\",cond:context=>context.option===\"appointment\"}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"OK. I understand\\uFF0Cyou want a \".concat(context.option,\".\")}))}/*            nomatch: {\n                    entry: say(\"Sorry, I don\"t understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } */}},todo:{initial:\"prompt\",on:{ENDSPEECH:\"init\"},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Let\\\"s create a to do item\"}))}}},timer:{initial:\"prompt\",on:{ENDSPEECH:\"init\"},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Let\\\"s create a timer\"}))}}},appointment:{initial:\"prompt\",on:{ENDSPEECH:\"who\"},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Let\\\"s create an appointment\"}))}}},who:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"person\"in(grammar[context.recResult]||{}),actions:[assign(context=>{return{person:grammar[context.recResult].person};}),assign(context=>{grammar3[\"count\"]=0;}),cancel(\"maxsp\")],target:\"day\"},{target:\".nomatch\",cond:context=>!(context.recResult in commands),actions:cancel(\"maxsp\")},{target:\"help2\",cond:context=>context.recResult in commands,actions:cancel(\"maxsp\")}],MAXSPEECH:[{target:\".maxspeech\",cond:context=>grammar3[\"count\"]<=2,actions:assign(context=>{grammar3[\"count\"]=grammar3[\"count\"]+1;})},{target:\"#root.dm.init\",cond:context=>grammar3[\"count\"]>2,actions:assign(context=>{grammar3[\"count\"]=0;})}]},states:{prompt:{entry:say(\"Who are you meeting with?\"),on:{ENDSPEECH:\"ask\"}},hist:{type:\"history\"},ask:{entry:[listen(),send('MAXSPEECH',{delay:5000,id:\"maxsp\"})]},maxspeech:_objectSpread({},speech(\"You did not respond, just tell me the person\")),nomatch:{entry:say(\"Sorry I don't know them\"),on:{ENDSPEECH:\"prompt\"}}}},help2:_objectSpread({},helpm(\"Just tell me the name\",\"who\")),day:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"day\"in(grammar[context.recResult]||{}),actions:[assign(context=>{return{day:grammar[context.recResult].day};}),assign(context=>{grammar3[\"count\"]=0;}),cancel(\"maxsp\")],target:\"wholeday\"},{target:\".nomatch\",cond:context=>!(context.recResult in commands),actions:cancel(\"maxsp\")},{target:\"help3\",cond:context=>context.recResult in commands,actions:cancel(\"maxsp\")}],MAXSPEECH:[{target:\".maxspeech\",cond:context=>grammar3[\"count\"]<=2,actions:assign(context=>{grammar3[\"count\"]=grammar3[\"count\"]+1;})},{target:\"#root.dm.init\",cond:context=>grammar3[\"count\"]>2,actions:assign(context=>{grammar3[\"count\"]=0;})}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"OK. \".concat(context.person,\". On which day is your meeting?\")})),on:{ENDSPEECH:\"ask\"}},hist:{type:\"history\"},ask:{entry:[listen(),send('MAXSPEECH',{delay:5000,id:\"maxsp\"})]},maxspeech:_objectSpread({},speech(\"You did not respond, say a day\")),nomatch:{entry:say(\"Sorry I don't know which day are you talking about\"),on:{ENDSPEECH:\"prompt\"}}}},help3:_objectSpread({},helpm(\"Just tell me the day\",\"day\")),wholeday:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>grammar2[context.recResult]===true,target:\"notime\",actions:[assign(context=>{grammar3[\"count\"]=0;}),cancel(\"maxsp\")]},{cond:context=>grammar2[context.recResult]===false,target:\"whattime\",actions:[assign(context=>{grammar3[\"count\"]=0;}),cancel(\"maxsp\")]},{target:\".nomatch\",cond:context=>!(context.recResult in commands),actions:cancel(\"maxsp\")},{target:\"help4\",cond:context=>context.recResult in commands,actions:cancel(\"maxsp\")}],MAXSPEECH:[{target:\".maxspeech\",cond:context=>grammar3[\"count\"]<=2,actions:assign(context=>{grammar3[\"count\"]=grammar3[\"count\"]+1;})},{target:\"#root.dm.init\",cond:context=>grammar3[\"count\"]>2,actions:assign(context=>{grammar3[\"count\"]=0;})}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Good.on \".concat(context.day,\". Will it take the whole day?\")})),on:{ENDSPEECH:\"ask\"}},hist:{type:\"history\"},ask:{entry:[listen(),send('MAXSPEECH',{delay:5000,id:\"maxsp\"})]},maxspeech:_objectSpread({},speech(\"You did not respond, say a decision\")),nomatch:{entry:say(\"Please repeat it again\"),on:{ENDSPEECH:\"prompt\"}}}},help4:_objectSpread({},helpm(\"Just tell me the decision\",\"wholeday\")),notime:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>grammar2[context.recResult]===true,target:\"Finished\",actions:[assign(context=>{grammar3[\"count\"]=0;}),cancel(\"maxsp\")]},{cond:context=>grammar2[context.recResult]===false,target:\"who\",actions:[assign(context=>{grammar3[\"count\"]=0;}),cancel(\"maxsp\")]},{target:\".nomatch\",cond:context=>!(context.recResult in commands),actions:cancel(\"maxsp\")},{target:\"help5\",cond:context=>context.recResult in commands,actions:cancel(\"maxsp\")}],MAXSPEECH:[{target:\".maxspeech\",cond:context=>grammar3[\"count\"]<=2,actions:assign(context=>{grammar3[\"count\"]=grammar3[\"count\"]+1;})},{target:\"#root.dm.init\",cond:context=>grammar3[\"count\"]>2,actions:assign(context=>{grammar3[\"count\"]=0;})}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Good. Do you want to me create an appointment with \".concat(context.person,\" on \").concat(context.day,\"for the whole day?\")})),on:{ENDSPEECH:\"ask\"}},hist:{type:\"history\"},ask:{entry:[listen(),send('MAXSPEECH',{delay:5000,id:\"maxsp\"})]},maxspeech:_objectSpread({},speech(\"You did not respond, please confirm it\")),nomatch:{entry:say(\"Please repeat it again\"),on:{ENDSPEECH:\"prompt\"}}}},help5:_objectSpread({},helpm(\"Just confirm it\",\"notime\")),whattime:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"time\"in(grammar[context.recResult]||{}),actions:[assign(context=>{return{time:grammar[context.recResult].time};}),assign(context=>{grammar3[\"count\"]=0;}),cancel(\"maxsp\")],target:\"withtime\"},{target:\".nomatch\",cond:context=>!(context.recResult in commands),actions:cancel(\"maxsp\")},{target:\"help6\",cond:context=>context.recResult in commands,actions:cancel(\"maxsp\")}],MAXSPEECH:[{target:\".maxspeech\",cond:context=>grammar3[\"count\"]<=2,actions:assign(context=>{grammar3[\"count\"]=grammar3[\"count\"]+1;})},{target:\"#root.dm.init\",cond:context=>grammar3[\"count\"]>2,actions:assign(context=>{grammar3[\"count\"]=0;})}]},states:{prompt:{entry:say(\"What time is your meeting\"),on:{ENDSPEECH:\"ask\"}},hist:{type:\"history\"},ask:{entry:[listen(),send('MAXSPEECH',{delay:5000,id:\"maxsp\"})]},maxspeech:_objectSpread({},speech(\"You did not respond, say a time\")),nomatch:{entry:say(\"Please repeat it again\"),on:{ENDSPEECH:\"prompt\"}}}},help6:_objectSpread({},helpm(\"Just tell me the time\",\"whattime\")),withtime:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>grammar2[context.recResult]===true,target:\"Finished\",actions:[assign(context=>{grammar3[\"count\"]=0;}),cancel(\"maxsp\")]},{cond:context=>grammar2[context.recResult]===false,target:\"who\",actions:[assign(context=>{grammar3[\"count\"]=0;}),cancel(\"maxsp\")]},{target:\".nomatch\",cond:context=>!(context.recResult in commands),actions:cancel(\"maxsp\")},{target:\"help7\",cond:context=>context.recResult in commands,actions:cancel(\"maxsp\")}],MAXSPEECH:[{target:\".maxspeech\",cond:context=>grammar3[\"count\"]<=2,actions:assign(context=>{grammar3[\"count\"]=grammar3[\"count\"]+1;})},{target:\"#root.dm.init\",cond:context=>grammar3[\"count\"]>2,actions:assign(context=>{grammar3[\"count\"]=0;})}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Good. Do you want to me create an appointment with \".concat(context.person,\" on \").concat(context.day,\" at \").concat(context.time,\"?\")})),on:{ENDSPEECH:\"ask\"}},hist:{type:\"history\"},ask:{entry:[listen(),send('MAXSPEECH',{delay:5000,id:\"maxsp\"})]},maxspeech:_objectSpread({},speech(\"You did not respond, just confirm it\")),nomatch:{entry:say(\"Please repeat it again\"),on:{ENDSPEECH:\"prompt\"}}}},help7:_objectSpread({},helpm(\"Please confirm it\",\"withtime\")),Finished:{initial:\"prompt\",on:{ENDSPEECH:\"init\"},states:{prompt:{entry:say(\"Your appointment has been created!\")}}}}};/* RASA API\n *  */const proxyurl=\"https://cors-anywhere.herokuapp.com/\";const rasaurl=\"https://intents-oyousuf.herokuapp.com/model/parse\";const nluRequest=text=>fetch(new Request(proxyurl+rasaurl,{method:\"POST\",headers:{\"Origin\":\"http://localhost:3000/react-xstate-colourchanger\"},// only required with proxy\nbody:\"{\\\"text\\\": \\\"\".concat(text,\"\\\"}\")})).then(data=>data.json());","map":{"version":3,"sources":["C:/Users/User/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","actions","cancel","say","text","_context","type","value","listen","promptAndAsk","prompt","speechprompt","initial","states","entry","on","ENDSPEECH","hist","maxspeech","speech","ask","delay","helpm","name","grammar","person","day","time","grammar2","commands","grammar3","dmMachine","init","CLICK","welcome","RECOGNISED","target","cond","context","recResult","option","MAXSPEECH","help1","query","invoke","id","src","event","nluRequest","onDone","data","intent","console","log","onError","menu","todo","timer","appointment","who","nomatch","help2","help3","wholeday","help4","notime","help5","whattime","help6","withtime","help7","Finished","proxyurl","rasaurl","fetch","Request","method","headers","body","then","json"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign, actions} from \"xstate\";\nimport \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\n\nconst {cancel}=actions\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction promptAndAsk(prompt: string, speechprompt:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: \"prompt\",\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: \"ask\" }\n            },\n            hist: {type: \"history\"},\n            maxspeech: {\n                ...speech(speechprompt)\n        },  \n            ask: {\n                entry: [listen(), send('MAXSPEECH', {delay: 5000})]\n            },\n        }})\n}\n\n\nfunction helpm(prompt: string, name: string): MachineConfig<SDSContext, any, SDSEvent>{\n    return ({entry: say(prompt),\n             on: {ENDSPEECH: name+\".hist\" }})\n}\n\nfunction speech(prompt: string): MachineConfig<SDSContext, any, SDSEvent>{\n    return ({entry: say(prompt),\n             on: {ENDSPEECH: \"ask\"\n            }})\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n\t\"Chris\": { person: \"Chris Thomas\" },\n\t\"Grace\": {person: \"Grace Jane\"},\n    \"on Friday\": { day: \"Friday\" },\n\t\"on Monday\": { day: \"Monday\" },\n\t\"at8\": {time: \"eight o'clock\" },\n\t\"at eight\": { time: \"eight o'clcok\" },\n\t\"at10\":{time:\"ten o'clcok\" },\n    \"at ten\": { time: \"ten o'clcok\" },\n\t\"at7\": {time: \"seven o'clock\"},\n    \"at seven\": {time: \"seven o'clock\"},\n\t\"at11\": {time: \"eleven o'clock\"},\n    \"at eleven\": {time: \"eleven o'clock\"}\n}\n\nconst grammar2= { \"yes\": true,\n                  \"Yes\": true,\n\t\t\t\t  \"Of course\": true,\n                  \"of course\": true, \n\t\t\t\t  \"No\": false,\n\t\t\t\t  \"no\" : false,\n\t\t\t\t  \"No way\": false,\n\t\t\t\t  \"no way\" : false\n}\nconst commands = {\"help\": \"h\", \"Help\": \"H\"}\n\nconst grammar3 ={\"count\": 0}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\t\twelcome: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    target: \"query\",\n                    cond: (context) => !(context.recResult in commands),\n                    actions: [assign((context) => { return { option: context.recResult } }),assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")],\n                    \n                },\n                {target: \"help1\",\n                cond: (context) => context.recResult in commands,\n                actions: cancel(\"maxsp\")} ],\n                MAXSPEECH: [{target:\".maxspeech\",\n                cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}]\n            },\n            states: {        \n                prompt: {\n                entry: say(\"What would you like to do?\"),\n                on: { ENDSPEECH: \"ask\" }\n            },\n            hist: {type: \"history\"},\n               maxspeech: {\n                ...speech(\"You did not respondï¼Œjust tell me what you want to do\")\n        },  \n            ask: {\n                entry: [listen(), send('MAXSPEECH', {delay: 5000})]\n            }\n        }   \n    }, \n    \n        help1:{\n            ...helpm(\"Please kindly tell me what you want to do\",\"welcome\")\n        },\n\t\tquery: {\n            invoke: {\n                id: \"rasa\",\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: \"menu\",\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data)]\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n                },\n                onError: {\n                    target: \"welcome\",\n                    actions: (context, event) => console.log(event.data)\n                }\n            }\n        },\n      \n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: \"todo\", cond: (context) => context.option === \"todo\" },\n                    { target: \"timer\", cond: (context) => context.option === \"timer\" },\n                    { target: \"appointment\", cond: (context) => context.option === \"appointment\" }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I understandï¼Œyou want a ${context.option}.`\n                    })),\n        },\n     /*            nomatch: {\n                    entry: say(\"Sorry, I don\"t understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } */ \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a timer`\n                    }))\n                }}\n        },\n        \n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create an appointment`\n                    }))\n                }}\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: [assign((context) => { return { person: grammar[context.recResult].person } }),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" ,\n                 cond: (context) => !(context.recResult in commands),\n                 actions: cancel(\"maxsp\")},\n                 {target: \"help2\",\n                 cond: (context) => context.recResult in commands,\n                 actions: cancel(\"maxsp\")}],\n                 MAXSPEECH: [{target:\".maxspeech\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                hist: {type: \"history\"},\n                ask: {\n                    entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n                },\n                maxspeech: {\n                    ...speech(\"You did not respond, just tell me the person\")\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH:  \"prompt\" }\n                \n                }\n             }\n        },\n        help2:{\n            ...helpm(\"Just tell me the name\",\"who\")\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n\t            RECOGNISED: [{\n\t                cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n\t\t            actions: [assign((context) => { return { day: grammar[context.recResult].day } }),assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")],\n\t\t            target: \"wholeday\"\n\n\t\t        },\t\n\t\t        { target: \".nomatch\" ,\n                cond: (context) => !(context.recResult in commands),\n                actions: cancel(\"maxsp\")},\n                {target: \"help3\",\n                cond: (context) => context.recResult in commands,\n                actions: cancel(\"maxsp\")}],\n                MAXSPEECH: [{target:\".maxspeech\",\n                cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t        },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n\t\t            on: { ENDSPEECH: \"ask\" }\n                },\n                hist: {type: \"history\"},\n\t\t        ask: {\n\t\t            entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t            },\n                maxspeech: {\n                 ...speech(\"You did not respond, say a day\")\n              },\n\t\t        nomatch: {\n\t\t            entry: say(\"Sorry I don't know which day are you talking about\"),\n\t\t            on: { ENDSPEECH: \"prompt\" }\n\t            }\t     \n            }\n        },\n        help3:{\n            ...helpm(\"Just tell me the day\",\"day\")\n        },\n        \n\t    wholeday: {\n\t\t        initial: \"prompt\",\n\t\t        on: {\n\t                RECOGNISED: [{\n\t\t\t            cond: (context) => grammar2[context.recResult] === true,\n                        target: \"notime\",\n                        actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]},\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\t\ttarget: \"whattime\",\n                        actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]\n\t\t            },\n\t                { target: \".nomatch\",\n                    cond: (context) => !(context.recResult in commands),\n                    actions: cancel(\"maxsp\")},\n                    {target: \"help4\",\n                    cond: (context) => context.recResult in commands,\n                    actions: cancel(\"maxsp\")}],\n                    MAXSPEECH: [{target:\".maxspeech\",\n                    cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t\t        },\n\t\t        states: {\n\t\t            prompt: {\n\t\t\t            entry: send((context) => ({\n\t\t\t                type: \"SPEAK\",\n\t\t\t\t\t\t    value: `Good.on ${context.day}. Will it take the whole day?`\n\t\t\t            })),\n\t\t\t            on: { ENDSPEECH: \"ask\" }\n\t\t            },\n                    hist: {type: \"history\"},\n\t\t            ask: {\n\t\t                entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t            },\n                    maxspeech: {\n                      ...speech(\"You did not respond, say a decision\")\n                    },\n\t\t            nomatch: {\n\t\t\t            entry: say(\"Please repeat it again\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t            }\n\t\t        }\t     \n            },\n            help4:{\n                ...helpm(\"Just tell me the decision\",\"wholeday\")\n            },\n            notime: {\n\t\t           initial: \"prompt\",\n\t               on: {\n\t\t               RECOGNISED: [{ \n\t\t\t               cond: (context) => grammar2[context.recResult] === true,\n\t\t\t               target: \"Finished\",\n                           actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]},\n\t\t\t\t\t\t   {\n\t\t\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n                           target: \"who\",\n\t\t\t\t\t\t   actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]\n\t\t                },\n\t\t                { target: \".nomatch\",\n                        cond: (context) => !(context.recResult in commands),\n                        actions: cancel(\"maxsp\")},\n                        {target: \"help5\",\n                        cond: (context) => context.recResult in commands,\n                        actions: cancel(\"maxsp\")}],\n                        MAXSPEECH: [{target:\".maxspeech\",\n                        cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}]  \n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t\t                entry: send((context) => ({\n\t\t\t                    type: \"SPEAK\",\n\t\t\t\t\t\t\t\tvalue: `Good. Do you want to me create an appointment with ${context.person} on ${context.day}for the whole day?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n\t\t                },\n                        hist: {type: \"history\"},\n\t\t                ask: {\n\t\t\t                entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t                },\n                        maxspeech: {\n                             ...speech(\"You did not respond, please confirm it\")},\n\t\t                nomatch: {\n\t\t\t                entry: say(\"Please repeat it again\"),\n\t\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t                }\n                    }\n\t            },\n                help5:{\n                    ...helpm(\"Just confirm it\",\"notime\")\n                },\n\t\t\t\twhattime: {\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tRECOGNISED: [{\n\t\t\t\t\t\t\tcond: (context) => \"time\" in (grammar[context.recResult] || {}),\n\t\t\t\t\t\t\tactions: [assign((context) => { return { time: grammar[context.recResult].time } }),assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")],\n\t\t\t\t\t\t\ttarget: \"withtime\"\n\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ target: \".nomatch\" ,\n                        cond: (context) => !(context.recResult in commands),\n                        actions: cancel(\"maxsp\")},\n                        {target: \"help6\",\n                        cond: (context) => context.recResult in commands,\n                        actions: cancel(\"maxsp\")}],\n                        MAXSPEECH: [{target:\".maxspeech\",\n                        cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}]  \n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: { entry: say(\"What time is your meeting\"),\n\t\t\t\t\t\ton: { ENDSPEECH: \"ask\" }\n\t\t\t\t\t},\n                    hist: {type: \"history\"},\n\t\t\t\t\task: {\n\t\t\t\t\t\tentry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t\t\t},\n                maxspeech: {\n                  ...speech(\"You did not respond, say a time\")\n                },\n\t\t\t\tnomatch: {\n\t\t\t\t\tentry: say(\"Please repeat it again\"),\n\t\t\t\t\ton: { ENDSPEECH: \"prompt\" }\n\t\t\t\t}\n\t\t\t}\n\t\t},\n        help6:{\n            ...helpm(\"Just tell me the time\",\"whattime\")\n        },\n        \n\t\twithtime: {\n\t\t\tinitial: \"prompt\",\n\t\t\ton: {\n\t\t\t\tRECOGNISED: [{ \n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\n\t\t\t\t\ttarget: \"Finished\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]},\n\t\t\t\t\t{\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\ttarget: \"who\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]\n\t\t\t\t },\n\t\t\t\t { target: \".nomatch\",\n                 cond: (context) => !(context.recResult in commands),\n                 actions: cancel(\"maxsp\")},\n                 {target: \"help7\",\n                 cond: (context) => context.recResult in commands,\n                 actions: cancel(\"maxsp\")}],\n                 MAXSPEECH: [{target:\".maxspeech\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t\t\t },\n\t\t\t states: {\n\t\t\t\t prompt: {\n\t\t\t\t\t entry: send((context) => ({\n\t\t\t\t\t\t type: \"SPEAK\",\n\t\t\t\t\t\t value: `Good. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n\t\t\t\t\t })),\n\t\t\t\t\t on: { ENDSPEECH: \"ask\" }\n\t\t\t\t },\n                 hist: {type: \"history\"},\n\t\t\t\t ask: {\n\t\t\t\t\t entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t\t\t },\n                maxspeech: {\n                 ...speech(\"You did not respond, just confirm it\")\n                },        \n\t\t\t\t nomatch: {\n\t\t\t\t\t entry: say(\"Please repeat it again\"),\n\t\t\t\t\t on: { ENDSPEECH: \"prompt\" }\n\t\t\t\t }\n\t\t\t }\n\t\t},\n        help7:{\n            ...helpm(\"Please confirm it\",\"withtime\")\n        },\n        \n        Finished: {\n\t\t                 initial: \"prompt\",\n\t\t                 on: { ENDSPEECH: \"init\" },\n\t\t                 states: {\n\t\t\t                 prompt: { entry: say(\"Your appointment has been created!\")\n\t\t                    },\n\t                    }\n\t                }\t    \n                }\n            })\n\n\n\t\t\t/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = \"https://intents-oyousuf.herokuapp.com/model/parse\"\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: \"POST\",\n        headers: { \"Origin\": \"http://localhost:3000/react-xstate-colourchanger\" }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n"]},"metadata":{},"sourceType":"module"}