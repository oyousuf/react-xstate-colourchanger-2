{"ast":null,"code":"import _objectSpread from\"C:/Users/User/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{send,assign}from\"xstate\";import\"./styles.scss\";// new stuff\n//new\n//new\nconst _actions=actions,cancel=_actions.cancel;//new\nfunction say(text){return send(_context=>({type:\"SPEAK\",value:text}));}function listen(){return send(\"LISTEN\");}//new\nfunction helpm(prompt,name){return{entry:say(prompt),on:{ENDSPEECH:name+\".hist\"}};}function speech(prompt){return{entry:say(prompt),on:{ENDSPEECH:\"ask\"}};}//new\nconst grammar={// Here are some common names in English that I found are easier for the robot to understand.\n\"John\":{person:\"John Appleseed\"},\"Jack\":{person:\"Jack Orangeseed\"},\"David\":{person:\"David Grapeseed\"},\"Robert\":{person:\"Robert Watermelonseed\"},\"Jennifer\":{person:\"Jennifer Bananaseed\"},\"Jessica\":{person:\"Jessica Pineappleseed\"},\"john\":{person:\"john appleseed\"},\"jack\":{person:\"jack orangeseed\"},\"david\":{person:\"david grapeseed\"},\"robert\":{person:\"robert watermelonseed\"},\"jennifer\":{person:\"jennifer bananaseed\"},\"jessica\":{person:\"jessica pineappleseed\"},// Here are names of friends I tried at first, but because they're non-English it was incredibly hard to move forward with the robot so I mad the previously mentioned English names above.\n\"Zhe\":{person:\"Zhe Han\"},\"Siyi\":{person:\"Siyi Gu\"},\"Jae Eun\":{person:\"Jae Eun Hong\"},\"Oreen\":{person:\"Oreen Yousuf\"},\"Angeliki\":{person:\"Angeliki Zagoura\"},\"Flor\":{person:\"Flor Ortiz\"},\"Emma\":{person:\"Emma Wallerö\"},\"zhe\":{person:\"zhe han\"},\"siyi\":{person:\"siyi gu\"},\"jae eun\":{person:\"jae eun hong\"},\"oreen\":{person:\"oreen yousuf\"},\"angeliki\":{person:\"angeliki zagoura\"},\"flor\":{person:\"flor ortiz\"},\"emma\":{person:\"emma wallerö\"},//Days of the week with alternating potential utterances ('on')\n\"Monday\":{day:\"Monday\"},\"on Monday\":{day:\"Monday\"},\"Tuesday\":{day:\"Tuesday\"},\"on Tuesday\":{day:\"Tuesday\"},\"Wednesday\":{day:\"Wednesday\"},\"on Wednesday\":{day:\"Wednesday\"},\"Thursday\":{day:\"Thursday\"},\"on Thursday\":{day:\"Thursday\"},\"Friday\":{day:\"Friday\"},\"on Friday\":{day:\"Friday\"},\"Saturday\":{day:\"Saturday\"},\"on Saturday\":{day:\"Saturday\"},\"Sunday\":{day:\"Sunday\"},\"on Sunday\":{day:\"Sunday\"},//times with different utterances and spellings/numberings to capture all ways the robot could interpret it\n\"at one\":{time:\"01:00\"},\"at two\":{time:\"02:00\"},\"at three\":{time:\"03:00\"},\"at four\":{time:\"04:00\"},\"at five\":{time:\"05:00\"},\"at six\":{time:\"06:00\"},\"at seven\":{time:\"07:00\"},\"at eight\":{time:\"08:00\"},\"at nine\":{time:\"09:00\"},\"at ten\":{time:\"10:00\"},\"at eleven\":{time:\"11:00\"},\"at twelve\":{time:\"12:00\"},\"at thirteen\":{time:\"13:00\"},\"at fourteen\":{time:\"14:00\"},\"at fifteen\":{time:\"15:00\"},\"at sixteen\":{time:\"16:00\"},\"at seventeen\":{time:\"17:00\"},\"at eighteen\":{time:\"18:00\"},\"at nineteen\":{time:\"19:00\"},\"at twenty\":{time:\"20:00\"},\"at twenty one\":{time:\"21:00\"},\"at twenty two\":{time:\"22:00\"},\"at twenty three\":{time:\"23:00\"},\"at twenty four\":{time:\"00:00\"},\"one\":{time:\"01:00\"},\"two\":{time:\"02:00\"},\"three\":{time:\"03:00\"},\"four\":{time:\"04:00\"},\"five\":{time:\"05:00\"},\"six\":{time:\"06:00\"},\"seven\":{time:\"07:00\"},\"eight\":{time:\"08:00\"},\"nine\":{time:\"09:00\"},\"ten\":{time:\"10:00\"},\"eleven\":{time:\"11:00\"},\"twelve\":{time:\"12:00\"},\"thirteen\":{time:\"13:00\"},\"fourteen\":{time:\"14:00\"},\"fifteen\":{time:\"15:00\"},\"sixteen\":{time:\"16:00\"},\"seventeen\":{time:\"17:00\"},\"eighteen\":{time:\"18:00\"},\"nineteen\":{time:\"19:00\"},\"twenty\":{time:\"20:00\"},\"twenty one\":{time:\"21:00\"},\"twenty two\":{time:\"22:00\"},\"twenty three\":{time:\"23:00\"},\"twenty four\":{time:\"00:00\"},\"at 1\":{time:\"01:00\"},\"at 2\":{time:\"02:00\"},\"at 3\":{time:\"03:00\"},\"at 4\":{time:\"04:00\"},\"at 5\":{time:\"05:00\"},\"at 6\":{time:\"06:00\"},\"at 7\":{time:\"07:00\"},\"at 8\":{time:\"08:00\"},\"at 9\":{time:\"09:00\"},\"at 10\":{time:\"10:00\"},\"at 11\":{time:\"11:00\"},\"at 12\":{time:\"12:00\"},\"at 13\":{time:\"13:00\"},\"at 14\":{time:\"14:00\"},\"at 15\":{time:\"15:00\"},\"at 16\":{time:\"16:00\"},\"at 17\":{time:\"17:00\"},\"at 18\":{time:\"18:00\"},\"at 19\":{time:\"19:00\"},\"at 20\":{time:\"20:00\"},\"at 21\":{time:\"21:00\"},\"at 22\":{time:\"22:00\"},\"at 23\":{time:\"23:00\"},\"at 24\":{time:\"00:00\"},\"1\":{time:\"01:00\"},\"2\":{time:\"02:00\"},\"3\":{time:\"03:00\"},\"4\":{time:\"04:00\"},\"5\":{time:\"05:00\"},\"6\":{time:\"06:00\"},\"7\":{time:\"07:00\"},\"8\":{time:\"08:00\"},\"9\":{time:\"09:00\"},\"10\":{time:\"10:00\"},\"11\":{time:\"11:00\"},\"12\":{time:\"12:00\"},\"13\":{time:\"13:00\"},\"14\":{time:\"14:00\"},\"15\":{time:\"15:00\"},\"16\":{time:\"16:00\"},\"17\":{time:\"17:00\"},\"18\":{time:\"18:00\"},\"19\":{time:\"19:00\"},\"20\":{time:\"20:00\"},\"21\":{time:\"21:00\"},\"22\":{time:\"22:00\"},\"23\":{time:\"23:00\"},\"24\":{time:\"00:00\"}};//second grammar for trues and falses\nconst grammar2={\"yes\":true,\"Yes\":true,\"yes of course\":true,\"Yes of course\":true,\"sure\":true,\"Sure\":true,\"absolutely\":true,\"Absolutely\":true,\"perfect\":true,\"Perfect\":true,\"no\":false,\"No\":false,\"no way\":false,\"No way\":false};//new\nconst commands={\"help\":\"h\",\"Help\":\"H\"};const grammar3={\"count\":0};//new\n/*function promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: \"prompt\",\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: \"ask\" }\n            },\n            ask: {\n                entry: send(\"LISTEN\")\n            },\n        }})\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n   \n    initial: \"init\",\n    states: {\n        init: {\n            on: {\n                CLICK: \"welcome\"\n            }            \n        },        \n\n        welcome: {\n            on: {\n                RECOGNISED: {\n                    target: \"query\",\n                    actions: assign((context) => { return { option: context.recResult } }),\n                }    \n            },\n                    ...promptAndAsk(\"What would you like to do? Your options are appointment, to do item or timer\")\n        },\n\n\n        query: {\n            invoke: {\n                id: \"rasa\",\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: \"menu\",\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data)]\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n                },\n                onError: {\n                    target: \"welcome\",\n                    actions: (context, event) => console.log(event.data)\n                }\n            }\n        },\n\n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: \"todo\", cond: (context) => context.option === \"todo\" },\n                    { target: \"timer\", cond: (context) => context.option === \"timer\" },\n                    { target: \"appointment\", cond: (context) => context.option === \"appointment\" }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I understand.`\n                    })),\n        }, \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a timer`\n                    }))\n                }}\n        },\n        \n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create an appointment`\n                    }))\n                }}\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n\t\t\t\t\tcond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I do not know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"wholeday\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`,\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I do not understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        wholeday: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === false),\n                    target: \"time\"\n                },\n\t\t{cond: (context) => (grammar2[context.recResult] === true),\n\t\ttarget: \"confirm_meeting_whole_day\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. Will it take the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry I do not understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t            }\n                }\n\t},\n        time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirm_time\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.day}. What time is your meeting?`,\n                    \n                    })),\n            on: { ENDSPEECH: \"ask\" }\n                },\n        ask: {\n            entry: listen()\n                },\n        nomatch: {\n            entry: say(\"Sorry I do not know that\"),\n        on: { ENDSPEECH: \"prompt\" }\n                }\n                }\n        },\n        confirm_meeting_whole_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === false),\n                    target: \"init\"\n                },\n\t\t{cond: (context) => (grammar2[context.recResult] === true),\n\t\ttarget: \"confirmed\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry I do not understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t           }\n                }\n\n\t},\n    confirm_time: {\n        initial: \"prompt\",\n        on:  {\n            RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === false),\n                target: \"who\"\n            },\n    {cond: (context) => (grammar2[context.recResult] === true),\n    target: \"confirmed\"\n    },\n            { target: \".nomatch\" }]\n        },\n        states: {\n            prompt: {\n               entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                })),\n        on: { ENDSPEECH: \"ask\" }\n            },\n    ask: {\n         entry: listen()\n        },\n    nomatch: {\n        entry: say(\"Sorry I do not understand\"),\n    on: { ENDSPEECH: \"prompt\" }\n           }\n            },\n        },\n    confirmed: {\n        initial: \"prompt\",\n        on: { ENDSPEECH: \"init\" },\n        states: {\n            prompt: {\n                entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Your appointment has been created!`\n                }))\n            },\n    }\n    }\n    }})\n*/function promptAsk(prompt){return{initial:'prompt',states:{prompt:{entry:say(prompt),on:{ENDSPEECH:'ask'}},ask:{entry:send('LISTEN')}}};}/* //lab 2 base code\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = \n\n({\n    initial: 'init',\n    states: \n    {\n        init:{\n            on: {\n                CLICK: 'welcome'\n                }\n             },\n        welcome: \n        {\n            on: {\n                RECOGNISED: {\n                    target: \"query\",\n                    actions: assign((context) => { return { option: context.recResult } }),\n                }    \n            },\n                    ...promptAsk(\"What would you like to do?\")\n        },\n\n        query: \n        {\n            invoke: {\n            \n            id: 'rasa',\n            src: (context, event) => nluRequest(context.option),\n            onDone: {\n                target: 'menu',\n                actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                (context: SDSContext, event: any) => console.log(event.data)]\n            },\n            onError: {\n                target: 'welcome',\n                actions: (context, event) => console.log(event.data)\n\n                }\n            }\n        },\n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: 'todo', cond: (context) => context.option === 'todo' },\n                    { target: 'timer', cond: (context) => context.option === 'timer' },\n                    { target: 'appointment', cond: (context) => context.option === 'appointment' }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I see.`\n                    })),\n        },\n                 nomatch: {\n                    entry: say(\"Sorry, I don't understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create a timer`\n                    }))\n                }}\n        },\n        \n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create an appointment`\n                    }))\n                }}\n        },\n\n        who: \n        \n        {\n            initial: \"prompt\",\n            on: \n            {\n                RECOGNISED: \n                [\n                    {\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n                    },\n                { target: \".nomatch\" }\n                ]\n            },\n\n            states: \n            \n            {\n                prompt: \n                \n                {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                \n                ask: \n                \n                {\n                    entry: listen()\n                },\n                \n                nomatch: \n                \n                {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n\n        day: \n        \n        {\n            initial: \"prompt\",\n            on: \n            \n            {\n\t            RECOGNISED: \n                [\n                    {\n\t                cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n\t\t            actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n\t\t            target: \"wholeday\"\n\n\t\t            },\t\n\n\t\t            { target: \".nomatch\" }\n                \n                ]\n\t        },\n\n            states: \n\n            {\n                prompt: \n                \n                {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n\t\t            on: { ENDSPEECH: \"ask\" }\n                },\n\t\t        ask: \n                \n                {\n\t\t            entry: listen()\n\t            },\n\n\t\t        nomatch: \n                \n                {\n\t\t            entry: say(\"Sorry I don't know which day are you talking about\"),\n\t\t            on: { ENDSPEECH: \"prompt\" }\n\t            }\t     \n            }\n        },\n\n\n\t    wholeday: \n        \n        {\n\t\t        initial: \"prompt\",\n\t\t        on: \n                \n                {\n\t                RECOGNISED: \n                    \n                    [\n                        {cond: (context) => grammar2[context.recResult] === true,\n                        target: \"timefixed\"},\n\n\t\t\t\t\t\t{cond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\t\ttarget: \"settime\"},\n\n\t                { target: \".nomatch\" }\n                    ]\n\t\t        \n                },\n\n\n\t\t        states: \n                \n                {\n\t\t            prompt: \n                    \n                    {\n\t\t\t            entry: send((context) => ({\n\t\t\t                type: \"SPEAK\",\n\t\t\t\t\t\t    value: `Good. Appointment is on ${context.day}. Will it take the whole day?`\n\t\t\t            })),\n\t\t\t            on: { ENDSPEECH: \"ask\" }\n\t\t            },\n\n\t\t            ask: {\n\t\t                entry: listen()\n\t\t            },\n\n\t\t            nomatch: \n\n                    {\n\t\t\t            entry: say(\"Please repeat it again\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t            }\n\t\t        }\t     \n        },\n\n\n            timefixed: \n            \n            {\n\t\t           initial: \"prompt\",\n\n\t               on: \n                   \n                   {\n\t\t               RECOGNISED: \n                       \n                       [\n                           {cond: (context) => grammar2[context.recResult] === true,\n\t\t\t               target: \"Finished\"},\n\t\t\t\t\t\t   {cond: (context) => grammar2[context.recResult] === false,\n                           target: \"who\"},\n\t\t                   { target: \".nomatch\" }\n                        ]\n\t\t            },\n\n\n\n\t\t            states: \n                    \n                    {\n\t\t                prompt: \n                        \n                        {\n\t\t\t                entry: send((context) => ({\n\t\t\t                    type: \"SPEAK\",\n\t\t\t\t\t\t\t\tvalue: `Good. Do you want to me create an appointment with ${context.person} on ${context.day}for the whole day?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\n\n\t\t                ask: \n                        \n                        {\n\t\t\t                entry: listen()\n\t\t                },\n\n\t\t                nomatch: \n                        \n                        {\n\t\t\t                entry: say(\"Please repeat it again\"),\n\t\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t                }\n                    }\n\t        },\n\n\t\t\tsettime: \n                \n                    {\n\n\t\t\t\t\t    initial: \"prompt\",\n\t\t\t\t\t    on: \n                    \n                    {\n\t\t\t\t\t\tRECOGNISED: \n                        [\n                            {\n\t\t\t\t\t\t\t\n                            cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n\t\t\t\t\t\t\tactions: assign((context) => { return { time: grammar[context.recResult].time }}),\n\t\t\t\t\t\t\ttarget: \"withtime\"\n\n\t\t\t\t\t\t    },\n\n\t\t\t\t\t\t    { target: \".nomatch\" }\n                        ]\n\t\t\t\t\t},\n\n\n\t\t\t\t\t    states: \n\n                        {\n\t\t\t\t\t\t    prompt: { entry: say(\"What time is your meeting\"),\n\t\t\t\t\t\t    on: { ENDSPEECH: \"ask\" }\n\t\t\t\t\t    },\n\n\t\t\t\t\task: \n                    {\n\t\t\t\t\t\tentry: listen()\n\t\t\t\t    },\n\n\t\t\t\tnomatch:\n                \n                {\n\t\t\t\t\tentry: say(\"Please repeat it again\"),\n\t\t\t\t\ton: { ENDSPEECH: \"prompt\" }\n\t\t\t\t}\n\t\t\t            }\n\t\t                \n                    },\n\n\n\t\twithtime: \n        \n        {\n\t\t\tinitial: \"prompt\",\n\t\t\ton: \n            \n            {\n\t\t\t\tRECOGNISED: \n                [\n                    \n                    { \n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\n\t\t\t\t\ttarget: \"Finished\"\n                    },\n\t\t\t\t\t{\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\ttarget: \"who\"\n\t\t\t\t    },\n\t\t\t\t    { target: \".nomatch\" }\n                ]\n\t\t\t},\n\n\n\t\t\t states: \n             \n            {\n\t\t\t\t prompt: \n                 \n                 {\n\t\t\t\t\t entry: send((context) => ({\n\t\t\t\t\t\t type: \"SPEAK\",\n\t\t\t\t\t\t value: `Good. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n\t\t\t\t\t })),\n\t\t\t\t\t on: { ENDSPEECH: \"ask\" }\n\t\t\t\t },\n\n\t\t\t\t ask: \n                {\n\t\t\t\t\t entry: listen()\n\t\t\t\t},\n\n\t\t\t\t nomatch: \n                 \n                 {\n\t\t\t\t\t entry: say(\"Please repeat it again\"),\n\t\t\t\t\t on: { ENDSPEECH: \"prompt\" }\n\t\t\t\t }\n\t\t\t}\n\t\t},\n\n                Finished: \n                \n                {\n\t\t                 initial: \"prompt\",\n\t\t                 on: { ENDSPEECH: \"init\" },\n\t\t                 states: \n                        {\n\t\t\t                 prompt: { entry: say(\"Your appointment has been created!\")},\n\t                    }\n\t            }\t    \n    }\n\n})*/ // new code for lab 4\nexport const dmMachine={initial:'init',states:{init:{on:{CLICK:'welcome'}},welcome:{initial:\"prompt\",on:{RECOGNISED:[{target:\"query\",cond:context=>!(context.recResult in commands),actions:assign(context=>{return{option:context.recResult};})},{target:\"help1\",cond:context=>context.recResult in commands}],MAXSPEECH:[{target:\"welcome.maxspeech1\",cond:context=>grammar3[\"count\"]<=2,actions:assign(context=>{grammar3[\"count\"]=grammar3[\"count\"]+1;})},{target:\"#root.dm.init\",cond:context=>grammar3[\"count\"]>2,actions:assign(context=>{grammar3[\"count\"]=0;})}]},states:{prompt:{entry:say(\"What would you like to do?\"),on:{ENDSPEECH:\"ask\"}},hist:{type:\"history\"},maxspeech1:_objectSpread({},speech(\"You have not responded. What is it you would like to do?\")),ask:{entry:[listen(),send('MAXSPEECH',{delay:5000})]}}},help1:_objectSpread({},helpm(\"Please tell me what you want to do.\",\"welcome\")),query:{invoke:{id:\"rasa\",src:(context,event)=>nluRequest(context.option),onDone:{target:\"menu\",actions:[assign((context,event)=>{return{option:event.data.intent.name};}),(context,event)=>console.log(event.data)]//actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n},onError:{target:\"welcome\",actions:(context,event)=>console.log(event.data)}}},menu:{initial:\"prompt\",on:{ENDSPEECH:[{target:\"todo\",cond:context=>context.option===\"todo\"},{target:\"timer\",cond:context=>context.option===\"timer\"},{target:\"appointment\",cond:context=>context.option===\"appointment\"}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"OK. I understand\\uFF0Cyou want a \".concat(context.option,\".\")}))}/*            nomatch: {\n                    entry: say(\"Sorry, I don\"t understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } */}},todo:{initial:\"prompt\",on:{ENDSPEECH:\"init\"},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Let\\\"s create a to do item.\"}))}}},timer:{initial:\"prompt\",on:{ENDSPEECH:\"init\"},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Let\\\"s create a timer\"}))}}},appointment:{initial:\"prompt\",on:{ENDSPEECH:\"who\"},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Let\\\"s create an appointment\"}))}}},who:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"person\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{person:grammar[context.recResult].person};}),target:\"day\"},{target:\".nomatch\",cond:context=>!(context.recResult in commands),actions:cancel(\"maxsp\")},{target:\"help2\",cond:context=>context.recResult in commands}],MAXSPEECH:[{target:\"who.maxspeech2\",cond:context=>grammar3[\"count\"]<=2,actions:assign(context=>{grammar3[\"count\"]=grammar3[\"count\"]+1;})},{target:\"#root.dm.init\",cond:context=>grammar3[\"count\"]>2,actions:assign(context=>{grammar3[\"count\"]=0;})}]},states:{prompt:{entry:say(\"Who are you meeting with?\"),on:{ENDSPEECH:\"ask\"}},hist:{type:\"history\"},ask:{entry:[listen(),send('MAXSPEECH',{delay:5000,id:\"maxsp\"})]},maxspeech2:_objectSpread({},speech(\"You did not respond. Which person are you meeting with?\")),nomatch:{entry:say(\"Sorry, I don't know them\"),on:{ENDSPEECH:\"prompt\"}}}},help2:_objectSpread({},helpm(\"Please tell me the name\",\"who\")),day:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"day\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{day:grammar[context.recResult].day};}),target:\"wholeday\"},{target:\".nomatch\",cond:context=>!(context.recResult in commands),actions:cancel(\"maxsp\")},{target:\"help3\",cond:context=>context.recResult in commands}],MAXSPEECH:[{target:\"day.maxspeech3\",cond:context=>grammar3[\"count\"]<=2,actions:assign(context=>{grammar3[\"count\"]=grammar3[\"count\"]+1;})},{target:\"#root.dm.init\",cond:context=>grammar3[\"count\"]>2,actions:assign(context=>{grammar3[\"count\"]=0;})}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"OK. \".concat(context.person,\". What day is your meeting on?\")})),on:{ENDSPEECH:\"ask\"}},hist:{type:\"history\"},ask:{entry:[listen(),send('MAXSPEECH',{delay:5000,id:\"maxsp\"})]},maxspeech3:_objectSpread({},speech(\"You did not respond, state a day\")),nomatch:{entry:say(\"Sorry, I don't know which day you are talking about.\"),on:{ENDSPEECH:\"prompt\"}}}},help3:_objectSpread({},helpm(\"Please tell me the day\",\"day\")),wholeday:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>grammar2[context.recResult]===true,target:\"notime\"},{cond:context=>grammar2[context.recResult]===false,target:\"whattime\"},{target:\".nomatch\",cond:context=>!(context.recResult in commands),actions:cancel(\"maxsp\")},{target:\"help4\",cond:context=>context.recResult in commands}],MAXSPEECH:[{target:\"wholeday.maxspeech4\",cond:context=>grammar3[\"count\"]<=2,actions:assign(context=>{grammar3[\"count\"]=grammar3[\"count\"]+1;})},{target:\"#root.dm.init\",cond:context=>grammar3[\"count\"]>2,actions:assign(context=>{grammar3[\"count\"]=0;})}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Good, on \".concat(context.day,\". Will it take the whole day?\")})),on:{ENDSPEECH:\"ask\"}},hist:{type:\"history\"},ask:{entry:[listen(),send('MAXSPEECH',{delay:5000,id:\"maxsp\"})]},maxspeech4:_objectSpread({},speech(\"You did not respond, make a decision\")),nomatch:{entry:say(\"Please repeat it again\"),on:{ENDSPEECH:\"prompt\"}}}},help4:_objectSpread({},helpm(\"Please tell me the decision\",\"wholeday\")),notime:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>grammar2[context.recResult]===true,target:\"Finished\"},{cond:context=>grammar2[context.recResult]===false,target:\"who\"},{target:\".nomatch\",cond:context=>!(context.recResult in commands),actions:cancel(\"maxsp\")},{target:\"help5\",cond:context=>context.recResult in commands}],MAXSPEECH:[{target:\"notime.maxspeech5\",cond:context=>grammar3[\"count\"]<=2,actions:assign(context=>{grammar3[\"count\"]=grammar3[\"count\"]+1;})},{target:\"#root.dm.init\",cond:context=>grammar3[\"count\"]>2,actions:assign(context=>{grammar3[\"count\"]=0;})}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Great. Do you want to me create an appointment with \".concat(context.person,\" on \").concat(context.day,\" for the whole day?\")})),on:{ENDSPEECH:\"ask\"}},hist:{type:\"history\"},ask:{entry:[listen(),send('MAXSPEECH',{delay:5000,id:\"maxsp\"})]},maxspeech5:_objectSpread({},speech(\"You did not respond, please confirm.\")),nomatch:{entry:say(\"Please, repeat it again\"),on:{ENDSPEECH:\"prompt\"}}}},help5:_objectSpread({},helpm(\"Please confirm it\",\"notime\")),whattime:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"time\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{time:grammar[context.recResult].time};}),target:\"withtime\"},{target:\".nomatch\",cond:context=>!(context.recResult in commands),actions:cancel(\"maxsp\")},{target:\"help6\",cond:context=>context.recResult in commands}],MAXSPEECH:[{target:\"whattime.maxspeech6\",cond:context=>grammar3[\"count\"]<=2,actions:assign(context=>{grammar3[\"count\"]=grammar3[\"count\"]+1;})},{target:\"#root.dm.init\",cond:context=>grammar3[\"count\"]>2,actions:assign(context=>{grammar3[\"count\"]=0;})}]},states:{prompt:{entry:say(\"What time is your meeting\"),on:{ENDSPEECH:\"ask\"}},hist:{type:\"history\"},ask:{entry:[listen(),send('MAXSPEECH',{delay:5000,id:\"maxsp\"})]},maxspeech6:_objectSpread({},speech(\"You did not respond, state a time\")),nomatch:{entry:say(\"Please repeat it again\"),on:{ENDSPEECH:\"prompt\"}}}},help6:_objectSpread({},helpm(\"Please tell me the time\",\"whattime\")),withtime:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>grammar2[context.recResult]===true,target:\"Finished\"},{cond:context=>grammar2[context.recResult]===false,target:\"who\"},{target:\".nomatch\",cond:context=>!(context.recResult in commands),actions:cancel(\"maxsp\")},{target:\"help7\",cond:context=>context.recResult in commands}],MAXSPEECH:[{target:\"withtime.maxspeech7\",cond:context=>grammar3[\"count\"]<=2,actions:assign(context=>{grammar3[\"count\"]=grammar3[\"count\"]+1;})},{target:\"#root.dm.init\",cond:context=>grammar3[\"count\"]>2,actions:assign(context=>{grammar3[\"count\"]=0;})}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Great. Do you want to me create an appointment with \".concat(context.person,\" on \").concat(context.day,\" at \").concat(context.time,\"?\")})),on:{ENDSPEECH:\"ask\"}},hist:{type:\"history\"},ask:{entry:[listen(),send('MAXSPEECH',{delay:5000,id:\"maxsp\"})]},maxspeech7:_objectSpread({},speech(\"You did not respond, please confirm\")),nomatch:{entry:say(\"Please repeat it again\"),on:{ENDSPEECH:\"prompt\"}}}},help7:_objectSpread({},helpm(\"Please confirm\",\"withtime\")),Finished:{initial:\"prompt\",on:{ENDSPEECH:\"init\"},states:{prompt:{entry:say(\"Ok, great! Your appointment has been created!\")}}}}};//the api for rasa to use\nconst proxyurl=\"https://cors-anywhere.herokuapp.com/\";// have to set up temporary permission/access for the robot to not give error: \"Unexpected token S in JSON at position 0\"\nconst rasaurl=\"https://intents-oyousuf.herokuapp.com/model/parse\";const nluRequest=text=>fetch(new Request(proxyurl+rasaurl,{method:\"POST\",headers:{\"Origin\":\"http://localhost:3000/react-xstate-colourchanger\"},body:\"{\\\"text\\\": \\\"\".concat(text,\"\\\"}\")})).then(data=>data.json());","map":{"version":3,"sources":["C:/Users/User/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","actions","cancel","say","text","_context","type","value","listen","helpm","prompt","name","entry","on","ENDSPEECH","speech","grammar","person","day","time","grammar2","commands","grammar3","promptAsk","initial","states","ask","dmMachine","init","CLICK","welcome","RECOGNISED","target","cond","context","recResult","option","MAXSPEECH","hist","maxspeech1","delay","help1","query","invoke","id","src","event","nluRequest","onDone","data","intent","console","log","onError","menu","todo","timer","appointment","who","maxspeech2","nomatch","help2","maxspeech3","help3","wholeday","maxspeech4","help4","notime","maxspeech5","help5","whattime","maxspeech6","help6","withtime","maxspeech7","help7","Finished","proxyurl","rasaurl","fetch","Request","method","headers","body","then","json"],"mappings":"8JAAA,OAAiCA,IAAjC,CAA+CC,MAA/C,KAA6D,QAA7D,CACA,MAAO,eAAP,CACA;AAKA;AAEA;eACeC,O,CAARC,M,UAAAA,M,CACP;AAGA,QAASC,CAAAA,GAAT,CAAaC,IAAb,CAAyD,CACrD,MAAOL,CAAAA,IAAI,CAAEM,QAAD,GAA2B,CAAEC,IAAI,CAAE,OAAR,CAAiBC,KAAK,CAAEH,IAAxB,CAA3B,CAAD,CAAX,CACH,CAED,QAASI,CAAAA,MAAT,EAAgD,CAC5C,MAAOT,CAAAA,IAAI,CAAC,QAAD,CAAX,CACH,CAED;AACA,QAASU,CAAAA,KAAT,CAAeC,MAAf,CAA+BC,IAA/B,CAAsF,CAClF,MAAQ,CAACC,KAAK,CAAET,GAAG,CAACO,MAAD,CAAX,CACCG,EAAE,CAAE,CAACC,SAAS,CAAEH,IAAI,CAAC,OAAjB,CADL,CAAR,CAEH,CAED,QAASI,CAAAA,MAAT,CAAgBL,MAAhB,CAAyE,CACrE,MAAQ,CAACE,KAAK,CAAET,GAAG,CAACO,MAAD,CAAX,CACCG,EAAE,CAAE,CAACC,SAAS,CAAE,KAAZ,CADL,CAAR,CAGH,CACD;AAGA,KAAME,CAAAA,OACL,CAAG,CACA;AACA,OAAQ,CAAEC,MAAM,CAAE,gBAAV,CAFR,CAGA,OAAQ,CAAEA,MAAM,CAAE,iBAAV,CAHR,CAIA,QAAS,CAAEA,MAAM,CAAE,iBAAV,CAJT,CAKA,SAAU,CAAEA,MAAM,CAAE,uBAAV,CALV,CAMA,WAAY,CAAEA,MAAM,CAAE,qBAAV,CANZ,CAOA,UAAW,CAAEA,MAAM,CAAE,uBAAV,CAPX,CASA,OAAQ,CAAEA,MAAM,CAAE,gBAAV,CATR,CAUA,OAAQ,CAAEA,MAAM,CAAE,iBAAV,CAVR,CAWA,QAAS,CAAEA,MAAM,CAAE,iBAAV,CAXT,CAYA,SAAU,CAAEA,MAAM,CAAE,uBAAV,CAZV,CAaA,WAAY,CAAEA,MAAM,CAAE,qBAAV,CAbZ,CAcA,UAAW,CAAEA,MAAM,CAAE,uBAAV,CAdX,CAgBA;AACA,MAAO,CAAEA,MAAM,CAAE,SAAV,CAjBP,CAkBA,OAAQ,CAAEA,MAAM,CAAE,SAAV,CAlBR,CAmBA,UAAW,CAAEA,MAAM,CAAE,cAAV,CAnBX,CAoBA,QAAS,CAAEA,MAAM,CAAE,cAAV,CApBT,CAqBA,WAAY,CAAEA,MAAM,CAAE,kBAAV,CArBZ,CAsBA,OAAQ,CAAEA,MAAM,CAAE,YAAV,CAtBR,CAuBA,OAAQ,CAAEA,MAAM,CAAE,cAAV,CAvBR,CAyBA,MAAO,CAAEA,MAAM,CAAE,SAAV,CAzBP,CA0BA,OAAQ,CAAEA,MAAM,CAAE,SAAV,CA1BR,CA2BA,UAAW,CAAEA,MAAM,CAAE,cAAV,CA3BX,CA4BA,QAAS,CAAEA,MAAM,CAAE,cAAV,CA5BT,CA6BA,WAAY,CAAEA,MAAM,CAAE,kBAAV,CA7BZ,CA8BA,OAAQ,CAAEA,MAAM,CAAE,YAAV,CA9BR,CA+BA,OAAQ,CAAEA,MAAM,CAAE,cAAV,CA/BR,CAiCA;AACA,SAAU,CAAEC,GAAG,CAAE,QAAP,CAlCV,CAmCA,YAAa,CAAEA,GAAG,CAAE,QAAP,CAnCb,CAoCA,UAAW,CAAEA,GAAG,CAAE,SAAP,CApCX,CAqCA,aAAc,CAAEA,GAAG,CAAE,SAAP,CArCd,CAsCA,YAAa,CAAEA,GAAG,CAAE,WAAP,CAtCb,CAuCA,eAAgB,CAAEA,GAAG,CAAE,WAAP,CAvChB,CAwCA,WAAY,CAAEA,GAAG,CAAE,UAAP,CAxCZ,CAyCA,cAAe,CAAEA,GAAG,CAAE,UAAP,CAzCf,CA0CA,SAAU,CAAEA,GAAG,CAAE,QAAP,CA1CV,CA2CA,YAAa,CAAEA,GAAG,CAAE,QAAP,CA3Cb,CA4CA,WAAY,CAAEA,GAAG,CAAE,UAAP,CA5CZ,CA6CA,cAAe,CAAEA,GAAG,CAAE,UAAP,CA7Cf,CA8CA,SAAU,CAAEA,GAAG,CAAE,QAAP,CA9CV,CA+CA,YAAa,CAAEA,GAAG,CAAE,QAAP,CA/Cb,CAiDA;AACA,SAAU,CAAEC,IAAI,CAAE,OAAR,CAlDV,CAmDA,SAAU,CAAEA,IAAI,CAAE,OAAR,CAnDV,CAoDA,WAAY,CAAEA,IAAI,CAAE,OAAR,CApDZ,CAqDA,UAAW,CAAEA,IAAI,CAAE,OAAR,CArDX,CAsDA,UAAW,CAAEA,IAAI,CAAE,OAAR,CAtDX,CAuDA,SAAU,CAAEA,IAAI,CAAE,OAAR,CAvDV,CAwDA,WAAY,CAAEA,IAAI,CAAE,OAAR,CAxDZ,CAyDA,WAAY,CAAEA,IAAI,CAAE,OAAR,CAzDZ,CA0DA,UAAW,CAAEA,IAAI,CAAE,OAAR,CA1DX,CA2DA,SAAU,CAAEA,IAAI,CAAE,OAAR,CA3DV,CA4DA,YAAa,CAAEA,IAAI,CAAE,OAAR,CA5Db,CA6DA,YAAa,CAAEA,IAAI,CAAE,OAAR,CA7Db,CA8DA,cAAe,CAAEA,IAAI,CAAE,OAAR,CA9Df,CA+DA,cAAe,CAAEA,IAAI,CAAE,OAAR,CA/Df,CAgEA,aAAc,CAAEA,IAAI,CAAE,OAAR,CAhEd,CAiEA,aAAc,CAAEA,IAAI,CAAE,OAAR,CAjEd,CAkEA,eAAgB,CAAEA,IAAI,CAAE,OAAR,CAlEhB,CAmEA,cAAe,CAAEA,IAAI,CAAE,OAAR,CAnEf,CAoEA,cAAe,CAAEA,IAAI,CAAE,OAAR,CApEf,CAqEA,YAAa,CAAEA,IAAI,CAAE,OAAR,CArEb,CAsEA,gBAAiB,CAAEA,IAAI,CAAE,OAAR,CAtEjB,CAuEA,gBAAiB,CAAEA,IAAI,CAAE,OAAR,CAvEjB,CAwEA,kBAAmB,CAAEA,IAAI,CAAE,OAAR,CAxEnB,CAyEA,iBAAkB,CAAEA,IAAI,CAAE,OAAR,CAzElB,CA2EA,MAAO,CAAEA,IAAI,CAAE,OAAR,CA3EP,CA4EA,MAAO,CAAEA,IAAI,CAAE,OAAR,CA5EP,CA6EA,QAAS,CAAEA,IAAI,CAAE,OAAR,CA7ET,CA8EA,OAAQ,CAAEA,IAAI,CAAE,OAAR,CA9ER,CA+EA,OAAQ,CAAEA,IAAI,CAAE,OAAR,CA/ER,CAgFA,MAAO,CAAEA,IAAI,CAAE,OAAR,CAhFP,CAiFA,QAAS,CAAEA,IAAI,CAAE,OAAR,CAjFT,CAkFA,QAAS,CAAEA,IAAI,CAAE,OAAR,CAlFT,CAmFA,OAAQ,CAAEA,IAAI,CAAE,OAAR,CAnFR,CAoFA,MAAO,CAAEA,IAAI,CAAE,OAAR,CApFP,CAqFA,SAAU,CAAEA,IAAI,CAAE,OAAR,CArFV,CAsFA,SAAU,CAAEA,IAAI,CAAE,OAAR,CAtFV,CAuFA,WAAY,CAAEA,IAAI,CAAE,OAAR,CAvFZ,CAwFA,WAAY,CAAEA,IAAI,CAAE,OAAR,CAxFZ,CAyFA,UAAW,CAAEA,IAAI,CAAE,OAAR,CAzFX,CA0FA,UAAW,CAAEA,IAAI,CAAE,OAAR,CA1FX,CA2FA,YAAa,CAAEA,IAAI,CAAE,OAAR,CA3Fb,CA4FA,WAAY,CAAEA,IAAI,CAAE,OAAR,CA5FZ,CA6FA,WAAY,CAAEA,IAAI,CAAE,OAAR,CA7FZ,CA8FA,SAAU,CAAEA,IAAI,CAAE,OAAR,CA9FV,CA+FA,aAAc,CAAEA,IAAI,CAAE,OAAR,CA/Fd,CAgGA,aAAc,CAAEA,IAAI,CAAE,OAAR,CAhGd,CAiGA,eAAgB,CAAEA,IAAI,CAAE,OAAR,CAjGhB,CAkGA,cAAe,CAAEA,IAAI,CAAE,OAAR,CAlGf,CAoGA,OAAQ,CAAEA,IAAI,CAAE,OAAR,CApGR,CAqGA,OAAQ,CAAEA,IAAI,CAAE,OAAR,CArGR,CAsGA,OAAQ,CAAEA,IAAI,CAAE,OAAR,CAtGR,CAuGA,OAAQ,CAAEA,IAAI,CAAE,OAAR,CAvGR,CAwGA,OAAQ,CAAEA,IAAI,CAAE,OAAR,CAxGR,CAyGA,OAAQ,CAAEA,IAAI,CAAE,OAAR,CAzGR,CA0GA,OAAQ,CAAEA,IAAI,CAAE,OAAR,CA1GR,CA2GA,OAAQ,CAAEA,IAAI,CAAE,OAAR,CA3GR,CA4GA,OAAQ,CAAEA,IAAI,CAAE,OAAR,CA5GR,CA6GA,QAAS,CAAEA,IAAI,CAAE,OAAR,CA7GT,CA8GA,QAAS,CAAEA,IAAI,CAAE,OAAR,CA9GT,CA+GA,QAAS,CAAEA,IAAI,CAAE,OAAR,CA/GT,CAgHA,QAAS,CAAEA,IAAI,CAAE,OAAR,CAhHT,CAiHA,QAAS,CAAEA,IAAI,CAAE,OAAR,CAjHT,CAkHA,QAAS,CAAEA,IAAI,CAAE,OAAR,CAlHT,CAmHA,QAAS,CAAEA,IAAI,CAAE,OAAR,CAnHT,CAoHA,QAAS,CAAEA,IAAI,CAAE,OAAR,CApHT,CAqHA,QAAS,CAAEA,IAAI,CAAE,OAAR,CArHT,CAsHA,QAAS,CAAEA,IAAI,CAAE,OAAR,CAtHT,CAuHA,QAAS,CAAEA,IAAI,CAAE,OAAR,CAvHT,CAwHA,QAAS,CAAEA,IAAI,CAAE,OAAR,CAxHT,CAyHA,QAAS,CAAEA,IAAI,CAAE,OAAR,CAzHT,CA0HA,QAAS,CAAEA,IAAI,CAAE,OAAR,CA1HT,CA2HA,QAAS,CAAEA,IAAI,CAAE,OAAR,CA3HT,CA6HA,IAAK,CAAEA,IAAI,CAAE,OAAR,CA7HL,CA8HA,IAAK,CAAEA,IAAI,CAAE,OAAR,CA9HL,CA+HA,IAAK,CAAEA,IAAI,CAAE,OAAR,CA/HL,CAgIA,IAAK,CAAEA,IAAI,CAAE,OAAR,CAhIL,CAiIA,IAAK,CAAEA,IAAI,CAAE,OAAR,CAjIL,CAkIA,IAAK,CAAEA,IAAI,CAAE,OAAR,CAlIL,CAmIA,IAAK,CAAEA,IAAI,CAAE,OAAR,CAnIL,CAoIA,IAAK,CAAEA,IAAI,CAAE,OAAR,CApIL,CAqIA,IAAK,CAAEA,IAAI,CAAE,OAAR,CArIL,CAsIA,KAAM,CAAEA,IAAI,CAAE,OAAR,CAtIN,CAuIA,KAAM,CAAEA,IAAI,CAAE,OAAR,CAvIN,CAwIA,KAAM,CAAEA,IAAI,CAAE,OAAR,CAxIN,CAyIA,KAAM,CAAEA,IAAI,CAAE,OAAR,CAzIN,CA0IA,KAAM,CAAEA,IAAI,CAAE,OAAR,CA1IN,CA2IA,KAAM,CAAEA,IAAI,CAAE,OAAR,CA3IN,CA4IA,KAAM,CAAEA,IAAI,CAAE,OAAR,CA5IN,CA6IA,KAAM,CAAEA,IAAI,CAAE,OAAR,CA7IN,CA8IA,KAAM,CAAEA,IAAI,CAAE,OAAR,CA9IN,CA+IA,KAAM,CAAEA,IAAI,CAAE,OAAR,CA/IN,CAgJA,KAAM,CAAEA,IAAI,CAAE,OAAR,CAhJN,CAiJA,KAAM,CAAEA,IAAI,CAAE,OAAR,CAjJN,CAkJA,KAAM,CAAEA,IAAI,CAAE,OAAR,CAlJN,CAmJA,KAAM,CAAEA,IAAI,CAAE,OAAR,CAnJN,CAoJA,KAAM,CAAEA,IAAI,CAAE,OAAR,CApJN,CADJ,CAwJA;AACA,KAAMC,CAAAA,QAAuC,CACzC,CAAC,MAAO,IAAR,CACA,MAAO,IADP,CAEA,gBAAiB,IAFjB,CAGA,gBAAiB,IAHjB,CAIA,OAAQ,IAJR,CAKA,OAAQ,IALR,CAMA,aAAc,IANd,CAOA,aAAc,IAPd,CAQA,UAAW,IARX,CASA,UAAW,IATX,CAUA,KAAM,KAVN,CAWA,KAAM,KAXN,CAYA,SAAU,KAZV,CAaA,SAAU,KAbV,CADJ,CAiBA;AACA,KAAMC,CAAAA,QAAQ,CAAG,CAAC,OAAQ,GAAT,CAAc,OAAQ,GAAtB,CAAjB,CAEA,KAAMC,CAAAA,QAAQ,CAAE,CAAC,QAAS,CAAV,CAAhmBb,MAAnB,CAA6E,CACzE,MAAQ,CACJc,OAAO,CAAE,QADL,CAEJC,MAAM,CAAE,CACJf,MAAM,CAAE,CACJE,KAAK,CAAET,GAAG,CAACO,MAAD,CADN,CAEJG,EAAE,CAAE,CAAEC,SAAS,CAAE,KAAb,CAFA,CADJ,CAKJY,GAAG,CAAE,CACDd,KAAK,CAAEb,IAAI,CAAC,QAAD,CADV,CALD,CAFJ,CAAR,CAWH,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","sourcesContent":["import { MachineConfig, Machine, send, Action, assign } from \"xstate\";\nimport \"./styles.scss\";\n// new stuff\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\n//new\n\n//new\nconst {cancel}=actions\n//new\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send(\"LISTEN\")\n}\n\n//new\nfunction helpm(prompt: string, name: string): MachineConfig<SDSContext, any, SDSEvent>{\n    return ({entry: say(prompt),\n             on: {ENDSPEECH: name+\".hist\" }})\n}\n\nfunction speech(prompt: string): MachineConfig<SDSContext, any, SDSEvent>{\n    return ({entry: say(prompt),\n             on: {ENDSPEECH: \"ask\"\n            }})\n}\n//new\n\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } \n} = {\n    // Here are some common names in English that I found are easier for the robot to understand.\n    \"John\": { person: \"John Appleseed\" },\n    \"Jack\": { person: \"Jack Orangeseed\" },\n    \"David\": { person: \"David Grapeseed\" },\n    \"Robert\": { person: \"Robert Watermelonseed\" },\n    \"Jennifer\": { person: \"Jennifer Bananaseed\" },\n    \"Jessica\": { person: \"Jessica Pineappleseed\" },\n\n    \"john\": { person: \"john appleseed\" },\n    \"jack\": { person: \"jack orangeseed\" },\n    \"david\": { person: \"david grapeseed\" },\n    \"robert\": { person: \"robert watermelonseed\" },\n    \"jennifer\": { person: \"jennifer bananaseed\" },\n    \"jessica\": { person: \"jessica pineappleseed\" },\n\n    // Here are names of friends I tried at first, but because they're non-English it was incredibly hard to move forward with the robot so I mad the previously mentioned English names above.\n    \"Zhe\": { person: \"Zhe Han\" },\n    \"Siyi\": { person: \"Siyi Gu\" },\n    \"Jae Eun\": { person: \"Jae Eun Hong\" },\n    \"Oreen\": { person: \"Oreen Yousuf\" },\n    \"Angeliki\": { person: \"Angeliki Zagoura\" },\n    \"Flor\": { person: \"Flor Ortiz\" },\n    \"Emma\": { person: \"Emma Wallerö\"},\n\n    \"zhe\": { person: \"zhe han\" },\n    \"siyi\": { person: \"siyi gu\" },\n    \"jae eun\": { person: \"jae eun hong\" },\n    \"oreen\": { person: \"oreen yousuf\" },\n    \"angeliki\": { person: \"angeliki zagoura\" },\n    \"flor\": { person: \"flor ortiz\" },\n    \"emma\": { person: \"emma wallerö\" },\n\n    //Days of the week with alternating potential utterances ('on')\n    \"Monday\": { day: \"Monday\" },\n    \"on Monday\": { day: \"Monday\" },\n    \"Tuesday\": { day: \"Tuesday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"Friday\": { day: \"Friday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"Sunday\": { day: \"Sunday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n\n    //times with different utterances and spellings/numberings to capture all ways the robot could interpret it\n    \"at one\": { time: \"01:00\" },\n    \"at two\": { time: \"02:00\" },\n    \"at three\": { time: \"03:00\" },\n    \"at four\": { time: \"04:00\" },\n    \"at five\": { time: \"05:00\" },\n    \"at six\": { time: \"06:00\" },\n    \"at seven\": { time: \"07:00\" },\n    \"at eight\": { time: \"08:00\" },\n    \"at nine\": { time: \"09:00\" },\n    \"at ten\": { time: \"10:00\" },\n    \"at eleven\": { time: \"11:00\" },\n    \"at twelve\": { time: \"12:00\" },\n    \"at thirteen\": { time: \"13:00\" },\n    \"at fourteen\": { time: \"14:00\" },\n    \"at fifteen\": { time: \"15:00\" },\n    \"at sixteen\": { time: \"16:00\" },\n    \"at seventeen\": { time: \"17:00\" },\n    \"at eighteen\": { time: \"18:00\" },\n    \"at nineteen\": { time: \"19:00\" },\n    \"at twenty\": { time: \"20:00\" },\n    \"at twenty one\": { time: \"21:00\" },\n    \"at twenty two\": { time: \"22:00\" },\n    \"at twenty three\": { time: \"23:00\" },\n    \"at twenty four\": { time: \"00:00\" },\n\n    \"one\": { time: \"01:00\" },\n    \"two\": { time: \"02:00\" },\n    \"three\": { time: \"03:00\" },\n    \"four\": { time: \"04:00\" },\n    \"five\": { time: \"05:00\" },\n    \"six\": { time: \"06:00\" },\n    \"seven\": { time: \"07:00\" },\n    \"eight\": { time: \"08:00\" },\n    \"nine\": { time: \"09:00\" },\n    \"ten\": { time: \"10:00\" },\n    \"eleven\": { time: \"11:00\" },\n    \"twelve\": { time: \"12:00\" },\n    \"thirteen\": { time: \"13:00\" },\n    \"fourteen\": { time: \"14:00\" },\n    \"fifteen\": { time: \"15:00\" },\n    \"sixteen\": { time: \"16:00\" },\n    \"seventeen\": { time: \"17:00\" },\n    \"eighteen\": { time: \"18:00\" },\n    \"nineteen\": { time: \"19:00\" },\n    \"twenty\": { time: \"20:00\" },\n    \"twenty one\": { time: \"21:00\" },\n    \"twenty two\": { time: \"22:00\" },\n    \"twenty three\": { time: \"23:00\" },\n    \"twenty four\": { time: \"00:00\" },\n\n    \"at 1\": { time: \"01:00\" },\n    \"at 2\": { time: \"02:00\" },\n    \"at 3\": { time: \"03:00\" },\n    \"at 4\": { time: \"04:00\" },\n    \"at 5\": { time: \"05:00\" },\n    \"at 6\": { time: \"06:00\" },\n    \"at 7\": { time: \"07:00\" },\n    \"at 8\": { time: \"08:00\" },\n    \"at 9\": { time: \"09:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"at 13\": { time: \"13:00\" },\n    \"at 14\": { time: \"14:00\" },\n    \"at 15\": { time: \"15:00\" },\n    \"at 16\": { time: \"16:00\" },\n    \"at 17\": { time: \"17:00\" },\n    \"at 18\": { time: \"18:00\" },\n    \"at 19\": { time: \"19:00\" },\n    \"at 20\": { time: \"20:00\" },\n    \"at 21\": { time: \"21:00\" },\n    \"at 22\": { time: \"22:00\" },\n    \"at 23\": { time: \"23:00\" },\n    \"at 24\": { time: \"00:00\" },\n\n    \"1\": { time: \"01:00\" },\n    \"2\": { time: \"02:00\" },\n    \"3\": { time: \"03:00\" },\n    \"4\": { time: \"04:00\" },\n    \"5\": { time: \"05:00\" },\n    \"6\": { time: \"06:00\" },\n    \"7\": { time: \"07:00\" },\n    \"8\": { time: \"08:00\" },\n    \"9\": { time: \"09:00\" },\n    \"10\": { time: \"10:00\" },\n    \"11\": { time: \"11:00\" },\n    \"12\": { time: \"12:00\" },\n    \"13\": { time: \"13:00\" },\n    \"14\": { time: \"14:00\" },\n    \"15\": { time: \"15:00\" },\n    \"16\": { time: \"16:00\" },\n    \"17\": { time: \"17:00\" },\n    \"18\": { time: \"18:00\" },\n    \"19\": { time: \"19:00\" },\n    \"20\": { time: \"20:00\" },\n    \"21\": { time: \"21:00\" },\n    \"22\": { time: \"22:00\" },\n    \"23\": { time: \"23:00\" },\n    \"24\": { time: \"00:00\" }\n}\n\n//second grammar for trues and falses\nconst grammar2 : { [index: string]: boolean } = \n    {\"yes\": true,\n    \"Yes\": true,\n    \"yes of course\": true,\n    \"Yes of course\": true,\n    \"sure\": true,\n    \"Sure\": true,\n    \"absolutely\": true,\n    \"Absolutely\": true,\n    \"perfect\": true,\n    \"Perfect\": true,\n    \"no\": false,\n    \"No\": false,\n    \"no way\": false,\n    \"No way\": false\n}\n\n//new\nconst commands = {\"help\": \"h\", \"Help\": \"H\"}\n\nconst grammar3 ={\"count\": 0}\n//new\n\n\n/*function promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: \"prompt\",\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: \"ask\" }\n            },\n            ask: {\n                entry: send(\"LISTEN\")\n            },\n        }})\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n   \n    initial: \"init\",\n    states: {\n        init: {\n            on: {\n                CLICK: \"welcome\"\n            }            \n        },        \n\n        welcome: {\n            on: {\n                RECOGNISED: {\n                    target: \"query\",\n                    actions: assign((context) => { return { option: context.recResult } }),\n                }    \n            },\n                    ...promptAndAsk(\"What would you like to do? Your options are appointment, to do item or timer\")\n        },\n\n\n        query: {\n            invoke: {\n                id: \"rasa\",\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: \"menu\",\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data)]\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n                },\n                onError: {\n                    target: \"welcome\",\n                    actions: (context, event) => console.log(event.data)\n                }\n            }\n        },\n\n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: \"todo\", cond: (context) => context.option === \"todo\" },\n                    { target: \"timer\", cond: (context) => context.option === \"timer\" },\n                    { target: \"appointment\", cond: (context) => context.option === \"appointment\" }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I understand.`\n                    })),\n        }, \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a timer`\n                    }))\n                }}\n        },\n        \n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create an appointment`\n                    }))\n                }}\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n\t\t\t\t\tcond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I do not know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"wholeday\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`,\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I do not understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        wholeday: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === false),\n                    target: \"time\"\n                },\n\t\t{cond: (context) => (grammar2[context.recResult] === true),\n\t\ttarget: \"confirm_meeting_whole_day\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. Will it take the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry I do not understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t            }\n                }\n\t},\n        time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirm_time\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.day}. What time is your meeting?`,\n                    \n                    })),\n            on: { ENDSPEECH: \"ask\" }\n                },\n        ask: {\n            entry: listen()\n                },\n        nomatch: {\n            entry: say(\"Sorry I do not know that\"),\n        on: { ENDSPEECH: \"prompt\" }\n                }\n                }\n        },\n        confirm_meeting_whole_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === false),\n                    target: \"init\"\n                },\n\t\t{cond: (context) => (grammar2[context.recResult] === true),\n\t\ttarget: \"confirmed\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry I do not understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t           }\n                }\n\n\t},\n    confirm_time: {\n        initial: \"prompt\",\n        on:  {\n            RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === false),\n                target: \"who\"\n            },\n    {cond: (context) => (grammar2[context.recResult] === true),\n    target: \"confirmed\"\n    },\n            { target: \".nomatch\" }]\n        },\n        states: {\n            prompt: {\n               entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                })),\n        on: { ENDSPEECH: \"ask\" }\n            },\n    ask: {\n         entry: listen()\n        },\n    nomatch: {\n        entry: say(\"Sorry I do not understand\"),\n    on: { ENDSPEECH: \"prompt\" }\n           }\n            },\n        },\n    confirmed: {\n        initial: \"prompt\",\n        on: { ENDSPEECH: \"init\" },\n        states: {\n            prompt: {\n                entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Your appointment has been created!`\n                }))\n            },\n    }\n    }\n    }})\n*/\n\n\nfunction promptAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN')\n            },\n        }})\n}\n\n/* //lab 2 base code\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = \n\n({\n    initial: 'init',\n    states: \n    {\n        init:{\n            on: {\n                CLICK: 'welcome'\n                }\n             },\n        welcome: \n        {\n            on: {\n                RECOGNISED: {\n                    target: \"query\",\n                    actions: assign((context) => { return { option: context.recResult } }),\n                }    \n            },\n                    ...promptAsk(\"What would you like to do?\")\n        },\n\n        query: \n        {\n            invoke: {\n            \n            id: 'rasa',\n            src: (context, event) => nluRequest(context.option),\n            onDone: {\n                target: 'menu',\n                actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                (context: SDSContext, event: any) => console.log(event.data)]\n            },\n            onError: {\n                target: 'welcome',\n                actions: (context, event) => console.log(event.data)\n\n                }\n            }\n        },\n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: 'todo', cond: (context) => context.option === 'todo' },\n                    { target: 'timer', cond: (context) => context.option === 'timer' },\n                    { target: 'appointment', cond: (context) => context.option === 'appointment' }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I see.`\n                    })),\n        },\n                 nomatch: {\n                    entry: say(\"Sorry, I don't understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create a timer`\n                    }))\n                }}\n        },\n        \n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create an appointment`\n                    }))\n                }}\n        },\n\n        who: \n        \n        {\n            initial: \"prompt\",\n            on: \n            {\n                RECOGNISED: \n                [\n                    {\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n                    },\n                { target: \".nomatch\" }\n                ]\n            },\n\n            states: \n            \n            {\n                prompt: \n                \n                {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                \n                ask: \n                \n                {\n                    entry: listen()\n                },\n                \n                nomatch: \n                \n                {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n\n        day: \n        \n        {\n            initial: \"prompt\",\n            on: \n            \n            {\n\t            RECOGNISED: \n                [\n                    {\n\t                cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n\t\t            actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n\t\t            target: \"wholeday\"\n\n\t\t            },\t\n\n\t\t            { target: \".nomatch\" }\n                \n                ]\n\t        },\n\n            states: \n\n            {\n                prompt: \n                \n                {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n\t\t            on: { ENDSPEECH: \"ask\" }\n                },\n\t\t        ask: \n                \n                {\n\t\t            entry: listen()\n\t            },\n\n\t\t        nomatch: \n                \n                {\n\t\t            entry: say(\"Sorry I don't know which day are you talking about\"),\n\t\t            on: { ENDSPEECH: \"prompt\" }\n\t            }\t     \n            }\n        },\n\n\n\t    wholeday: \n        \n        {\n\t\t        initial: \"prompt\",\n\t\t        on: \n                \n                {\n\t                RECOGNISED: \n                    \n                    [\n                        {cond: (context) => grammar2[context.recResult] === true,\n                        target: \"timefixed\"},\n\n\t\t\t\t\t\t{cond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\t\ttarget: \"settime\"},\n\n\t                { target: \".nomatch\" }\n                    ]\n\t\t        \n                },\n\n\n\t\t        states: \n                \n                {\n\t\t            prompt: \n                    \n                    {\n\t\t\t            entry: send((context) => ({\n\t\t\t                type: \"SPEAK\",\n\t\t\t\t\t\t    value: `Good. Appointment is on ${context.day}. Will it take the whole day?`\n\t\t\t            })),\n\t\t\t            on: { ENDSPEECH: \"ask\" }\n\t\t            },\n\n\t\t            ask: {\n\t\t                entry: listen()\n\t\t            },\n\n\t\t            nomatch: \n\n                    {\n\t\t\t            entry: say(\"Please repeat it again\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t            }\n\t\t        }\t     \n        },\n\n\n            timefixed: \n            \n            {\n\t\t           initial: \"prompt\",\n\n\t               on: \n                   \n                   {\n\t\t               RECOGNISED: \n                       \n                       [\n                           {cond: (context) => grammar2[context.recResult] === true,\n\t\t\t               target: \"Finished\"},\n\t\t\t\t\t\t   {cond: (context) => grammar2[context.recResult] === false,\n                           target: \"who\"},\n\t\t                   { target: \".nomatch\" }\n                        ]\n\t\t            },\n\n\n\n\t\t            states: \n                    \n                    {\n\t\t                prompt: \n                        \n                        {\n\t\t\t                entry: send((context) => ({\n\t\t\t                    type: \"SPEAK\",\n\t\t\t\t\t\t\t\tvalue: `Good. Do you want to me create an appointment with ${context.person} on ${context.day}for the whole day?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\n\n\t\t                ask: \n                        \n                        {\n\t\t\t                entry: listen()\n\t\t                },\n\n\t\t                nomatch: \n                        \n                        {\n\t\t\t                entry: say(\"Please repeat it again\"),\n\t\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t                }\n                    }\n\t        },\n\n\t\t\tsettime: \n                \n                    {\n\n\t\t\t\t\t    initial: \"prompt\",\n\t\t\t\t\t    on: \n                    \n                    {\n\t\t\t\t\t\tRECOGNISED: \n                        [\n                            {\n\t\t\t\t\t\t\t\n                            cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n\t\t\t\t\t\t\tactions: assign((context) => { return { time: grammar[context.recResult].time }}),\n\t\t\t\t\t\t\ttarget: \"withtime\"\n\n\t\t\t\t\t\t    },\n\n\t\t\t\t\t\t    { target: \".nomatch\" }\n                        ]\n\t\t\t\t\t},\n\n\n\t\t\t\t\t    states: \n\n                        {\n\t\t\t\t\t\t    prompt: { entry: say(\"What time is your meeting\"),\n\t\t\t\t\t\t    on: { ENDSPEECH: \"ask\" }\n\t\t\t\t\t    },\n\n\t\t\t\t\task: \n                    {\n\t\t\t\t\t\tentry: listen()\n\t\t\t\t    },\n\n\t\t\t\tnomatch:\n                \n                {\n\t\t\t\t\tentry: say(\"Please repeat it again\"),\n\t\t\t\t\ton: { ENDSPEECH: \"prompt\" }\n\t\t\t\t}\n\t\t\t            }\n\t\t                \n                    },\n\n\n\t\twithtime: \n        \n        {\n\t\t\tinitial: \"prompt\",\n\t\t\ton: \n            \n            {\n\t\t\t\tRECOGNISED: \n                [\n                    \n                    { \n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\n\t\t\t\t\ttarget: \"Finished\"\n                    },\n\t\t\t\t\t{\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\ttarget: \"who\"\n\t\t\t\t    },\n\t\t\t\t    { target: \".nomatch\" }\n                ]\n\t\t\t},\n\n\n\t\t\t states: \n             \n            {\n\t\t\t\t prompt: \n                 \n                 {\n\t\t\t\t\t entry: send((context) => ({\n\t\t\t\t\t\t type: \"SPEAK\",\n\t\t\t\t\t\t value: `Good. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n\t\t\t\t\t })),\n\t\t\t\t\t on: { ENDSPEECH: \"ask\" }\n\t\t\t\t },\n\n\t\t\t\t ask: \n                {\n\t\t\t\t\t entry: listen()\n\t\t\t\t},\n\n\t\t\t\t nomatch: \n                 \n                 {\n\t\t\t\t\t entry: say(\"Please repeat it again\"),\n\t\t\t\t\t on: { ENDSPEECH: \"prompt\" }\n\t\t\t\t }\n\t\t\t}\n\t\t},\n\n                Finished: \n                \n                {\n\t\t                 initial: \"prompt\",\n\t\t                 on: { ENDSPEECH: \"init\" },\n\t\t                 states: \n                        {\n\t\t\t                 prompt: { entry: say(\"Your appointment has been created!\")},\n\t                    }\n\t            }\t    \n    }\n\n})*/\n\n// new code for lab 4\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\t\twelcome: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    target: \"query\",\n                    cond: (context) => !(context.recResult in commands),\n                    actions: assign((context) => { return { option: context.recResult } }),\n                },\n                {target: \"help1\",\n                cond: (context) => context.recResult in commands }],\n                MAXSPEECH: [{target:\"welcome.maxspeech1\",\n                cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}]\n            },\n            states: {        \n                prompt: {\n                entry: say(\"What would you like to do?\"),\n                on: { ENDSPEECH: \"ask\" }\n            },\n            hist: {type: \"history\"},\n               maxspeech1: {\n                ...speech(\"You have not responded. What is it you would like to do?\")\n        },  \n            ask: {\n                entry: [listen(), send('MAXSPEECH', {delay: 5000})]\n            }\n        }   \n    }, \n    \n        help1:{\n            ...helpm(\"Please tell me what you want to do.\",\"welcome\")\n        },\n\t\tquery: {\n            invoke: {\n                id: \"rasa\",\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: \"menu\",\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data)]\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n                },\n                onError: {\n                    target: \"welcome\",\n                    actions: (context, event) => console.log(event.data)\n                }\n            }\n        },\n      \n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: \"todo\", cond: (context) => context.option === \"todo\" },\n                    { target: \"timer\", cond: (context) => context.option === \"timer\" },\n                    { target: \"appointment\", cond: (context) => context.option === \"appointment\" }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I understand，you want a ${context.option}.`\n                    })),\n        },\n     /*            nomatch: {\n                    entry: say(\"Sorry, I don\"t understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } */ \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a to do item.`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a timer`\n                    }))\n                }}\n        },\n        \n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create an appointment`\n                    }))\n                }}\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" ,\n                 cond: (context) => !(context.recResult in commands),\n                 actions: cancel(\"maxsp\")},\n                 {target: \"help2\",\n                 cond: (context) => context.recResult in commands}],\n                 MAXSPEECH: [{target:\"who.maxspeech2\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                hist: {type: \"history\"},\n                ask: {\n                    entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n                },\n                maxspeech2: {\n                    ...speech(\"You did not respond. Which person are you meeting with?\")\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know them\"),\n                    on: { ENDSPEECH:  \"prompt\" }\n                \n                }\n             }\n        },\n        help2:{\n            ...helpm(\"Please tell me the name\",\"who\")\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n\t            RECOGNISED: [{\n\t                cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n\t\t            actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n\t\t            target: \"wholeday\"\n\n\t\t        },\t\n\t\t        { target: \".nomatch\" ,\n                cond: (context) => !(context.recResult in commands),\n                actions: cancel(\"maxsp\")},\n                {target: \"help3\",\n                cond: (context) => context.recResult in commands}],\n                MAXSPEECH: [{target:\"day.maxspeech3\",\n                cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t        },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. What day is your meeting on?`\n                    })),\n\t\t            on: { ENDSPEECH: \"ask\" }\n                },\n                hist: {type: \"history\"},\n\t\t        ask: {\n\t\t            entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t            },\n                maxspeech3: {\n                 ...speech(\"You did not respond, state a day\")\n              },\n\t\t        nomatch: {\n\t\t            entry: say(\"Sorry, I don't know which day you are talking about.\"),\n\t\t            on: { ENDSPEECH: \"prompt\" }\n\t            }\t     \n            }\n        },\n        help3:{\n            ...helpm(\"Please tell me the day\",\"day\")\n        },\n        \n\t    wholeday: {\n\t\t        initial: \"prompt\",\n\t\t        on: {\n\t                RECOGNISED: [{\n\t\t\t            cond: (context) => grammar2[context.recResult] === true,\n                        target: \"notime\"},\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\t\ttarget: \"whattime\"\n\n\t\t            },\n\t                { target: \".nomatch\",\n                    cond: (context) => !(context.recResult in commands),\n                    actions: cancel(\"maxsp\")},\n                    {target: \"help4\",\n                    cond: (context) => context.recResult in commands}],\n                    MAXSPEECH: [{target:\"wholeday.maxspeech4\",\n                    cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t\t        },\n\t\t        states: {\n\t\t            prompt: {\n\t\t\t            entry: send((context) => ({\n\t\t\t                type: \"SPEAK\",\n\t\t\t\t\t\t    value: `Good, on ${context.day}. Will it take the whole day?`\n\t\t\t            })),\n\t\t\t            on: { ENDSPEECH: \"ask\" }\n\t\t            },\n                    hist: {type: \"history\"},\n\t\t            ask: {\n\t\t                entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t            },\n                    maxspeech4: {\n                      ...speech(\"You did not respond, make a decision\")\n                    },\n\t\t            nomatch: {\n\t\t\t            entry: say(\"Please repeat it again\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t            }\n\t\t        }\t     \n            },\n            help4:{\n                ...helpm(\"Please tell me the decision\",\"wholeday\")\n            },\n            notime: {\n\t\t           initial: \"prompt\",\n\t               on: {\n\t\t               RECOGNISED: [{ \n\t\t\t               cond: (context) => grammar2[context.recResult] === true,\n\t\t\t               target: \"Finished\"},\n\t\t\t\t\t\t   {\n\t\t\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n                           target: \"who\"\n\t\t\t\t\t\t   \n\t\t                },\n\t\t                { target: \".nomatch\",\n                        cond: (context) => !(context.recResult in commands),\n                        actions: cancel(\"maxsp\")},\n                        {target: \"help5\",\n                        cond: (context) => context.recResult in commands}],\n                        MAXSPEECH: [{target:\"notime.maxspeech5\",\n                        cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}]  \n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t\t                entry: send((context) => ({\n\t\t\t                    type: \"SPEAK\",\n\t\t\t\t\t\t\t\tvalue: `Great. Do you want to me create an appointment with ${context.person} on ${context.day} for the whole day?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n\t\t                },\n                        hist: {type: \"history\"},\n\t\t                ask: {\n\t\t\t                entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t                },\n                        maxspeech5: {\n                             ...speech(\"You did not respond, please confirm.\")},\n\t\t                nomatch: {\n\t\t\t                entry: say(\"Please, repeat it again\"),\n\t\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t                }\n                    }\n\t            },\n                help5:{\n                    ...helpm(\"Please confirm it\",\"notime\")\n                },\n\t\t\t\twhattime: {\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tRECOGNISED: [{\n\t\t\t\t\t\t\tcond: (context) => \"time\" in (grammar[context.recResult] || {}),\n\t\t\t\t\t\t\tactions: assign((context) => { return { time: grammar[context.recResult].time } }),\n\t\t\t\t\t\t\ttarget: \"withtime\"\n\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ target: \".nomatch\" ,\n                        cond: (context) => !(context.recResult in commands),\n                        actions: cancel(\"maxsp\")},\n                        {target: \"help6\",\n                        cond: (context) => context.recResult in commands}],\n                        MAXSPEECH: [{target:\"whattime.maxspeech6\",\n                        cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}]  \n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: { entry: say(\"What time is your meeting\"),\n\t\t\t\t\t\ton: { ENDSPEECH: \"ask\" }\n\t\t\t\t\t},\n                    hist: {type: \"history\"},\n\t\t\t\t\task: {\n\t\t\t\t\t\tentry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t\t\t},\n                maxspeech6: {\n                  ...speech(\"You did not respond, state a time\")\n                },\n\t\t\t\tnomatch: {\n\t\t\t\t\tentry: say(\"Please repeat it again\"),\n\t\t\t\t\ton: { ENDSPEECH: \"prompt\" }\n\t\t\t\t}\n\t\t\t}\n\t\t},\n        help6:{\n            ...helpm(\"Please tell me the time\",\"whattime\")\n        },\n        \n\t\twithtime: {\n\t\t\tinitial: \"prompt\",\n\t\t\ton: {\n\t\t\t\tRECOGNISED: [{ \n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\n\t\t\t\t\ttarget: \"Finished\"},\n\t\t\t\t\t{\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\ttarget: \"who\"\n\n\t\t\t\t },\n\t\t\t\t { target: \".nomatch\",\n                 cond: (context) => !(context.recResult in commands),\n                 actions: cancel(\"maxsp\")},\n                 {target: \"help7\",\n                 cond: (context) => context.recResult in commands}],\n                 MAXSPEECH: [{target:\"withtime.maxspeech7\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t\t\t },\n\t\t\t states: {\n\t\t\t\t prompt: {\n\t\t\t\t\t entry: send((context) => ({\n\t\t\t\t\t\t type: \"SPEAK\",\n\t\t\t\t\t\t value: `Great. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n\t\t\t\t\t })),\n\t\t\t\t\t on: { ENDSPEECH: \"ask\" }\n\t\t\t\t },\n                 hist: {type: \"history\"},\n\t\t\t\t ask: {\n\t\t\t\t\t entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t\t\t },\n                maxspeech7: {\n                 ...speech(\"You did not respond, please confirm\")\n                },        \n\t\t\t\t nomatch: {\n\t\t\t\t\t entry: say(\"Please repeat it again\"),\n\t\t\t\t\t on: { ENDSPEECH: \"prompt\" }\n\t\t\t\t }\n\t\t\t }\n\t\t},\n        help7:{\n            ...helpm(\"Please confirm\",\"withtime\")\n        },\n        \n        Finished: {\n\t\t                 initial: \"prompt\",\n\t\t                 on: { ENDSPEECH: \"init\" },\n\t\t                 states: {\n\t\t\t                 prompt: { entry: say(\"Ok, great! Your appointment has been created!\")\n\t\t                    },\n\t                    }\n\t                }\t    \n                }\n            })\n\n\n\n\n//the api for rasa to use\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\"; // have to set up temporary permission/access for the robot to not give error: \"Unexpected token S in JSON at position 0\"\nconst rasaurl = \"https://intents-oyousuf.herokuapp.com/model/parse\"\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: \"POST\",\n        headers: { \"Origin\": \"http://localhost:3000/react-xstate-colourchanger\" },\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\n\n"]},"metadata":{},"sourceType":"module"}