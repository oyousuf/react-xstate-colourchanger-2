{"ast":null,"code":"import _objectSpread from\"C:/Users/User/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";/*import { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Zhe\": { person: \"Zhe Han\" },\n    \"Siyi\": { person: \"Siyi Gu\" },\n    \"Jae Eun\": { person: \"Jae Eun Hong\" },\n    \"Oreen\": { person: \"Oreen Yousuf\" },\n    \"Angeliki\": { person: \"Angeliki Zagoura\" },\n    \"Flor\": { person: \"Flor Ortiz\" },\n    \"Emma\": { person: \"Emma Wallerö\"},\n\n    \"john\": { person: \"john appleseed\" },\n    \"zhe\": { person: \"zhe han\" },\n    \"siyi\": { person: \"siyi gu\" },\n    \"jae eun\": { person: \"jae eun hong\" },\n    \"oreen\": { person: \"oreen yousuf\" },\n    \"angeliki\": { person: \"angeliki zagoura\" },\n    \"flor\": { person: \"flor ortiz\" },\n    \"emma\": { person: \"emma wallerö\" },\n\n    \"Monday\": { day: \"Monday\" },\n    \"on Monday\": { day: \"Monday\" },\n    \"Tuesday\": { day: \"Tuesday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"Friday\": { day: \"Friday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"Sunday\": { day: \"Sunday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n\n\n    \"at one\": { time: \"01:00\" },\n    \"at two\": { time: \"02:00\" },\n    \"at three\": { time: \"03:00\" },\n    \"at four\": { time: \"04:00\" },\n    \"at five\": { time: \"05:00\" },\n    \"at six\": { time: \"06:00\" },\n    \"at seven\": { time: \"07:00\" },\n    \"at eight\": { time: \"08:00\" },\n    \"at nine\": { time: \"09:00\" },\n    \"at ten\": { time: \"10:00\" },\n    \"at eleven\": { time: \"11:00\" },\n    \"at twelve\": { time: \"12:00\" },\n    \"at thirteen\": { time: \"13:00\" },\n    \"at fourteen\": { time: \"14:00\" },\n    \"at fifteen\": { time: \"15:00\" },\n    \"at sixteen\": { time: \"16:00\" },\n    \"at seventeen\": { time: \"17:00\" },\n    \"at eighteen\": { time: \"18:00\" },\n    \"at nineteen\": { time: \"19:00\" },\n    \"at twenty\": { time: \"20:00\" },\n    \"at twenty one\": { time: \"21:00\" },\n    \"at twenty two\": { time: \"22:00\" },\n    \"at twenty three\": { time: \"23:00\" },\n    \"at twenty four\": { time: \"00:00\" },\n\n    \"one\": { time: \"01:00\" },\n    \"two\": { time: \"02:00\" },\n    \"three\": { time: \"03:00\" },\n    \"four\": { time: \"04:00\" },\n    \"five\": { time: \"05:00\" },\n    \"six\": { time: \"06:00\" },\n    \"seven\": { time: \"07:00\" },\n    \"eight\": { time: \"08:00\" },\n    \"nine\": { time: \"09:00\" },\n    \"ten\": { time: \"10:00\" },\n    \"eleven\": { time: \"11:00\" },\n    \"twelve\": { time: \"12:00\" },\n    \"thirteen\": { time: \"13:00\" },\n    \"fourteen\": { time: \"14:00\" },\n    \"fifteen\": { time: \"15:00\" },\n    \"sixteen\": { time: \"16:00\" },\n    \"seventeen\": { time: \"17:00\" },\n    \"eighteen\": { time: \"18:00\" },\n    \"nineteen\": { time: \"19:00\" },\n    \"twenty\": { time: \"20:00\" },\n    \"twenty one\": { time: \"21:00\" },\n    \"twenty two\": { time: \"22:00\" },\n    \"twenty three\": { time: \"23:00\" },\n    \"twenty four\": { time: \"00:00\" },\n\n    \"at 1\": { time: \"01:00\" },\n    \"at 2\": { time: \"02:00\" },\n    \"at 3\": { time: \"03:00\" },\n    \"at 4\": { time: \"04:00\" },\n    \"at 5\": { time: \"05:00\" },\n    \"at 6\": { time: \"06:00\" },\n    \"at 7\": { time: \"07:00\" },\n    \"at 8\": { time: \"08:00\" },\n    \"at 9\": { time: \"09:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"at 13\": { time: \"13:00\" },\n    \"at 14\": { time: \"14:00\" },\n    \"at 15\": { time: \"15:00\" },\n    \"at 16\": { time: \"16:00\" },\n    \"at 17\": { time: \"17:00\" },\n    \"at 18\": { time: \"18:00\" },\n    \"at 19\": { time: \"19:00\" },\n    \"at 20\": { time: \"20:00\" },\n    \"at 21\": { time: \"21:00\" },\n    \"at 22\": { time: \"22:00\" },\n    \"at 23\": { time: \"23:00\" },\n    \"at 24\": { time: \"00:00\" },\n\n    \"1\": { time: \"01:00\" },\n    \"2\": { time: \"02:00\" },\n    \"3\": { time: \"03:00\" },\n    \"4\": { time: \"04:00\" },\n    \"5\": { time: \"05:00\" },\n    \"6\": { time: \"06:00\" },\n    \"7\": { time: \"07:00\" },\n    \"8\": { time: \"08:00\" },\n    \"9\": { time: \"09:00\" },\n    \"10\": { time: \"10:00\" },\n    \"11\": { time: \"11:00\" },\n    \"12\": { time: \"12:00\" },\n    \"13\": { time: \"13:00\" },\n    \"14\": { time: \"14:00\" },\n    \"15\": { time: \"15:00\" },\n    \"16\": { time: \"16:00\" },\n    \"17\": { time: \"17:00\" },\n    \"18\": { time: \"18:00\" },\n    \"19\": { time: \"19:00\" },\n    \"20\": { time: \"20:00\" },\n    \"21\": { time: \"21:00\" },\n    \"22\": { time: \"22:00\" },\n    \"23\": { time: \"23:00\" },\n    \"24\": { time: \"00:00\" }\n}\n\nconst grammar2 = {\n    \"yes\": true,\n    \"Yes\": true,\n    \"yes of course\": true,\n    \"Yes of course\": true,\n    \"sure\": true,\n    \"Sure\": true,\n    \"absolutely\": true,\n    \"Absolutely\": true,\n    \"perfect\": true,\n    \"Perfect\": true,\n    \"no\": false,\n    \"No\": false,\n    \"no way\": false,\n    \"No way\": false\n}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: \n    {\n        init: \n        {\n            on: \n            {\n                CLICK: 'welcome'\n            }\n        },\n\n        welcome: \n        {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: \n            {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n\n        who: \n        {\n            initial: \"prompt\",\n            on: \n            {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: \n            {\n                prompt: \n                {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: \n                {\n                    entry: listen()\n                },\n                nomatch: \n                {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n\n        day: \n        {\n            initial: \"prompt\",\n            on: \n            {\n\t            RECOGNISED: [{\n\t                cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n\t\t            actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n\t\t            target: \"wholeday\"\n\n\t\t        },\t\n\t\t        { target: \".nomatch\" }]\n\t        },\n            states: \n            {\n                prompt: \n                {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n\t\t            on: { ENDSPEECH: \"ask\" }\n                },\n                ask: \n                {\n\t\t            entry: listen()\n\t            },\n                nomatch: \n                {\n\t\t            entry: say(\"Sorry I don't know which day are you talking about\"),\n\t\t            on: { ENDSPEECH: \"prompt\" }\n\t            }\t     \n            }\n        },\n\n        wholeday: \n        {\n\t\t    initial: \"prompt\",\n\t\t    on: {\n\t            RECOGNISED: [{\n\t\t\t        cond: (context) => grammar2[context.recResult] === true,\n                    target: \"notime\"},\n\t\t\t\t\t{\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\ttarget: \"whattime\"\n\n\t\t        },\n\t            { target: \".nomatch\" }]\n\t\t    },\n            states: \n            {\n                prompt: \n                {\n\t\t\t        entry: send((context) => ({\n\t\t\t            type: \"SPEAK\",\n\t\t\t\t\t\tvalue: `Good.on ${context.day}. Will it take the whole day?`\n\t\t\t        })),\n\t\t\t        on: { ENDSPEECH: \"ask\" }\n\t\t        },\n                ask: \n                {\n\t\t            entry: listen()\n\t\t        },\n                nomatch: \n                {\n\t\t\t        entry: say(\"Please repeat it again\"),\n\t\t            on: { ENDSPEECH: \"prompt\" }\n\t\t        }\n\t\t    }\t     \n        },\n\n        notime: \n        {\n\t\t    initial: \"prompt\",\n            on: \n            {\n                RECOGNISED: \n                [\n                    { \n\t\t\t            cond: (context) => grammar2[context.recResult] === true,\n                        target: \"Finished\"\n                    },\n\n\t\t\t\t\t{\n\t\t\t\t\tcond: (context) => grammar2[\"context.recResult\"] === false,\n                    target: \"who\"\t   \n                    },\n                    \n                    { target: \".nomatch\" }\n                ]\n\n\t\t    },\n            states: \n            {\n                prompt: \n                {\n\t\t\t        entry: send((context) => ({\n\t\t\t            type: \"SPEAK\",\n\t\t\t\t\t\tvalue: `Good. Do you want to me create an appointment with ${context.person} on ${context.day}for the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                \n                ask: \n                {\n\t\t\t        entry: listen()\n                },\n                \n                nomatch: \n                {\n\t\t\t        entry: say(\"Please repeat it again\"),\n\t\t\t        on: { ENDSPEECH: \"prompt\" }\n\t\t        }\n            }\n        },\n        \n        whattime: \n        {\n\t\t\tinitial: \"prompt\",\n            on: \n            {\n                RECOGNISED: \n                [\n                    {\n\t\t\t\t\tcond: (context) => \"time\" in (grammar[context.recResult] || {}),\n\t\t\t\t\tactions: assign((context) => { return { time: grammar[context.recResult].time } }),\n\t\t\t\t\ttarget: \"withtime\"\n                    },\n                            \n                    { target: \".nomatch\" }\n                ]\n            },\n                    \n            states: \n            {\n\t\t\t\tprompt: { entry: say(\"What time is your meeting\"),\n\t\t\t\ton: { ENDSPEECH: \"ask\" }\n            },\n                    \n                    ask: \n                    {\n\t\t\t\t\t\tentry: listen()\n                    },\n                    \n                nomatch: \n                {\n\t\t\t\t\tentry: say(\"Please repeat it again\"),\n\t\t\t\t\ton: { ENDSPEECH: \"prompt\" }\n\t\t\t\t}\n\t\t\t}\n        },\n        \n        withtime: \n        {\n\t\t\tinitial: \"prompt\",\n            on: \n            {\n                RECOGNISED: \n                [\n                    { \n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\n                    target: \"Finished\"\n                    },\n\n\t\t\t\t\t{\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\ttarget: \"who\"\n                    },\n                    \n                    { target: \".nomatch\" }\n                ]\n             },\n             \n             states: \n             {\n                 prompt: \n                 {\n\t\t\t\t\t entry: send((context) => ({\n\t\t\t\t\t\t type: \"SPEAK\",\n\t\t\t\t\t\t value: `Good. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n\t\t\t\t\t })),\n\t\t\t\t\t on: { ENDSPEECH: \"ask\" }\n                 },\n                 \n                 ask: \n                 {\n\t\t\t\t\t entry: listen()\n                 },\n                 \n                 nomatch: \n                 {\n\t\t\t\t\t entry: say(\"Please repeat it again\"),\n\t\t\t\t\t on: { ENDSPEECH: \"prompt\" }\n\t\t\t\t }\n\t\t\t }\n        },\n        \n        Finished: \n        {\n\t\t    initial: \"prompt\",\n\t\t    on: { ENDSPEECH: \"init\" },\n            states: \n            {\n                prompt: \n                { \n                    entry: say(\"Your appointment has been created!\")\n\t\t        },\n\t        }\n\t    }\t    \n    }\n})*/import{send,assign}from\"xstate\";import\"./styles.scss\";function say(text){return send(_context=>({type:\"SPEAK\",value:text}));}function listen(){return send('LISTEN');}const grammar={\"John\":{person:\"John Appleseed\"},\"Mary\":{person:\"Mary Curie\"},\"George\":{person:\"George Smith\"},\"Axel\":{person:\"Axel Rose\"},\"Sebastian\":{person:\"Sebastian Bach\"},\"Jae Eun\":{person:\"Jae Eun Hong\"},\"on Monday\":{day:\"Monday\"},\"on Tuesday\":{day:\"Tuesday\"},\"on Wednesday\":{day:\"Wednesday\"},\"on Thursday\":{day:\"Thursday\"},\"on Friday\":{day:\"Friday\"},\"on Saturday\":{day:\"Saturday\"},\"on Sunday\":{day:\"Sunday\"},\"at 5\":{time:\"5:00\"},\"at 6\":{time:\"6:00\"},\"at 7\":{time:\"7:00\"},\"at 8\":{time:\"8:00\"},\"at 9\":{time:\"9:00\"},\"at 10\":{time:\"10:00\"},\"at 11\":{time:\"11:00\"},\"at 12\":{time:\"12:00\"}};const grammar2={\"yes of course\":true,\"sure\":true,\"absolutely\":true,\"yes\":true,\"no way\":false,\"no\":false};let a=grammar2[\"yes\"];let b=grammar2[\"no\"];function promptAndAsk(prompt){return{initial:'prompt',states:{prompt:{entry:say(prompt),on:{ENDSPEECH:'ask'}},ask:{entry:send('LISTEN')}}};}export const dmMachine={initial:'init',states:{init:{on:{CLICK:'welcome'}},welcome:_objectSpread({on:{RECOGNISED:{target:\"query\",actions:assign(context=>{return{option:context.recResult};})}}},promptAndAsk(\"What would you like to do? Your options are appointment, to do item or timer\")),query:{invoke:{id:'rasa',src:(context,event)=>nluRequest(context.option),onDone:{target:'menu',actions:[assign((context,event)=>{return{option:event.data.intent.name};}),(context,event)=>console.log(event.data)]//actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n},onError:{target:'welcome',actions:(context,event)=>console.log(event.data)}}},menu:{initial:\"prompt\",on:{ENDSPEECH:[{target:'todo',cond:context=>context.option==='todo'},{target:'timer',cond:context=>context.option==='timer'},{target:'appointment',cond:context=>context.option==='appointment'}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"OK. I understand.\"}))}/*            nomatch: {\n                    entry: say(\"Sorry, I don't understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } */}},todo:{initial:\"prompt\",on:{ENDSPEECH:\"init\"},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Let's create a to do item\"}))}}},timer:{initial:\"prompt\",on:{ENDSPEECH:\"init\"},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Let's create a timer\"}))}}},appointment:{initial:\"prompt\",on:{ENDSPEECH:\"who\"},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Let's create an appointment\"}))}}},who:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"person\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{person:grammar[context.recResult].person};}),target:\"day\"},{target:\".nomatch\"}]},states:{prompt:{entry:say(\"Who are you meeting with?\"),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry I don't know them\"),on:{ENDSPEECH:\"prompt\"}}}},day:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"day\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{day:grammar[context.recResult].day};}),target:\"wholeday\"},{target:\".nomatch\"}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"OK. \".concat(context.person,\". On which day is your meeting?\")})),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry I didn't understand\"),on:{ENDSPEECH:\"prompt\"}}}},wholeday:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>grammar2[context.recResult]===b,target:\"time\"},{cond:context=>grammar2[context.recResult]===a,target:\"confirm_meeting_whole_day\"},{target:\".nomatch\"}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"OK. \".concat(context.person,\" on \").concat(context.day,\". Will it take the whole day?\")})),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry, I don't understand\"),on:{ENDSPEECH:\"prompt\"}}}},time:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"time\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{time:grammar[context.recResult].time};}),target:\"confirm_time\"},{target:\".nomatch\"}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"OK. \".concat(context.day,\". What time is your meeting?\")})),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry I don't know that\"),on:{ENDSPEECH:\"prompt\"}}}},confirm_meeting_whole_day:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>grammar2[context.recResult]===b,target:\"init\"},{cond:context=>grammar2[context.recResult]===a,target:\"confirmed\"},{target:\".nomatch\"}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Do you want to create an appointment with \".concat(context.person,\" on \").concat(context.day,\" for the whole day?\")})),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry, I don't understand\"),on:{ENDSPEECH:\"prompt\"}}}},confirm_time:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>grammar2[context.recResult]===b,target:\"who\"},{cond:context=>grammar2[context.recResult]===a,target:\"confirmed\"},{target:\".nomatch\"}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Do you want to create an appointment with \".concat(context.person,\" on \").concat(context.day,\" at \").concat(context.time,\"?\")})),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry, I don't understand\"),on:{ENDSPEECH:\"prompt\"}}}},confirmed:{initial:\"prompt\",on:{ENDSPEECH:\"init\"},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Your appointment has been created!\"}))}}}}};/* RASA API\n *  */const proxyurl=\"https://cors-anywhere.herokuapp.com/\";const rasaurl='https://irenetsk.herokuapp.com/model/parse';const nluRequest=text=>fetch(new Request(proxyurl+rasaurl,{method:'POST',headers:{'Origin':'http://localhost:3000/react-xstate-colourchanger'},// only required with proxy\nbody:\"{\\\"text\\\": \\\"\".concat(text,\"\\\"}\")})).then(data=>data.json());","map":{"version":3,"sources":["C:/Users/User/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","say","text","_context","type","value","listen","grammar","person","day","time","grammar2","a","b","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","dmMachine","init","CLICK","welcome","RECOGNISED","target","actions","context","option","recResult","query","invoke","id","src","event","nluRequest","onDone","data","intent","name","console","log","onError","menu","cond","todo","timer","appointment","who","nomatch","wholeday","confirm_meeting_whole_day","confirm_time","confirmed","proxyurl","rasaurl","fetch","Request","method","headers","body","then","json"],"mappingsiCA,IAAjC,CAA+CC,MAA/C,KAA6D,QAA7D,CACA,MAAO,eAAP,CAGA,QAASC,CAAAA,GAAT,CAAaC,IAAb,CAAyD,CACrD,MAAOH,CAAAA,IAAI,CAAEI,QAAD,GAA2B,CAAEC,IAAI,CAAE,OAAR,CAAiBC,KAAK,CAAEH,IAAxB,CAA3B,CAAD,CAAX,CACH,CAED,QAASI,CAAAA,MAAT,EAAgD,CAC5C,MAAOP,CAAAA,IAAI,CAAC,QAAD,CAAX,CACH,CAED,KAAMQ,CAAAA,OACL,CAAG,CACA,OAAQ,CAAEC,MAAM,CAAE,gBAAV,CADR,CAEA,OAAQ,CAAEA,MAAM,CAAE,YAAV,CAFR,CAGA,SAAU,CAAEA,MAAM,CAAE,cAAV,CAHV,CAIA,OAAQ,CAAEA,MAAM,CAAE,WAAV,CAJR,CAKA,YAAa,CAAEA,MAAM,CAAE,gBAAV,CALb,CAMA,UAAW,CAAEA,MAAM,CAAE,cAAV,CANX,CAQA,YAAa,CAAEC,GAAG,CAAE,QAAP,CARb,CASA,aAAc,CAAEA,GAAG,CAAE,SAAP,CATd,CAUA,eAAgB,CAAEA,GAAG,CAAE,WAAP,CAVhB,CAWA,cAAe,CAAEA,GAAG,CAAE,UAAP,CAXf,CAYA,YAAa,CAAEA,GAAG,CAAE,QAAP,CAZb,CAaH,cAAe,CAAEA,GAAG,CAAE,UAAP,CAbZ,CAcH,YAAa,CAAEA,GAAG,CAAE,QAAP,CAdV,CAgBH,OAAQ,CAAEC,IAAI,CAAE,MAAR,CAhBL,CAiBH,OAAQ,CAAEA,IAAI,CAAE,MAAR,CAjBL,CAkBA,OAAQ,CAAEA,IAAI,CAAE,MAAR,CAlBR,CAmBA,OAAQ,CAAEA,IAAI,CAAE,MAAR,CAnBR,CAoBA,OAAQ,CAAEA,IAAI,CAAE,MAAR,CApBR,CAqBA,QAAS,CAAEA,IAAI,CAAE,OAAR,CArBT,CAsBA,QAAS,CAAEA,IAAI,CAAE,OAAR,CAtBT,CAuBA,QAAS,CAAEA,IAAI,CAAE,OAAR,CAvBT,CADJ,CA2BA,KAAMC,CAAAA,QAAsC,CAAG,CAC3C,gBAAiB,IAD0B,CAE3C,OAAQ,IAFmC,CAG3C,aAAc,IAH6B,CAI3C,MAAO,IAJoC,CAK3C,SAAU,KALiC,CAM3C,KAAM,KANqC,CAA/C,CASA,GAAIC,CAAAA,CAAC,CAAGD,QAAQ,CAAC,KAAD,CAAhB,CACA,GAAIE,CAAAA,CAAC,CAAGF,QAAQ,CAAC,IAAD,CAAhB,CAEA,QAASG,CAAAA,YAAT,CAAsBC,MAAtB,CAAgF,CAC5E,MAAQ,CACJC,OAAO,CAAE,QADL,CAEJC,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAEjB,GAAG,CAACc,MAAD,CADN,CAEJI,EAAE,CAAE,CAAEC,SAAS,CAAE,KAAb,CAFA,CADJ,CAKJC,GAAG,CAAE,CACDH,KAAK,CAAEnB,IAAI,CAAC,QAAD,CADV,CALD,CAFJ,CAAR,CAWH,CAGD,MAAO,MAAMuB,CAAAA,SAAmD,CAAI,CAEhEN,OAAO,CAAE,MAFuD,CAGhEC,MAAM,CAAE,CACJM,IAAI,CAAE,CACFJ,EAAE,CAAE,CACAK,KAAK,CAAE,SADP,CADF,CADF,CAOJC,OAAO,gBACHN,EAAE,CAAE,CACAO,UAAU,CAAE,CACRC,MAAM,CAAE,OADA,CAERC,OAAO,CAAE5B,MAAM,CAAE6B,OAAD,EAAa,CAAE,MAAO,CAAEC,MAAM,CAAED,OAAO,CAACE,SAAlB,CAAP,CAAsC,CAAtD,CAFP,CADZ,CADD,EAOQjB,YAAY,CAAC,8EAAD,CAPpB,CAPH,CAkBJkB,KAAK,CAAE,CACHC,MAAM,CAAE,CACJC,EAAE,CAAE,MADA,CAEJC,GAAG,CAAE,CAACN,OAAD,CAAUO,KAAV,GAAoBC,UAAU,CAACR,OAAO,CAACC,MAAT,CAF/B,CAGJQ,MAAM,CAAE,CACJX,MAAM,CAAE,MADJ,CAEJC,OAAO,CAAE,CAAC5B,MAAM,CAAC,CAAC6B,OAAD,CAAUO,KAAV,GAAoB,CAAE,MAAQ,CAACN,MAAM,CAAEM,KAAK,CAACG,IAAN,CAAWC,MAAX,CAAkBC,IAA3B,CAAR,CAA0C,CAAjE,CAAP,CACT,CAACZ,OAAD,CAAsBO,KAAtB,GAAqCM,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACG,IAAlB,CAD5B,CAET;AAJI,CAHJ,CAUJK,OAAO,CAAE,CACLjB,MAAM,CAAE,SADH,CAELC,OAAO,CAAE,CAACC,OAAD,CAAUO,KAAV,GAAoBM,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACG,IAAlB,CAFxB,CAVL,CADL,CAlBH,CAoCJM,IAAI,CAAE,CACF7B,OAAO,CAAE,QADP,CAEFG,EAAE,CAAE,CACAC,SAAS,CAAE,CACP,CAAEO,MAAM,CAAE,MAAV,CAAkBmB,IAAI,CAAGjB,OAAD,EAAaA,OAAO,CAACC,MAAR,GAAmB,MAAxD,CADO,CAEP,CAAEH,MAAM,CAAE,OAAV,CAAmBmB,IAAI,CAAGjB,OAAD,EAAaA,OAAO,CAACC,MAAR,GAAmB,OAAzD,CAFO,CAGP,CAAEH,MAAM,CAAE,aAAV,CAAyBmB,IAAI,CAAGjB,OAAD,EAAaA,OAAO,CAACC,MAAR,GAAmB,aAA/D,CAHO,CADX,CAFF,CASFb,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAEnB,IAAI,CAAE8B,OAAD,GAAc,CACtBzB,IAAI,CAAE,OADgB,CAEtBC,KAAK,oBAFiB,CAAd,CAAD,CADP,CAMnB;AACL;AACA;AACA,YAVoB,CATN,CApCF,CA4DJ0C,IAAI,CAAE,CACF/B,OAAO,CAAE,QADP,CAEFG,EAAE,CAAE,CAAEC,SAAS,CAAE,MAAb,CAFF,CAGFH,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAEnB,IAAI,CAAE8B,OAAD,GAAc,CACtBzB,IAAI,CAAE,OADgB,CAEtBC,KAAK,4BAFiB,CAAd,CAAD,CADP,CADJ,CAHN,CA5DF,CAwEJ2C,KAAK,CAAE,CACHhC,OAAO,CAAE,QADN,CAEHG,EAAE,CAAE,CAAEC,SAAS,CAAE,MAAb,CAFD,CAGHH,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAEnB,IAAI,CAAE8B,OAAD,GAAc,CACtBzB,IAAI,CAAE,OADgB,CAEtBC,KAAK,uBAFiB,CAAd,CAAD,CADP,CADJ,CAHL,CAxEH,CAqFJ4C,WAAW,CAAE,CACTjC,OAAO,CAAE,QADA,CAETG,EAAE,CAAE,CAAEC,SAAS,CAAE,KAAb,CAFK,CAGTH,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAEnB,IAAI,CAAE8B,OAAD,GAAc,CACtBzB,IAAI,CAAE,OADgB,CAEtBC,KAAK,8BAFiB,CAAd,CAAD,CADP,CADJ,CAHC,CArFT,CAgGJ6C,GAAG,CAAE,CACDlC,OAAO,CAAE,QADR,CAEDG,EAAE,CAAE,CACAO,UAAU,CAAE,CAAC,CACxBoB,IAAI,CAAGjB,OAAD,EAAa,WAAatB,OAAO,CAACsB,OAAO,CAACE,SAAT,CAAP,EAA8B,EAA3C,CADK,CAETH,OAAO,CAAE5B,MAAM,CAAE6B,OAAD,EAAa,CAAE,MAAO,CAAErB,MAAM,CAAED,OAAO,CAACsB,OAAO,CAACE,SAAT,CAAP,CAA2BvB,MAArC,CAAP,CAAsD,CAAtE,CAFN,CAGTmB,MAAM,CAAE,KAHC,CAAD,CAMZ,CAAEA,MAAM,CAAE,UAAV,CANY,CADZ,CAFH,CAWDV,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAEjB,GAAG,CAAC,2BAAD,CADN,CAEJkB,EAAE,CAAE,CAAEC,SAAS,CAAE,KAAb,CAFA,CADJ,CAKJC,GAAG,CAAE,CACDH,KAAK,CAAEZ,MAAM,EADZ,CALD,CAQJ6C,OAAO,CAAE,CACLjC,KAAK,CAAEjB,GAAG,CAAC,yBAAD,CADL,CAELkB,EAAE,CAAE,CAAEC,SAAS,CAAE,QAAb,CAFC,CARL,CAXP,CAhGD,CAyHJX,GAAG,CAAE,CACDO,OAAO,CAAE,QADR,CAEDG,EAAE,CAAE,CACAO,UAAU,CAAE,CAAC,CACToB,IAAI,CAAGjB,OAAD,EAAa,QAAUtB,OAAO,CAACsB,OAAO,CAACE,SAAT,CAAP,EAA8B,EAAxC,CADV,CAETH,OAAO,CAAE5B,MAAM,CAAE6B,OAAD,EAAa,CAAE,MAAO,CAAEpB,GAAG,CAAEF,OAAO,CAACsB,OAAO,CAACE,SAAT,CAAP,CAA2BtB,GAAlC,CAAP,CAAgD,CAAhE,CAFN,CAGTkB,MAAM,CAAE,UAHC,CAAD,CAKZ,CAAEA,MAAM,CAAE,UAAV,CALY,CADZ,CAFH,CAUDV,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAEnB,IAAI,CAAE8B,OAAD,GAAc,CACtBzB,IAAI,CAAE,OADgB,CAEtBC,KAAK,eAASwB,OAAO,CAACrB,MAAjB,mCAFiB,CAAd,CAAD,CADP,CAKJW,EAAE,CAAE,CAAEC,SAAS,CAAE,KAAb,CALA,CADJ,CAQJC,GAAG,CAAE,CACDH,KAAK,CAAEZ,MAAM,EADZ,CARD,CAWJ6C,OAAO,CAAE,CACLjC,KAAK,CAAEjB,GAAG,CAAC,2BAAD,CADL,CAELkB,EAAE,CAAE,CAAEC,SAAS,CAAE,QAAb,CAFC,CAXL,CAVP,CAzHD,CAoJJgC,QAAQ,CAAE,CACNpC,OAAO,CAAE,QADH,CAENG,EAAE,CAAE,CACAO,UAAU,CAAE,CAAC,CAACoB,IAAI,CAAGjB,OAAD,EAAclB,QAAQ,CAACkB,OAAO,CAACE,SAAT,CAAR,GAAgClB,CAArD,CACTc,MAAM,CAAE,MADC,CAAD,CAG1B,CAACmB,IAAI,CAAGjB,OAAD,EAAclB,QAAQ,CAACkB,OAAO,CAACE,SAAT,CAAR,GAAgCnB,CAArD,CACAe,MAAM,CAAE,2BADR,CAH0B,CAMZ,CAAEA,MAAM,CAAE,UAAV,CANY,CADZ,CAFE,CAWNV,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAEnB,IAAI,CAAE8B,OAAD,GAAc,CACtBzB,IAAI,CAAE,OADgB,CAEtBC,KAAK,eAASwB,OAAO,CAACrB,MAAjB,gBAA8BqB,OAAO,CAACpB,GAAtC,iCAFiB,CAAd,CAAD,CADP,CAKlBU,EAAE,CAAE,CAAEC,SAAS,CAAE,KAAb,CALc,CADJ,CAQlBC,GAAG,CAAE,CACAH,KAAK,CAAEZ,MAAM,EADb,CARa,CAWf6C,OAAO,CAAE,CACRjC,KAAK,CAAEjB,GAAG,CAAC,2BAAD,CADF,CAEZkB,EAAE,CAAE,CAAEC,SAAS,CAAE,QAAb,CAFQ,CAXM,CAXF,CApJN,CAgLJV,IAAI,CAAE,CACFM,OAAO,CAAE,QADP,CAEFG,EAAE,CAAE,CACAO,UAAU,CAAE,CAAC,CACToB,IAAI,CAAGjB,OAAD,EAAa,SAAWtB,OAAO,CAACsB,OAAO,CAACE,SAAT,CAAP,EAA8B,EAAzC,CADV,CAETH,OAAO,CAAE5B,MAAM,CAAE6B,OAAD,EAAa,CAAE,MAAO,CAAEnB,IAAI,CAAEH,OAAO,CAACsB,OAAO,CAACE,SAAT,CAAP,CAA2BrB,IAAnC,CAAP,CAAkD,CAAlE,CAFN,CAGTiB,MAAM,CAAE,cAHC,CAAD,CAMZ,CAAEA,MAAM,CAAE,UAAV,CANY,CADZ,CAFF,CAWFV,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAEnB,IAAI,CAAE8B,OAAD,GAAc,CACtBzB,IAAI,CAAE,OADgB,CAEtBC,KAAK,eAASwB,OAAO,CAACpB,GAAjB,gCAFiB,CAAd,CAAD,CADP,CAMZU,EAAE,CAAE,CAAEC,SAAS,CAAE,KAAb,CANQ,CADJ,CASZC,GAAG,CAAE,CACDH,KAAK,CAAEZ,MAAM,EADZ,CATO,CAYZ6C,OAAO,CAAE,CACLjC,KAAK,CAAEjB,GAAG,CAAC,yBAAD,CADL,CAETkB,EAAE,CAAE,CAAEC,SAAS,CAAE,QAAb,CAFK,CAZG,CAXN,CAhLF,CA6MJiC,yBAAyB,CAAE,CACvBrC,OAAO,CAAE,QADc,CAEvBG,EAAE,CAAE,CACAO,UAAU,CAAE,CAAC,CAACoB,IAAI,CAAGjB,OAAD,EAAclB,QAAQ,CAACkB,OAAO,CAACE,SAAT,CAAR,GAAgClB,CAArD,CACTc,MAAM,CAAE,MADC,CAAD,CAG1B,CAACmB,IAAI,CAAGjB,OAAD,EAAclB,QAAQ,CAACkB,OAAO,CAACE,SAAT,CAAR,GAAgCnB,CAArD,CACAe,MAAM,CAAE,WADR,CAH0B,CAMZ,CAAEA,MAAM,CAAE,UAAV,CANY,CADZ,CAFmB,CAYvBV,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAEnB,IAAI,CAAE8B,OAAD,GAAc,CACtBzB,IAAI,CAAE,OADgB,CAEtBC,KAAK,qDAA+CwB,OAAO,CAACrB,MAAvD,gBAAoEqB,OAAO,CAACpB,GAA5E,uBAFiB,CAAd,CAAD,CADP,CAKlBU,EAAE,CAAE,CAAEC,SAAS,CAAE,KAAb,CALc,CADJ,CAQlBC,GAAG,CAAE,CACAH,KAAK,CAAEZ,MAAM,EADb,CARa,CAWf6C,OAAO,CAAE,CACRjC,KAAK,CAAEjB,GAAG,CAAC,2BAAD,CADF,CAEZkB,EAAE,CAAE,CAAEC,SAAS,CAAE,QAAb,CAFQ,CAXM,CAZe,CA7MvB,CA2ORkC,YAAY,CAAE,CACVtC,OAAO,CAAE,QADC,CAEVG,EAAE,CAAG,CACDO,UAAU,CAAE,CAAC,CAACoB,IAAI,CAAGjB,OAAD,EAAclB,QAAQ,CAACkB,OAAO,CAACE,SAAT,CAAR,GAAgClB,CAArD,CACTc,MAAM,CAAE,KADC,CAAD,CAGpB,CAACmB,IAAI,CAAGjB,OAAD,EAAclB,QAAQ,CAACkB,OAAO,CAACE,SAAT,CAAR,GAAgCnB,CAArD,CACAe,MAAM,CAAE,WADR,CAHoB,CAMZ,CAAEA,MAAM,CAAE,UAAV,CANY,CADX,CAFK,CAWVV,MAAM,CAAE,CACJF,MAAM,CAAE,CACLG,KAAK,CAAEnB,IAAI,CAAE8B,OAAD,GAAc,CACrBzB,IAAI,CAAE,OADe,CAErBC,KAAK,qDAA+CwB,OAAO,CAACrB,MAAvD,gBAAoEqB,OAAO,CAACpB,GAA5E,gBAAsFoB,OAAO,CAACnB,IAA9F,KAFgB,CAAd,CAAD,CADN,CAKZS,EAAE,CAAE,CAAEC,SAAS,CAAE,KAAb,CALQ,CADJ,CAQZC,GAAG,CAAE,CACAH,KAAK,CAAEZ,MAAM,EADb,CARO,CAWZ6C,OAAO,CAAE,CACLjC,KAAK,CAAEjB,GAAG,CAAC,2BAAD,CADL,CAETkB,EAAE,CAAE,CAAEC,SAAS,CAAE,QAAb,CAFK,CAXG,CAXE,CA3ON,CAuQRmC,SAAS,CAAE,CACPvC,OAAO,CAAE,QADF,CAEPG,EAAE,CAAE,CAAEC,SAAS,CAAE,MAAb,CAFG,CAGPH,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAEnB,IAAI,CAAE8B,OAAD,GAAc,CACtBzB,IAAI,CAAE,OADgB,CAEtBC,KAAK,qCAFiB,CAAd,CAAD,CADP,CADJ,CAHD,CAvQH,CAHwD,CAA7D,CA2RP;AACA,MACA,KAAMmD,CAAAA,QAAQ,CAAG,sCAAjB,CACA,KAAMC,CAAAA,OAAO,CAAG,4CAAhB,CACA,KAAMpB,CAAAA,UAAU,CAAInC,IAAD,EACfwD,KAAK,CAAC,GAAIC,CAAAA,OAAJ,CAAYH,QAAQ,CAAGC,OAAvB,CAAgC,CAClCG,MAAM,CAAE,MAD0B,CAElCC,OAAO,CAAE,CAAE,SAAU,kDAAZ,CAFyB,CAEyC;AAC3EC,IAAI,wBAAe5D,IAAf,OAH8B,CAAhC,CAAD,CAAL,CAKK6D,IALL,CAKUxB,IAAI,EAAIA,IAAI,CAACyB,IAAL,EALlB,CADJ","sourcesContent":["/*import { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Zhe\": { person: \"Zhe Han\" },\n    \"Siyi\": { person: \"Siyi Gu\" },\n    \"Jae Eun\": { person: \"Jae Eun Hong\" },\n    \"Oreen\": { person: \"Oreen Yousuf\" },\n    \"Angeliki\": { person: \"Angeliki Zagoura\" },\n    \"Flor\": { person: \"Flor Ortiz\" },\n    \"Emma\": { person: \"Emma Wallerö\"},\n\n    \"john\": { person: \"john appleseed\" },\n    \"zhe\": { person: \"zhe han\" },\n    \"siyi\": { person: \"siyi gu\" },\n    \"jae eun\": { person: \"jae eun hong\" },\n    \"oreen\": { person: \"oreen yousuf\" },\n    \"angeliki\": { person: \"angeliki zagoura\" },\n    \"flor\": { person: \"flor ortiz\" },\n    \"emma\": { person: \"emma wallerö\" },\n\n    \"Monday\": { day: \"Monday\" },\n    \"on Monday\": { day: \"Monday\" },\n    \"Tuesday\": { day: \"Tuesday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"Friday\": { day: \"Friday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"Sunday\": { day: \"Sunday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n\n\n    \"at one\": { time: \"01:00\" },\n    \"at two\": { time: \"02:00\" },\n    \"at three\": { time: \"03:00\" },\n    \"at four\": { time: \"04:00\" },\n    \"at five\": { time: \"05:00\" },\n    \"at six\": { time: \"06:00\" },\n    \"at seven\": { time: \"07:00\" },\n    \"at eight\": { time: \"08:00\" },\n    \"at nine\": { time: \"09:00\" },\n    \"at ten\": { time: \"10:00\" },\n    \"at eleven\": { time: \"11:00\" },\n    \"at twelve\": { time: \"12:00\" },\n    \"at thirteen\": { time: \"13:00\" },\n    \"at fourteen\": { time: \"14:00\" },\n    \"at fifteen\": { time: \"15:00\" },\n    \"at sixteen\": { time: \"16:00\" },\n    \"at seventeen\": { time: \"17:00\" },\n    \"at eighteen\": { time: \"18:00\" },\n    \"at nineteen\": { time: \"19:00\" },\n    \"at twenty\": { time: \"20:00\" },\n    \"at twenty one\": { time: \"21:00\" },\n    \"at twenty two\": { time: \"22:00\" },\n    \"at twenty three\": { time: \"23:00\" },\n    \"at twenty four\": { time: \"00:00\" },\n\n    \"one\": { time: \"01:00\" },\n    \"two\": { time: \"02:00\" },\n    \"three\": { time: \"03:00\" },\n    \"four\": { time: \"04:00\" },\n    \"five\": { time: \"05:00\" },\n    \"six\": { time: \"06:00\" },\n    \"seven\": { time: \"07:00\" },\n    \"eight\": { time: \"08:00\" },\n    \"nine\": { time: \"09:00\" },\n    \"ten\": { time: \"10:00\" },\n    \"eleven\": { time: \"11:00\" },\n    \"twelve\": { time: \"12:00\" },\n    \"thirteen\": { time: \"13:00\" },\n    \"fourteen\": { time: \"14:00\" },\n    \"fifteen\": { time: \"15:00\" },\n    \"sixteen\": { time: \"16:00\" },\n    \"seventeen\": { time: \"17:00\" },\n    \"eighteen\": { time: \"18:00\" },\n    \"nineteen\": { time: \"19:00\" },\n    \"twenty\": { time: \"20:00\" },\n    \"twenty one\": { time: \"21:00\" },\n    \"twenty two\": { time: \"22:00\" },\n    \"twenty three\": { time: \"23:00\" },\n    \"twenty four\": { time: \"00:00\" },\n\n    \"at 1\": { time: \"01:00\" },\n    \"at 2\": { time: \"02:00\" },\n    \"at 3\": { time: \"03:00\" },\n    \"at 4\": { time: \"04:00\" },\n    \"at 5\": { time: \"05:00\" },\n    \"at 6\": { time: \"06:00\" },\n    \"at 7\": { time: \"07:00\" },\n    \"at 8\": { time: \"08:00\" },\n    \"at 9\": { time: \"09:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"at 13\": { time: \"13:00\" },\n    \"at 14\": { time: \"14:00\" },\n    \"at 15\": { time: \"15:00\" },\n    \"at 16\": { time: \"16:00\" },\n    \"at 17\": { time: \"17:00\" },\n    \"at 18\": { time: \"18:00\" },\n    \"at 19\": { time: \"19:00\" },\n    \"at 20\": { time: \"20:00\" },\n    \"at 21\": { time: \"21:00\" },\n    \"at 22\": { time: \"22:00\" },\n    \"at 23\": { time: \"23:00\" },\n    \"at 24\": { time: \"00:00\" },\n\n    \"1\": { time: \"01:00\" },\n    \"2\": { time: \"02:00\" },\n    \"3\": { time: \"03:00\" },\n    \"4\": { time: \"04:00\" },\n    \"5\": { time: \"05:00\" },\n    \"6\": { time: \"06:00\" },\n    \"7\": { time: \"07:00\" },\n    \"8\": { time: \"08:00\" },\n    \"9\": { time: \"09:00\" },\n    \"10\": { time: \"10:00\" },\n    \"11\": { time: \"11:00\" },\n    \"12\": { time: \"12:00\" },\n    \"13\": { time: \"13:00\" },\n    \"14\": { time: \"14:00\" },\n    \"15\": { time: \"15:00\" },\n    \"16\": { time: \"16:00\" },\n    \"17\": { time: \"17:00\" },\n    \"18\": { time: \"18:00\" },\n    \"19\": { time: \"19:00\" },\n    \"20\": { time: \"20:00\" },\n    \"21\": { time: \"21:00\" },\n    \"22\": { time: \"22:00\" },\n    \"23\": { time: \"23:00\" },\n    \"24\": { time: \"00:00\" }\n}\n\nconst grammar2 = {\n    \"yes\": true,\n    \"Yes\": true,\n    \"yes of course\": true,\n    \"Yes of course\": true,\n    \"sure\": true,\n    \"Sure\": true,\n    \"absolutely\": true,\n    \"Absolutely\": true,\n    \"perfect\": true,\n    \"Perfect\": true,\n    \"no\": false,\n    \"No\": false,\n    \"no way\": false,\n    \"No way\": false\n}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: \n    {\n        init: \n        {\n            on: \n            {\n                CLICK: 'welcome'\n            }\n        },\n\n        welcome: \n        {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: \n            {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n\n        who: \n        {\n            initial: \"prompt\",\n            on: \n            {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: \n            {\n                prompt: \n                {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: \n                {\n                    entry: listen()\n                },\n                nomatch: \n                {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n\n        day: \n        {\n            initial: \"prompt\",\n            on: \n            {\n\t            RECOGNISED: [{\n\t                cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n\t\t            actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n\t\t            target: \"wholeday\"\n\n\t\t        },\t\n\t\t        { target: \".nomatch\" }]\n\t        },\n            states: \n            {\n                prompt: \n                {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n\t\t            on: { ENDSPEECH: \"ask\" }\n                },\n                ask: \n                {\n\t\t            entry: listen()\n\t            },\n                nomatch: \n                {\n\t\t            entry: say(\"Sorry I don't know which day are you talking about\"),\n\t\t            on: { ENDSPEECH: \"prompt\" }\n\t            }\t     \n            }\n        },\n\n        wholeday: \n        {\n\t\t    initial: \"prompt\",\n\t\t    on: {\n\t            RECOGNISED: [{\n\t\t\t        cond: (context) => grammar2[context.recResult] === true,\n                    target: \"notime\"},\n\t\t\t\t\t{\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\ttarget: \"whattime\"\n\n\t\t        },\n\t            { target: \".nomatch\" }]\n\t\t    },\n            states: \n            {\n                prompt: \n                {\n\t\t\t        entry: send((context) => ({\n\t\t\t            type: \"SPEAK\",\n\t\t\t\t\t\tvalue: `Good.on ${context.day}. Will it take the whole day?`\n\t\t\t        })),\n\t\t\t        on: { ENDSPEECH: \"ask\" }\n\t\t        },\n                ask: \n                {\n\t\t            entry: listen()\n\t\t        },\n                nomatch: \n                {\n\t\t\t        entry: say(\"Please repeat it again\"),\n\t\t            on: { ENDSPEECH: \"prompt\" }\n\t\t        }\n\t\t    }\t     \n        },\n\n        notime: \n        {\n\t\t    initial: \"prompt\",\n            on: \n            {\n                RECOGNISED: \n                [\n                    { \n\t\t\t            cond: (context) => grammar2[context.recResult] === true,\n                        target: \"Finished\"\n                    },\n\n\t\t\t\t\t{\n\t\t\t\t\tcond: (context) => grammar2[\"context.recResult\"] === false,\n                    target: \"who\"\t   \n                    },\n                    \n                    { target: \".nomatch\" }\n                ]\n\n\t\t    },\n            states: \n            {\n                prompt: \n                {\n\t\t\t        entry: send((context) => ({\n\t\t\t            type: \"SPEAK\",\n\t\t\t\t\t\tvalue: `Good. Do you want to me create an appointment with ${context.person} on ${context.day}for the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                \n                ask: \n                {\n\t\t\t        entry: listen()\n                },\n                \n                nomatch: \n                {\n\t\t\t        entry: say(\"Please repeat it again\"),\n\t\t\t        on: { ENDSPEECH: \"prompt\" }\n\t\t        }\n            }\n        },\n        \n        whattime: \n        {\n\t\t\tinitial: \"prompt\",\n            on: \n            {\n                RECOGNISED: \n                [\n                    {\n\t\t\t\t\tcond: (context) => \"time\" in (grammar[context.recResult] || {}),\n\t\t\t\t\tactions: assign((context) => { return { time: grammar[context.recResult].time } }),\n\t\t\t\t\ttarget: \"withtime\"\n                    },\n                            \n                    { target: \".nomatch\" }\n                ]\n            },\n                    \n            states: \n            {\n\t\t\t\tprompt: { entry: say(\"What time is your meeting\"),\n\t\t\t\ton: { ENDSPEECH: \"ask\" }\n            },\n                    \n                    ask: \n                    {\n\t\t\t\t\t\tentry: listen()\n                    },\n                    \n                nomatch: \n                {\n\t\t\t\t\tentry: say(\"Please repeat it again\"),\n\t\t\t\t\ton: { ENDSPEECH: \"prompt\" }\n\t\t\t\t}\n\t\t\t}\n        },\n        \n        withtime: \n        {\n\t\t\tinitial: \"prompt\",\n            on: \n            {\n                RECOGNISED: \n                [\n                    { \n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\n                    target: \"Finished\"\n                    },\n\n\t\t\t\t\t{\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\ttarget: \"who\"\n                    },\n                    \n                    { target: \".nomatch\" }\n                ]\n             },\n             \n             states: \n             {\n                 prompt: \n                 {\n\t\t\t\t\t entry: send((context) => ({\n\t\t\t\t\t\t type: \"SPEAK\",\n\t\t\t\t\t\t value: `Good. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n\t\t\t\t\t })),\n\t\t\t\t\t on: { ENDSPEECH: \"ask\" }\n                 },\n                 \n                 ask: \n                 {\n\t\t\t\t\t entry: listen()\n                 },\n                 \n                 nomatch: \n                 {\n\t\t\t\t\t entry: say(\"Please repeat it again\"),\n\t\t\t\t\t on: { ENDSPEECH: \"prompt\" }\n\t\t\t\t }\n\t\t\t }\n        },\n        \n        Finished: \n        {\n\t\t    initial: \"prompt\",\n\t\t    on: { ENDSPEECH: \"init\" },\n            states: \n            {\n                prompt: \n                { \n                    entry: say(\"Your appointment has been created!\")\n\t\t        },\n\t        }\n\t    }\t    \n    }\n})*/\n\nimport { MachineConfig, Machine, send, Action, assign } from \"xstate\";\nimport \"./styles.scss\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } \n} = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Mary\": { person: \"Mary Curie\" },\n    \"George\": { person: \"George Smith\" },\n    \"Axel\": { person: \"Axel Rose\" },\n    \"Sebastian\": { person: \"Sebastian Bach\" },\n    \"Jae Eun\": { person: \"Jae Eun Hong\" },\n\n    \"on Monday\": { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Friday\": { day: \"Friday\" },\n\t\"on Saturday\": { day: \"Saturday\" },\n\t\"on Sunday\": { day: \"Sunday\" },\n\n\t\"at 5\": { time: \"5:00\" },\n\t\"at 6\": { time: \"6:00\" },\n    \"at 7\": { time: \"7:00\" },\n    \"at 8\": { time: \"8:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at 12\": { time: \"12:00\" }\n}\n\nconst grammar2: { [index: string]: boolean } = {\n    \"yes of course\": true,\n    \"sure\": true,\n    \"absolutely\": true,\n    \"yes\": true,\n    \"no way\": false,\n    \"no\": false\n}\n\nlet a = grammar2[\"yes\"]\nlet b = grammar2[\"no\"]\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN')\n            },\n        }})\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n   \n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }            \n        },        \n\n        welcome: {\n            on: {\n                RECOGNISED: {\n                    target: \"query\",\n                    actions: assign((context) => { return { option: context.recResult } }),\n                }    \n            },\n                    ...promptAndAsk(\"What would you like to do? Your options are appointment, to do item or timer\")\n        },\n\n\n        query: {\n            invoke: {\n                id: 'rasa',\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: 'menu',\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data)]\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n                },\n                onError: {\n                    target: 'welcome',\n                    actions: (context, event) => console.log(event.data)\n                }\n            }\n        },\n\n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: 'todo', cond: (context) => context.option === 'todo' },\n                    { target: 'timer', cond: (context) => context.option === 'timer' },\n                    { target: 'appointment', cond: (context) => context.option === 'appointment' }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I understand.`\n                    })),\n        },\n     /*            nomatch: {\n                    entry: say(\"Sorry, I don't understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } */ \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create a timer`\n                    }))\n                }}\n        },\n        \n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create an appointment`\n                    }))\n                }}\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n\t\t\t\t\tcond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"wholeday\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`,\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I didn't understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        wholeday: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === b),\n                    target: \"time\"\n                },\n\t\t{cond: (context) => (grammar2[context.recResult] === a),\n\t\ttarget: \"confirm_meeting_whole_day\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. Will it take the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t            }\n                }\n\t},\n        time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirm_time\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.day}. What time is your meeting?`,\n                    \n                    })),\n            on: { ENDSPEECH: \"ask\" }\n                },\n        ask: {\n            entry: listen()\n                },\n        nomatch: {\n            entry: say(\"Sorry I don't know that\"),\n        on: { ENDSPEECH: \"prompt\" }\n                }\n                }\n        },\n        confirm_meeting_whole_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === b),\n                    target: \"init\"\n                },\n\t\t{cond: (context) => (grammar2[context.recResult] === a),\n\t\ttarget: \"confirmed\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t           }\n                }\n\n\t},\n    confirm_time: {\n        initial: \"prompt\",\n        on:  {\n            RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === b),\n                target: \"who\"\n            },\n    {cond: (context) => (grammar2[context.recResult] === a),\n    target: \"confirmed\"\n    },\n            { target: \".nomatch\" }]\n        },\n        states: {\n            prompt: {\n               entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                })),\n        on: { ENDSPEECH: \"ask\" }\n            },\n    ask: {\n         entry: listen()\n        },\n    nomatch: {\n        entry: say(\"Sorry, I don't understand\"),\n    on: { ENDSPEECH: \"prompt\" }\n           }\n            },\n        },\n    confirmed: {\n        initial: \"prompt\",\n        on: { ENDSPEECH: \"init\" },\n        states: {\n            prompt: {\n                entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Your appointment has been created!`\n                }))\n            },\n    }\n    }\n    }})\n\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://irenetsk.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\n\n"]},"metadata":{},"sourceType":"module"}