{"ast":null,"code":"import _objectSpread from \"C:/Users/User/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign, actions } from \"xstate\";\nimport \"./styles.scss\";\nconst cancel = actions.cancel;\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nfunction promptAndAsk(prompt, speechprompt) {\n  return {\n    initial: \"prompt\",\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      hist: {\n        type: \"history\"\n      },\n      maxspeech: _objectSpread({}, speech(speechprompt)),\n      ask: {\n        entry: [listen(), send('MAXSPEECH', {\n          delay: 5000\n        })]\n      }\n    }\n  };\n}\n\nfunction helpm(prompt, name) {\n  return {\n    entry: say(prompt),\n    on: {\n      ENDSPEECH: name + \".hist\"\n    }\n  };\n}\n\nfunction speech(prompt) {\n  return {\n    entry: say(prompt),\n    on: {\n      ENDSPEECH: \"ask\"\n    }\n  };\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Chris\": {\n    person: \"Chris Thomas\"\n  },\n  \"Grace\": {\n    person: \"Grace Jane\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"at8\": {\n    time: \"eight o'clock\"\n  },\n  \"at eight\": {\n    time: \"eight o'clcok\"\n  },\n  \"at10\": {\n    time: \"ten o'clcok\"\n  },\n  \"at ten\": {\n    time: \"ten o'clcok\"\n  },\n  \"at7\": {\n    time: \"seven o'clock\"\n  },\n  \"at seven\": {\n    time: \"seven o'clock\"\n  },\n  \"at11\": {\n    time: \"eleven o'clock\"\n  },\n  \"at eleven\": {\n    time: \"eleven o'clock\"\n  }\n};\nconst grammar2 = {\n  \"yes\": true,\n  \"Yes\": true,\n  \"Of course\": true,\n  \"of course\": true,\n  \"No\": false,\n  \"no\": false,\n  \"No way\": false,\n  \"no way\": false\n};\nconst commands = {\n  \"help\": \"h\",\n  \"Help\": \"H\"\n};\nconst grammar3 = {\n  \"count\": 0\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          target: \"query\",\n          cond: context => !(context.recResult in commands),\n          actions: [assign(context => {\n            return {\n              option: context.recResult\n            };\n          }), assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          target: \"help1\",\n          cond: context => context.recResult in commands,\n          actions: cancel(\"maxsp\")\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"What would you like to do?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        maxspeech: _objectSpread({}, speech(\"You did not respondï¼Œjust tell me what you want to do\")),\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000\n          })]\n        }\n      }\n    },\n    help1: _objectSpread({}, helpm(\"Please kindly tell me what you want to do\", \"welcome\")),\n    query: {\n      invoke: {\n        id: \"rasa\",\n        src: (context, event) => nluRequest(context.option),\n        onDone: {\n          target: \"menu\",\n          actions: [assign((context, event) => {\n            return {\n              option: event.data.intent.name\n            };\n          }), (context, event) => console.log(event.data)] //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n        },\n        onError: {\n          target: \"welcome\",\n          actions: (context, event) => console.log(event.data)\n        }\n      }\n    },\n    menu: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: [{\n          target: \"todo\",\n          cond: context => context.option === \"todo\"\n        }, {\n          target: \"timer\",\n          cond: context => context.option === \"timer\"\n        }, {\n          target: \"appointment\",\n          cond: context => context.option === \"appointment\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. I understand\\uFF0Cyou want a \".concat(context.option, \".\")\n          }))\n        }\n        /*            nomatch: {\n                       entry: say(\"Sorry, I don\"t understand\"),\n                       on: { ENDSPEECH: \"prompt\" }\n           } */\n\n      }\n    },\n    todo: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Let\\\"s create a to do item\"\n          }))\n        }\n      }\n    },\n    timer: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Let\\\"s create a timer\"\n          }))\n        }\n      }\n    },\n    appointment: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"who\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Let\\\"s create an appointment\"\n          }))\n        }\n      }\n    },\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }), assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"day\"\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"help2\",\n          cond: context => context.recResult in commands,\n          actions: cancel(\"maxsp\")\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech: _objectSpread({}, speech(\"You did not respond, just tell me the person\")),\n        nomatch: {\n          entry: say(\"Sorry I don't know them\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    help2: _objectSpread({}, helpm(\"Just tell me the name\", \"who\")),\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }), assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"wholeday\"\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"help3\",\n          cond: context => context.recResult in commands,\n          actions: cancel(\"maxsp\")\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech: _objectSpread({}, speech(\"You did not respond, say a day\")),\n        nomatch: {\n          entry: say(\"Sorry I don't know which day are you talking about\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    help3: _objectSpread({}, helpm(\"Just tell me the day\", \"day\")),\n    wholeday: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === true,\n          target: \"notime\",\n          actions: [assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          cond: context => grammar2[context.recResult] === false,\n          target: \"whattime\",\n          actions: [assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"help4\",\n          cond: context => context.recResult in commands,\n          actions: cancel(\"maxsp\")\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Good.on \".concat(context.day, \". Will it take the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech: _objectSpread({}, speech(\"You did not respond, say a decision\")),\n        nomatch: {\n          entry: say(\"Please repeat it again\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    help4: _objectSpread({}, helpm(\"Just tell me the decision\", \"wholeday\")),\n    notime: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === true,\n          target: \"Finished\",\n          actions: [assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          cond: context => grammar2[context.recResult] === false,\n          target: \"who\",\n          actions: [assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"help5\",\n          cond: context => context.recResult in commands,\n          actions: cancel(\"maxsp\")\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Good. Do you want to me create an appointment with \".concat(context.person, \" on \").concat(context.day, \"for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech: _objectSpread({}, speech(\"You did not respond, please confirm it\")),\n        nomatch: {\n          entry: say(\"Please repeat it again\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    help5: _objectSpread({}, helpm(\"Just confirm it\", \"notime\")),\n    whattime: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }), assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"withtime\"\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"help6\",\n          cond: context => context.recResult in commands,\n          actions: cancel(\"maxsp\")\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"What time is your meeting\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech: _objectSpread({}, speech(\"You did not respond, say a time\")),\n        nomatch: {\n          entry: say(\"Please repeat it again\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    help6: _objectSpread({}, helpm(\"Just tell me the time\", \"whattime\")),\n    withtime: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === true,\n          target: \"Finished\",\n          actions: [assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          cond: context => grammar2[context.recResult] === false,\n          target: \"who\",\n          actions: [assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"help7\",\n          cond: context => context.recResult in commands,\n          actions: cancel(\"maxsp\")\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Good. Do you want to me create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech: _objectSpread({}, speech(\"You did not respond, just confirm it\")),\n        nomatch: {\n          entry: say(\"Please repeat it again\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    help7: _objectSpread({}, helpm(\"Please confirm it\", \"withtime\")),\n    Finished: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Your appointment has been created!\")\n        }\n      }\n    }\n  }\n};\n/* RASA API\n*  */\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = \"https://intents-oyousuf.herokuapp.com/model/parse\";\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: \"POST\",\n  headers: {\n    \"Origin\": \"http://localhost:3000/react-xstate-colourchanger\"\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());","map":{"version":3,"sources":["C:/Users/User/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","actions","cancel","say","text","_context","type","value","listen","promptAndAsk","prompt","speechprompt","initial","states","entry","on","ENDSPEECH","hist","maxspeech","speech","ask","delay","helpm","name","grammar","person","day","time","grammar2","commands","grammar3","dmMachine","init","CLICK","welcome","RECOGNISED","target","cond","context","recResult","option","MAXSPEECH","help1","query","invoke","id","src","event","nluRequest","onDone","data","intent","console","log","onError","menu","todo","timer","appointment","who","nomatch","help2","help3","wholeday","help4","notime","help5","whattime","help6","withtime","help7","Finished","proxyurl","rasaurl","fetch","Request","method","headers","body","then","json"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign, actions} from \"xstate\";\nimport \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\n\nconst {cancel}=actions\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction promptAndAsk(prompt: string, speechprompt:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: \"prompt\",\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: \"ask\" }\n            },\n            hist: {type: \"history\"},\n            maxspeech: {\n                ...speech(speechprompt)\n        },  \n            ask: {\n                entry: [listen(), send('MAXSPEECH', {delay: 5000})]\n            },\n        }})\n}\n\n\nfunction helpm(prompt: string, name: string): MachineConfig<SDSContext, any, SDSEvent>{\n    return ({entry: say(prompt),\n             on: {ENDSPEECH: name+\".hist\" }})\n}\n\nfunction speech(prompt: string): MachineConfig<SDSContext, any, SDSEvent>{\n    return ({entry: say(prompt),\n             on: {ENDSPEECH: \"ask\"\n            }})\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n\t\"Chris\": { person: \"Chris Thomas\" },\n\t\"Grace\": {person: \"Grace Jane\"},\n    \"on Friday\": { day: \"Friday\" },\n\t\"on Monday\": { day: \"Monday\" },\n\t\"at8\": {time: \"eight o'clock\" },\n\t\"at eight\": { time: \"eight o'clcok\" },\n\t\"at10\":{time:\"ten o'clcok\" },\n    \"at ten\": { time: \"ten o'clcok\" },\n\t\"at7\": {time: \"seven o'clock\"},\n    \"at seven\": {time: \"seven o'clock\"},\n\t\"at11\": {time: \"eleven o'clock\"},\n    \"at eleven\": {time: \"eleven o'clock\"}\n}\n\nconst grammar2= { \"yes\": true,\n                  \"Yes\": true,\n\t\t\t\t  \"Of course\": true,\n                  \"of course\": true, \n\t\t\t\t  \"No\": false,\n\t\t\t\t  \"no\" : false,\n\t\t\t\t  \"No way\": false,\n\t\t\t\t  \"no way\" : false\n}\nconst commands = {\"help\": \"h\", \"Help\": \"H\"}\n\nconst grammar3 ={\"count\": 0}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\t\twelcome: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    target: \"query\",\n                    cond: (context) => !(context.recResult in commands),\n                    actions: [assign((context) => { return { option: context.recResult } }),assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")],\n                    \n                },\n                {target: \"help1\",\n                cond: (context) => context.recResult in commands,\n                actions: cancel(\"maxsp\")} ],\n                MAXSPEECH: [{target:\".maxspeech\",\n                cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}]\n            },\n            states: {        \n                prompt: {\n                entry: say(\"What would you like to do?\"),\n                on: { ENDSPEECH: \"ask\" }\n            },\n            hist: {type: \"history\"},\n               maxspeech: {\n                ...speech(\"You did not respondï¼Œjust tell me what you want to do\")\n        },  \n            ask: {\n                entry: [listen(), send('MAXSPEECH', {delay: 5000})]\n            }\n        }   \n    }, \n    \n        help1:{\n            ...helpm(\"Please kindly tell me what you want to do\",\"welcome\")\n        },\n\t\tquery: {\n            invoke: {\n                id: \"rasa\",\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: \"menu\",\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data)]\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n                },\n                onError: {\n                    target: \"welcome\",\n                    actions: (context, event) => console.log(event.data)\n                }\n            }\n        },\n      \n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: \"todo\", cond: (context) => context.option === \"todo\" },\n                    { target: \"timer\", cond: (context) => context.option === \"timer\" },\n                    { target: \"appointment\", cond: (context) => context.option === \"appointment\" }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I understandï¼Œyou want a ${context.option}.`\n                    })),\n        },\n     /*            nomatch: {\n                    entry: say(\"Sorry, I don\"t understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } */ \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a timer`\n                    }))\n                }}\n        },\n        \n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create an appointment`\n                    }))\n                }}\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: [assign((context) => { return { person: grammar[context.recResult].person } }),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" ,\n                 cond: (context) => !(context.recResult in commands),\n                 actions: cancel(\"maxsp\")},\n                 {target: \"help2\",\n                 cond: (context) => context.recResult in commands,\n                 actions: cancel(\"maxsp\")}],\n                 MAXSPEECH: [{target:\".maxspeech\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                hist: {type: \"history\"},\n                ask: {\n                    entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n                },\n                maxspeech: {\n                    ...speech(\"You did not respond, just tell me the person\")\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH:  \"prompt\" }\n                \n                }\n             }\n        },\n        help2:{\n            ...helpm(\"Just tell me the name\",\"who\")\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n\t            RECOGNISED: [{\n\t                cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n\t\t            actions: [assign((context) => { return { day: grammar[context.recResult].day } }),assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")],\n\t\t            target: \"wholeday\"\n\n\t\t        },\t\n\t\t        { target: \".nomatch\" ,\n                cond: (context) => !(context.recResult in commands),\n                actions: cancel(\"maxsp\")},\n                {target: \"help3\",\n                cond: (context) => context.recResult in commands,\n                actions: cancel(\"maxsp\")}],\n                MAXSPEECH: [{target:\".maxspeech\",\n                cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t        },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n\t\t            on: { ENDSPEECH: \"ask\" }\n                },\n                hist: {type: \"history\"},\n\t\t        ask: {\n\t\t            entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t            },\n                maxspeech: {\n                 ...speech(\"You did not respond, say a day\")\n              },\n\t\t        nomatch: {\n\t\t            entry: say(\"Sorry I don't know which day are you talking about\"),\n\t\t            on: { ENDSPEECH: \"prompt\" }\n\t            }\t     \n            }\n        },\n        help3:{\n            ...helpm(\"Just tell me the day\",\"day\")\n        },\n        \n\t    wholeday: {\n\t\t        initial: \"prompt\",\n\t\t        on: {\n\t                RECOGNISED: [{\n\t\t\t            cond: (context) => grammar2[context.recResult] === true,\n                        target: \"notime\",\n                        actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]},\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\t\ttarget: \"whattime\",\n                        actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]\n\t\t            },\n\t                { target: \".nomatch\",\n                    cond: (context) => !(context.recResult in commands),\n                    actions: cancel(\"maxsp\")},\n                    {target: \"help4\",\n                    cond: (context) => context.recResult in commands,\n                    actions: cancel(\"maxsp\")}],\n                    MAXSPEECH: [{target:\".maxspeech\",\n                    cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t\t        },\n\t\t        states: {\n\t\t            prompt: {\n\t\t\t            entry: send((context) => ({\n\t\t\t                type: \"SPEAK\",\n\t\t\t\t\t\t    value: `Good.on ${context.day}. Will it take the whole day?`\n\t\t\t            })),\n\t\t\t            on: { ENDSPEECH: \"ask\" }\n\t\t            },\n                    hist: {type: \"history\"},\n\t\t            ask: {\n\t\t                entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t            },\n                    maxspeech: {\n                      ...speech(\"You did not respond, say a decision\")\n                    },\n\t\t            nomatch: {\n\t\t\t            entry: say(\"Please repeat it again\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t            }\n\t\t        }\t     \n            },\n            help4:{\n                ...helpm(\"Just tell me the decision\",\"wholeday\")\n            },\n            notime: {\n\t\t           initial: \"prompt\",\n\t               on: {\n\t\t               RECOGNISED: [{ \n\t\t\t               cond: (context) => grammar2[context.recResult] === true,\n\t\t\t               target: \"Finished\",\n                           actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]},\n\t\t\t\t\t\t   {\n\t\t\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n                           target: \"who\",\n\t\t\t\t\t\t   actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]\n\t\t                },\n\t\t                { target: \".nomatch\",\n                        cond: (context) => !(context.recResult in commands),\n                        actions: cancel(\"maxsp\")},\n                        {target: \"help5\",\n                        cond: (context) => context.recResult in commands,\n                        actions: cancel(\"maxsp\")}],\n                        MAXSPEECH: [{target:\".maxspeech\",\n                        cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}]  \n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t\t                entry: send((context) => ({\n\t\t\t                    type: \"SPEAK\",\n\t\t\t\t\t\t\t\tvalue: `Good. Do you want to me create an appointment with ${context.person} on ${context.day}for the whole day?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n\t\t                },\n                        hist: {type: \"history\"},\n\t\t                ask: {\n\t\t\t                entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t                },\n                        maxspeech: {\n                             ...speech(\"You did not respond, please confirm it\")},\n\t\t                nomatch: {\n\t\t\t                entry: say(\"Please repeat it again\"),\n\t\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t                }\n                    }\n\t            },\n                help5:{\n                    ...helpm(\"Just confirm it\",\"notime\")\n                },\n\t\t\t\twhattime: {\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tRECOGNISED: [{\n\t\t\t\t\t\t\tcond: (context) => \"time\" in (grammar[context.recResult] || {}),\n\t\t\t\t\t\t\tactions: [assign((context) => { return { time: grammar[context.recResult].time } }),assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")],\n\t\t\t\t\t\t\ttarget: \"withtime\"\n\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ target: \".nomatch\" ,\n                        cond: (context) => !(context.recResult in commands),\n                        actions: cancel(\"maxsp\")},\n                        {target: \"help6\",\n                        cond: (context) => context.recResult in commands,\n                        actions: cancel(\"maxsp\")}],\n                        MAXSPEECH: [{target:\".maxspeech\",\n                        cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}]  \n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: { entry: say(\"What time is your meeting\"),\n\t\t\t\t\t\ton: { ENDSPEECH: \"ask\" }\n\t\t\t\t\t},\n                    hist: {type: \"history\"},\n\t\t\t\t\task: {\n\t\t\t\t\t\tentry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t\t\t},\n                maxspeech: {\n                  ...speech(\"You did not respond, say a time\")\n                },\n\t\t\t\tnomatch: {\n\t\t\t\t\tentry: say(\"Please repeat it again\"),\n\t\t\t\t\ton: { ENDSPEECH: \"prompt\" }\n\t\t\t\t}\n\t\t\t}\n\t\t},\n        help6:{\n            ...helpm(\"Just tell me the time\",\"whattime\")\n        },\n        \n\t\twithtime: {\n\t\t\tinitial: \"prompt\",\n\t\t\ton: {\n\t\t\t\tRECOGNISED: [{ \n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\n\t\t\t\t\ttarget: \"Finished\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]},\n\t\t\t\t\t{\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\ttarget: \"who\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]\n\t\t\t\t },\n\t\t\t\t { target: \".nomatch\",\n                 cond: (context) => !(context.recResult in commands),\n                 actions: cancel(\"maxsp\")},\n                 {target: \"help7\",\n                 cond: (context) => context.recResult in commands,\n                 actions: cancel(\"maxsp\")}],\n                 MAXSPEECH: [{target:\".maxspeech\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t\t\t },\n\t\t\t states: {\n\t\t\t\t prompt: {\n\t\t\t\t\t entry: send((context) => ({\n\t\t\t\t\t\t type: \"SPEAK\",\n\t\t\t\t\t\t value: `Good. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n\t\t\t\t\t })),\n\t\t\t\t\t on: { ENDSPEECH: \"ask\" }\n\t\t\t\t },\n                 hist: {type: \"history\"},\n\t\t\t\t ask: {\n\t\t\t\t\t entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t\t\t },\n                maxspeech: {\n                 ...speech(\"You did not respond, just confirm it\")\n                },        \n\t\t\t\t nomatch: {\n\t\t\t\t\t entry: say(\"Please repeat it again\"),\n\t\t\t\t\t on: { ENDSPEECH: \"prompt\" }\n\t\t\t\t }\n\t\t\t }\n\t\t},\n        help7:{\n            ...helpm(\"Please confirm it\",\"withtime\")\n        },\n        \n        Finished: {\n\t\t                 initial: \"prompt\",\n\t\t                 on: { ENDSPEECH: \"init\" },\n\t\t                 states: {\n\t\t\t                 prompt: { entry: say(\"Your appointment has been created!\")\n\t\t                    },\n\t                    }\n\t                }\t    \n                }\n            })\n\n\n\t\t\t/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = \"https://intents-oyousuf.herokuapp.com/model/parse\"\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: \"POST\",\n        headers: { \"Origin\": \"http://localhost:3000/react-xstate-colourchanger\" }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n"]},"metadata":{},"sourceType":"module"}