{"ast":null,"code":"import _objectSpread from \"C:/Users/User/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\nimport \"./styles.scss\"; // new stuff\n\n//new\n//new\nconst _actions = actions,\n      cancel = _actions.cancel; //new\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send(\"LISTEN\");\n} //new\n\n\nfunction helpm(prompt, name) {\n  return {\n    entry: say(prompt),\n    on: {\n      ENDSPEECH: name + \".hist\"\n    }\n  };\n}\n\nfunction speech(prompt) {\n  return {\n    entry: say(prompt),\n    on: {\n      ENDSPEECH: \"ask\"\n    }\n  };\n} //new\n\n\nconst grammar = {\n  // Here are some common names in English that I found are easier for the robot to understand.\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Jack\": {\n    person: \"Jack Orangeseed\"\n  },\n  \"David\": {\n    person: \"David Grapeseed\"\n  },\n  \"Robert\": {\n    person: \"Robert Watermelonseed\"\n  },\n  \"Jennifer\": {\n    person: \"Jennifer Bananaseed\"\n  },\n  \"Jessica\": {\n    person: \"Jessica Pineappleseed\"\n  },\n  \"john\": {\n    person: \"john appleseed\"\n  },\n  \"jack\": {\n    person: \"jack orangeseed\"\n  },\n  \"david\": {\n    person: \"david grapeseed\"\n  },\n  \"robert\": {\n    person: \"robert watermelonseed\"\n  },\n  \"jennifer\": {\n    person: \"jennifer bananaseed\"\n  },\n  \"jessica\": {\n    person: \"jessica pineappleseed\"\n  },\n  // Here are names of friends I tried at first, but because they're non-English it was incredibly hard to move forward with the robot so I mad the previously mentioned English names above.\n  \"Zhe\": {\n    person: \"Zhe Han\"\n  },\n  \"Siyi\": {\n    person: \"Siyi Gu\"\n  },\n  \"Jae Eun\": {\n    person: \"Jae Eun Hong\"\n  },\n  \"Oreen\": {\n    person: \"Oreen Yousuf\"\n  },\n  \"Angeliki\": {\n    person: \"Angeliki Zagoura\"\n  },\n  \"Flor\": {\n    person: \"Flor Ortiz\"\n  },\n  \"Emma\": {\n    person: \"Emma Wallerö\"\n  },\n  \"zhe\": {\n    person: \"zhe han\"\n  },\n  \"siyi\": {\n    person: \"siyi gu\"\n  },\n  \"jae eun\": {\n    person: \"jae eun hong\"\n  },\n  \"oreen\": {\n    person: \"oreen yousuf\"\n  },\n  \"angeliki\": {\n    person: \"angeliki zagoura\"\n  },\n  \"flor\": {\n    person: \"flor ortiz\"\n  },\n  \"emma\": {\n    person: \"emma wallerö\"\n  },\n  //Days of the week with alternating potential utterances ('on')\n  \"Monday\": {\n    day: \"Monday\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"Friday\": {\n    day: \"Friday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"Sunday\": {\n    day: \"Sunday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  //times with different utterances and spellings/numberings to capture all ways the robot could interpret it\n  \"at one\": {\n    time: \"01:00\"\n  },\n  \"at two\": {\n    time: \"02:00\"\n  },\n  \"at three\": {\n    time: \"03:00\"\n  },\n  \"at four\": {\n    time: \"04:00\"\n  },\n  \"at five\": {\n    time: \"05:00\"\n  },\n  \"at six\": {\n    time: \"06:00\"\n  },\n  \"at seven\": {\n    time: \"07:00\"\n  },\n  \"at eight\": {\n    time: \"08:00\"\n  },\n  \"at nine\": {\n    time: \"09:00\"\n  },\n  \"at ten\": {\n    time: \"10:00\"\n  },\n  \"at eleven\": {\n    time: \"11:00\"\n  },\n  \"at twelve\": {\n    time: \"12:00\"\n  },\n  \"at thirteen\": {\n    time: \"13:00\"\n  },\n  \"at fourteen\": {\n    time: \"14:00\"\n  },\n  \"at fifteen\": {\n    time: \"15:00\"\n  },\n  \"at sixteen\": {\n    time: \"16:00\"\n  },\n  \"at seventeen\": {\n    time: \"17:00\"\n  },\n  \"at eighteen\": {\n    time: \"18:00\"\n  },\n  \"at nineteen\": {\n    time: \"19:00\"\n  },\n  \"at twenty\": {\n    time: \"20:00\"\n  },\n  \"at twenty one\": {\n    time: \"21:00\"\n  },\n  \"at twenty two\": {\n    time: \"22:00\"\n  },\n  \"at twenty three\": {\n    time: \"23:00\"\n  },\n  \"at twenty four\": {\n    time: \"00:00\"\n  },\n  \"one\": {\n    time: \"01:00\"\n  },\n  \"two\": {\n    time: \"02:00\"\n  },\n  \"three\": {\n    time: \"03:00\"\n  },\n  \"four\": {\n    time: \"04:00\"\n  },\n  \"five\": {\n    time: \"05:00\"\n  },\n  \"six\": {\n    time: \"06:00\"\n  },\n  \"seven\": {\n    time: \"07:00\"\n  },\n  \"eight\": {\n    time: \"08:00\"\n  },\n  \"nine\": {\n    time: \"09:00\"\n  },\n  \"ten\": {\n    time: \"10:00\"\n  },\n  \"eleven\": {\n    time: \"11:00\"\n  },\n  \"twelve\": {\n    time: \"12:00\"\n  },\n  \"thirteen\": {\n    time: \"13:00\"\n  },\n  \"fourteen\": {\n    time: \"14:00\"\n  },\n  \"fifteen\": {\n    time: \"15:00\"\n  },\n  \"sixteen\": {\n    time: \"16:00\"\n  },\n  \"seventeen\": {\n    time: \"17:00\"\n  },\n  \"eighteen\": {\n    time: \"18:00\"\n  },\n  \"nineteen\": {\n    time: \"19:00\"\n  },\n  \"twenty\": {\n    time: \"20:00\"\n  },\n  \"twenty one\": {\n    time: \"21:00\"\n  },\n  \"twenty two\": {\n    time: \"22:00\"\n  },\n  \"twenty three\": {\n    time: \"23:00\"\n  },\n  \"twenty four\": {\n    time: \"00:00\"\n  },\n  \"at 1\": {\n    time: \"01:00\"\n  },\n  \"at 2\": {\n    time: \"02:00\"\n  },\n  \"at 3\": {\n    time: \"03:00\"\n  },\n  \"at 4\": {\n    time: \"04:00\"\n  },\n  \"at 5\": {\n    time: \"05:00\"\n  },\n  \"at 6\": {\n    time: \"06:00\"\n  },\n  \"at 7\": {\n    time: \"07:00\"\n  },\n  \"at 8\": {\n    time: \"08:00\"\n  },\n  \"at 9\": {\n    time: \"09:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  },\n  \"at 13\": {\n    time: \"13:00\"\n  },\n  \"at 14\": {\n    time: \"14:00\"\n  },\n  \"at 15\": {\n    time: \"15:00\"\n  },\n  \"at 16\": {\n    time: \"16:00\"\n  },\n  \"at 17\": {\n    time: \"17:00\"\n  },\n  \"at 18\": {\n    time: \"18:00\"\n  },\n  \"at 19\": {\n    time: \"19:00\"\n  },\n  \"at 20\": {\n    time: \"20:00\"\n  },\n  \"at 21\": {\n    time: \"21:00\"\n  },\n  \"at 22\": {\n    time: \"22:00\"\n  },\n  \"at 23\": {\n    time: \"23:00\"\n  },\n  \"at 24\": {\n    time: \"00:00\"\n  },\n  \"1\": {\n    time: \"01:00\"\n  },\n  \"2\": {\n    time: \"02:00\"\n  },\n  \"3\": {\n    time: \"03:00\"\n  },\n  \"4\": {\n    time: \"04:00\"\n  },\n  \"5\": {\n    time: \"05:00\"\n  },\n  \"6\": {\n    time: \"06:00\"\n  },\n  \"7\": {\n    time: \"07:00\"\n  },\n  \"8\": {\n    time: \"08:00\"\n  },\n  \"9\": {\n    time: \"09:00\"\n  },\n  \"10\": {\n    time: \"10:00\"\n  },\n  \"11\": {\n    time: \"11:00\"\n  },\n  \"12\": {\n    time: \"12:00\"\n  },\n  \"13\": {\n    time: \"13:00\"\n  },\n  \"14\": {\n    time: \"14:00\"\n  },\n  \"15\": {\n    time: \"15:00\"\n  },\n  \"16\": {\n    time: \"16:00\"\n  },\n  \"17\": {\n    time: \"17:00\"\n  },\n  \"18\": {\n    time: \"18:00\"\n  },\n  \"19\": {\n    time: \"19:00\"\n  },\n  \"20\": {\n    time: \"20:00\"\n  },\n  \"21\": {\n    time: \"21:00\"\n  },\n  \"22\": {\n    time: \"22:00\"\n  },\n  \"23\": {\n    time: \"23:00\"\n  },\n  \"24\": {\n    time: \"00:00\"\n  }\n}; //second grammar for trues and falses\n\nconst grammar2 = {\n  \"yes\": true,\n  \"Yes\": true,\n  \"yes of course\": true,\n  \"Yes of course\": true,\n  \"sure\": true,\n  \"Sure\": true,\n  \"absolutely\": true,\n  \"Absolutely\": true,\n  \"perfect\": true,\n  \"Perfect\": true,\n  \"no\": false,\n  \"No\": false,\n  \"no way\": false,\n  \"No way\": false\n}; //new\n\nconst commands = {\n  \"help\": \"h\",\n  \"Help\": \"H\"\n};\nconst grammar3 = {\n  \"count\": 0\n}; //new\n\n/*function promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: \"prompt\",\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: \"ask\" }\n            },\n            ask: {\n                entry: send(\"LISTEN\")\n            },\n        }})\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n   \n    initial: \"init\",\n    states: {\n        init: {\n            on: {\n                CLICK: \"welcome\"\n            }            \n        },        \n\n        welcome: {\n            on: {\n                RECOGNISED: {\n                    target: \"query\",\n                    actions: assign((context) => { return { option: context.recResult } }),\n                }    \n            },\n                    ...promptAndAsk(\"What would you like to do? Your options are appointment, to do item or timer\")\n        },\n\n\n        query: {\n            invoke: {\n                id: \"rasa\",\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: \"menu\",\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data)]\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n                },\n                onError: {\n                    target: \"welcome\",\n                    actions: (context, event) => console.log(event.data)\n                }\n            }\n        },\n\n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: \"todo\", cond: (context) => context.option === \"todo\" },\n                    { target: \"timer\", cond: (context) => context.option === \"timer\" },\n                    { target: \"appointment\", cond: (context) => context.option === \"appointment\" }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I understand.`\n                    })),\n        }, \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a timer`\n                    }))\n                }}\n        },\n        \n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create an appointment`\n                    }))\n                }}\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n\t\t\t\t\tcond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I do not know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"wholeday\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`,\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I do not understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        wholeday: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === false),\n                    target: \"time\"\n                },\n\t\t{cond: (context) => (grammar2[context.recResult] === true),\n\t\ttarget: \"confirm_meeting_whole_day\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. Will it take the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry I do not understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t            }\n                }\n\t},\n        time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirm_time\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.day}. What time is your meeting?`,\n                    \n                    })),\n            on: { ENDSPEECH: \"ask\" }\n                },\n        ask: {\n            entry: listen()\n                },\n        nomatch: {\n            entry: say(\"Sorry I do not know that\"),\n        on: { ENDSPEECH: \"prompt\" }\n                }\n                }\n        },\n        confirm_meeting_whole_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === false),\n                    target: \"init\"\n                },\n\t\t{cond: (context) => (grammar2[context.recResult] === true),\n\t\ttarget: \"confirmed\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry I do not understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t           }\n                }\n\n\t},\n    confirm_time: {\n        initial: \"prompt\",\n        on:  {\n            RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === false),\n                target: \"who\"\n            },\n    {cond: (context) => (grammar2[context.recResult] === true),\n    target: \"confirmed\"\n    },\n            { target: \".nomatch\" }]\n        },\n        states: {\n            prompt: {\n               entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                })),\n        on: { ENDSPEECH: \"ask\" }\n            },\n    ask: {\n         entry: listen()\n        },\n    nomatch: {\n        entry: say(\"Sorry I do not understand\"),\n    on: { ENDSPEECH: \"prompt\" }\n           }\n            },\n        },\n    confirmed: {\n        initial: \"prompt\",\n        on: { ENDSPEECH: \"init\" },\n        states: {\n            prompt: {\n                entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Your appointment has been created!`\n                }))\n            },\n    }\n    }\n    }})\n*/\n\nfunction promptAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: send('LISTEN')\n      }\n    }\n  };\n}\n/* //lab 2 base code\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = \n\n({\n    initial: 'init',\n    states: \n    {\n        init:{\n            on: {\n                CLICK: 'welcome'\n                }\n             },\n        welcome: \n        {\n            on: {\n                RECOGNISED: {\n                    target: \"query\",\n                    actions: assign((context) => { return { option: context.recResult } }),\n                }    \n            },\n                    ...promptAsk(\"What would you like to do?\")\n        },\n\n        query: \n        {\n            invoke: {\n            \n            id: 'rasa',\n            src: (context, event) => nluRequest(context.option),\n            onDone: {\n                target: 'menu',\n                actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                (context: SDSContext, event: any) => console.log(event.data)]\n            },\n            onError: {\n                target: 'welcome',\n                actions: (context, event) => console.log(event.data)\n\n                }\n            }\n        },\n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: 'todo', cond: (context) => context.option === 'todo' },\n                    { target: 'timer', cond: (context) => context.option === 'timer' },\n                    { target: 'appointment', cond: (context) => context.option === 'appointment' }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I see.`\n                    })),\n        },\n                 nomatch: {\n                    entry: say(\"Sorry, I don't understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create a timer`\n                    }))\n                }}\n        },\n        \n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create an appointment`\n                    }))\n                }}\n        },\n\n        who: \n        \n        {\n            initial: \"prompt\",\n            on: \n            {\n                RECOGNISED: \n                [\n                    {\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n                    },\n                { target: \".nomatch\" }\n                ]\n            },\n\n            states: \n            \n            {\n                prompt: \n                \n                {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                \n                ask: \n                \n                {\n                    entry: listen()\n                },\n                \n                nomatch: \n                \n                {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n\n        day: \n        \n        {\n            initial: \"prompt\",\n            on: \n            \n            {\n\t            RECOGNISED: \n                [\n                    {\n\t                cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n\t\t            actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n\t\t            target: \"wholeday\"\n\n\t\t            },\t\n\n\t\t            { target: \".nomatch\" }\n                \n                ]\n\t        },\n\n            states: \n\n            {\n                prompt: \n                \n                {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n\t\t            on: { ENDSPEECH: \"ask\" }\n                },\n\t\t        ask: \n                \n                {\n\t\t            entry: listen()\n\t            },\n\n\t\t        nomatch: \n                \n                {\n\t\t            entry: say(\"Sorry I don't know which day are you talking about\"),\n\t\t            on: { ENDSPEECH: \"prompt\" }\n\t            }\t     \n            }\n        },\n\n\n\t    wholeday: \n        \n        {\n\t\t        initial: \"prompt\",\n\t\t        on: \n                \n                {\n\t                RECOGNISED: \n                    \n                    [\n                        {cond: (context) => grammar2[context.recResult] === true,\n                        target: \"timefixed\"},\n\n\t\t\t\t\t\t{cond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\t\ttarget: \"settime\"},\n\n\t                { target: \".nomatch\" }\n                    ]\n\t\t        \n                },\n\n\n\t\t        states: \n                \n                {\n\t\t            prompt: \n                    \n                    {\n\t\t\t            entry: send((context) => ({\n\t\t\t                type: \"SPEAK\",\n\t\t\t\t\t\t    value: `Good. Appointment is on ${context.day}. Will it take the whole day?`\n\t\t\t            })),\n\t\t\t            on: { ENDSPEECH: \"ask\" }\n\t\t            },\n\n\t\t            ask: {\n\t\t                entry: listen()\n\t\t            },\n\n\t\t            nomatch: \n\n                    {\n\t\t\t            entry: say(\"Please repeat it again\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t            }\n\t\t        }\t     \n        },\n\n\n            timefixed: \n            \n            {\n\t\t           initial: \"prompt\",\n\n\t               on: \n                   \n                   {\n\t\t               RECOGNISED: \n                       \n                       [\n                           {cond: (context) => grammar2[context.recResult] === true,\n\t\t\t               target: \"Finished\"},\n\t\t\t\t\t\t   {cond: (context) => grammar2[context.recResult] === false,\n                           target: \"who\"},\n\t\t                   { target: \".nomatch\" }\n                        ]\n\t\t            },\n\n\n\n\t\t            states: \n                    \n                    {\n\t\t                prompt: \n                        \n                        {\n\t\t\t                entry: send((context) => ({\n\t\t\t                    type: \"SPEAK\",\n\t\t\t\t\t\t\t\tvalue: `Good. Do you want to me create an appointment with ${context.person} on ${context.day}for the whole day?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\n\n\t\t                ask: \n                        \n                        {\n\t\t\t                entry: listen()\n\t\t                },\n\n\t\t                nomatch: \n                        \n                        {\n\t\t\t                entry: say(\"Please repeat it again\"),\n\t\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t                }\n                    }\n\t        },\n\n\t\t\tsettime: \n                \n                    {\n\n\t\t\t\t\t    initial: \"prompt\",\n\t\t\t\t\t    on: \n                    \n                    {\n\t\t\t\t\t\tRECOGNISED: \n                        [\n                            {\n\t\t\t\t\t\t\t\n                            cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n\t\t\t\t\t\t\tactions: assign((context) => { return { time: grammar[context.recResult].time }}),\n\t\t\t\t\t\t\ttarget: \"withtime\"\n\n\t\t\t\t\t\t    },\n\n\t\t\t\t\t\t    { target: \".nomatch\" }\n                        ]\n\t\t\t\t\t},\n\n\n\t\t\t\t\t    states: \n\n                        {\n\t\t\t\t\t\t    prompt: { entry: say(\"What time is your meeting\"),\n\t\t\t\t\t\t    on: { ENDSPEECH: \"ask\" }\n\t\t\t\t\t    },\n\n\t\t\t\t\task: \n                    {\n\t\t\t\t\t\tentry: listen()\n\t\t\t\t    },\n\n\t\t\t\tnomatch:\n                \n                {\n\t\t\t\t\tentry: say(\"Please repeat it again\"),\n\t\t\t\t\ton: { ENDSPEECH: \"prompt\" }\n\t\t\t\t}\n\t\t\t            }\n\t\t                \n                    },\n\n\n\t\twithtime: \n        \n        {\n\t\t\tinitial: \"prompt\",\n\t\t\ton: \n            \n            {\n\t\t\t\tRECOGNISED: \n                [\n                    \n                    { \n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\n\t\t\t\t\ttarget: \"Finished\"\n                    },\n\t\t\t\t\t{\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\ttarget: \"who\"\n\t\t\t\t    },\n\t\t\t\t    { target: \".nomatch\" }\n                ]\n\t\t\t},\n\n\n\t\t\t states: \n             \n            {\n\t\t\t\t prompt: \n                 \n                 {\n\t\t\t\t\t entry: send((context) => ({\n\t\t\t\t\t\t type: \"SPEAK\",\n\t\t\t\t\t\t value: `Good. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n\t\t\t\t\t })),\n\t\t\t\t\t on: { ENDSPEECH: \"ask\" }\n\t\t\t\t },\n\n\t\t\t\t ask: \n                {\n\t\t\t\t\t entry: listen()\n\t\t\t\t},\n\n\t\t\t\t nomatch: \n                 \n                 {\n\t\t\t\t\t entry: say(\"Please repeat it again\"),\n\t\t\t\t\t on: { ENDSPEECH: \"prompt\" }\n\t\t\t\t }\n\t\t\t}\n\t\t},\n\n                Finished: \n                \n                {\n\t\t                 initial: \"prompt\",\n\t\t                 on: { ENDSPEECH: \"init\" },\n\t\t                 states: \n                        {\n\t\t\t                 prompt: { entry: say(\"Your appointment has been created!\")},\n\t                    }\n\t            }\t    \n    }\n\n})*/\n// new code for lab 4\n\n\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          target: \"query\",\n          cond: context => !(context.recResult in commands),\n          actions: assign(context => {\n            return {\n              option: context.recResult\n            };\n          })\n        }, {\n          target: \"help1\",\n          cond: context => context.recResult in commands\n        }],\n        MAXSPEECH: [{\n          target: \"welcome.maxspeech1\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"What would you like to do?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        maxspeech1: _objectSpread({}, speech(\"You have not responded. What is it you would like to do?\")),\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000\n          })]\n        }\n      }\n    },\n    help1: _objectSpread({}, helpm(\"Please tell me what you want to do.\", \"welcome\")),\n    query: {\n      invoke: {\n        id: \"rasa\",\n        src: (context, event) => nluRequest(context.option),\n        onDone: {\n          target: \"menu\",\n          actions: [assign((context, event) => {\n            return {\n              option: event.data.intent.name\n            };\n          }), (context, event) => console.log(event.data)] //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n        },\n        onError: {\n          target: \"welcome\",\n          actions: (context, event) => console.log(event.data)\n        }\n      }\n    },\n    menu: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: [{\n          target: \"todo\",\n          cond: context => context.option === \"todo\"\n        }, {\n          target: \"timer\",\n          cond: context => context.option === \"timer\"\n        }, {\n          target: \"appointment\",\n          cond: context => context.option === \"appointment\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. I understand\\uFF0Cyou want a \".concat(context.option, \".\")\n          }))\n        }\n        /*            nomatch: {\n                       entry: say(\"Sorry, I don\"t understand\"),\n                       on: { ENDSPEECH: \"prompt\" }\n           } */\n\n      }\n    },\n    todo: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Let\\\"s create a to do item.\"\n          }))\n        }\n      }\n    },\n    timer: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Let\\\"s create a timer\"\n          }))\n        }\n      }\n    },\n    appointment: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"who\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Let\\\"s create an appointment\"\n          }))\n        }\n      }\n    },\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"help2\",\n          cond: context => context.recResult in commands\n        }],\n        MAXSPEECH: [{\n          target: \"who.maxspeech2\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech2: _objectSpread({}, speech(\"You did not respond. Which person are you meeting with?\")),\n        nomatch: {\n          entry: say(\"Sorry, I don't know them\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    help2: _objectSpread({}, helpm(\"Please tell me the name\", \"who\")),\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"wholeday\"\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"help3\",\n          cond: context => context.recResult in commands\n        }],\n        MAXSPEECH: [{\n          target: \"day.maxspeech3\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \". What day is your meeting on?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech3: _objectSpread({}, speech(\"You did not respond, state a day\")),\n        nomatch: {\n          entry: say(\"Sorry, I don't know which day you are talking about.\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    help3: _objectSpread({}, helpm(\"Please tell me the day\", \"day\")),\n    wholeday: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === true,\n          target: \"notime\"\n        }, {\n          cond: context => grammar2[context.recResult] === false,\n          target: \"whattime\"\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"help4\",\n          cond: context => context.recResult in commands\n        }],\n        MAXSPEECH: [{\n          target: \"wholeday.maxspeech4\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Good, on \".concat(context.day, \". Will it take the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech4: _objectSpread({}, speech(\"You did not respond, make a decision\")),\n        nomatch: {\n          entry: say(\"Please repeat it again\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    help4: _objectSpread({}, helpm(\"Please tell me the decision\", \"wholeday\")),\n    notime: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === true,\n          target: \"Finished\"\n        }, {\n          cond: context => grammar2[context.recResult] === false,\n          target: \"who\"\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"help5\",\n          cond: context => context.recResult in commands\n        }],\n        MAXSPEECH: [{\n          target: \"notime.maxspeech5\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Great. Do you want to me create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech5: _objectSpread({}, speech(\"You did not respond, please confirm.\")),\n        nomatch: {\n          entry: say(\"Please, repeat it again\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    help5: _objectSpread({}, helpm(\"Please confirm it\", \"notime\")),\n    whattime: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }),\n          target: \"withtime\"\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"help6\",\n          cond: context => context.recResult in commands\n        }],\n        MAXSPEECH: [{\n          target: \"whattime.maxspeech6\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"What time is your meeting\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech6: _objectSpread({}, speech(\"You did not respond, state a time\")),\n        nomatch: {\n          entry: say(\"Please repeat it again\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    help6: _objectSpread({}, helpm(\"Please tell me the time\", \"whattime\")),\n    withtime: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === true,\n          target: \"Finished\"\n        }, {\n          cond: context => grammar2[context.recResult] === false,\n          target: \"who\"\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"help7\",\n          cond: context => context.recResult in commands\n        }],\n        MAXSPEECH: [{\n          target: \"withtime.maxspeech7\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Great. Do you want to me create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech7: _objectSpread({}, speech(\"You did not respond, please confirm\")),\n        nomatch: {\n          entry: say(\"Please repeat it again\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    help7: _objectSpread({}, helpm(\"Please confirm\", \"withtime\")),\n    Finished: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Ok, great! Your appointment has been created!\")\n        }\n      }\n    }\n  }\n}; //the api for rasa to use\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\"; // have to set up temporary permission/access for the robot to not give error: \"Unexpected token S in JSON at position 0\"\n\nconst rasaurl = \"https://intents-oyousuf.herokuapp.com/model/parse\";\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: \"POST\",\n  headers: {\n    \"Origin\": \"http://localhost:3000/react-xstate-colourchanger\"\n  },\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());","map":{"version":3,"sources":["C:/Users/User/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","actions","cancel","say","text","_context","type","value","listen","helpm","prompt","name","entry","on","ENDSPEECH","speech","grammar","person","day","time","grammar2","commands","grammar3","promptAsk","initial","states","ask","dmMachine","init","CLICK","welcome","RECOGNISED","target","cond","context","recResult","option","MAXSPEECH","hist","maxspeech1","delay","help1","query","invoke","id","src","event","nluRequest","onDone","data","intent","console","log","onError","menu","todo","timer","appointment","who","maxspeech2","nomatch","help2","maxspeech3","help3","wholeday","maxspeech4","help4","notime","maxspeech5","help5","whattime","maxspeech6","help6","withtime","maxspeech7","help7","Finished","proxyurl","rasaurl","fetch","Request","method","headers","body","then","json"],"mappings":"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,CADN;AAEJG,QAAAA,EAAE,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb;AAFA,OADJ;AAKJY,MAAAA,GAAG,EAAE;AACDd,QAAAA,KAAK,EAAEb,IAAI,CAAC,QAAD;AADV;AALD;AAFJ,GAAR;AAWH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,OAAO,MAAM4B,SAAmD,GAAI;AAChEH,EAAAA,OAAO,EAAE,MADuD;AAEhEC,EAAAA,MAAM,EAAE;AACJG,IAAAA,IAAI,EAAE;AACFf,MAAAA,EAAE,EAAE;AACAgB,QAAAA,KAAK,EAAE;AADP;AADF,KADF;AAMVC,IAAAA,OAAO,EAAE;AACCN,MAAAA,OAAO,EAAE,QADV;AAECX,MAAAA,EAAE,EAAE;AACAk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","sourcesContent":["import { MachineConfig, Machine, send, Action, assign } from \"xstate\";\nimport \"./styles.scss\";\n// new stuff\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\n//new\n\n//new\nconst {cancel}=actions\n//new\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send(\"LISTEN\")\n}\n\n//new\nfunction helpm(prompt: string, name: string): MachineConfig<SDSContext, any, SDSEvent>{\n    return ({entry: say(prompt),\n             on: {ENDSPEECH: name+\".hist\" }})\n}\n\nfunction speech(prompt: string): MachineConfig<SDSContext, any, SDSEvent>{\n    return ({entry: say(prompt),\n             on: {ENDSPEECH: \"ask\"\n            }})\n}\n//new\n\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } \n} = {\n    // Here are some common names in English that I found are easier for the robot to understand.\n    \"John\": { person: \"John Appleseed\" },\n    \"Jack\": { person: \"Jack Orangeseed\" },\n    \"David\": { person: \"David Grapeseed\" },\n    \"Robert\": { person: \"Robert Watermelonseed\" },\n    \"Jennifer\": { person: \"Jennifer Bananaseed\" },\n    \"Jessica\": { person: \"Jessica Pineappleseed\" },\n\n    \"john\": { person: \"john appleseed\" },\n    \"jack\": { person: \"jack orangeseed\" },\n    \"david\": { person: \"david grapeseed\" },\n    \"robert\": { person: \"robert watermelonseed\" },\n    \"jennifer\": { person: \"jennifer bananaseed\" },\n    \"jessica\": { person: \"jessica pineappleseed\" },\n\n    // Here are names of friends I tried at first, but because they're non-English it was incredibly hard to move forward with the robot so I mad the previously mentioned English names above.\n    \"Zhe\": { person: \"Zhe Han\" },\n    \"Siyi\": { person: \"Siyi Gu\" },\n    \"Jae Eun\": { person: \"Jae Eun Hong\" },\n    \"Oreen\": { person: \"Oreen Yousuf\" },\n    \"Angeliki\": { person: \"Angeliki Zagoura\" },\n    \"Flor\": { person: \"Flor Ortiz\" },\n    \"Emma\": { person: \"Emma Wallerö\"},\n\n    \"zhe\": { person: \"zhe han\" },\n    \"siyi\": { person: \"siyi gu\" },\n    \"jae eun\": { person: \"jae eun hong\" },\n    \"oreen\": { person: \"oreen yousuf\" },\n    \"angeliki\": { person: \"angeliki zagoura\" },\n    \"flor\": { person: \"flor ortiz\" },\n    \"emma\": { person: \"emma wallerö\" },\n\n    //Days of the week with alternating potential utterances ('on')\n    \"Monday\": { day: \"Monday\" },\n    \"on Monday\": { day: \"Monday\" },\n    \"Tuesday\": { day: \"Tuesday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"Friday\": { day: \"Friday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"Sunday\": { day: \"Sunday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n\n    //times with different utterances and spellings/numberings to capture all ways the robot could interpret it\n    \"at one\": { time: \"01:00\" },\n    \"at two\": { time: \"02:00\" },\n    \"at three\": { time: \"03:00\" },\n    \"at four\": { time: \"04:00\" },\n    \"at five\": { time: \"05:00\" },\n    \"at six\": { time: \"06:00\" },\n    \"at seven\": { time: \"07:00\" },\n    \"at eight\": { time: \"08:00\" },\n    \"at nine\": { time: \"09:00\" },\n    \"at ten\": { time: \"10:00\" },\n    \"at eleven\": { time: \"11:00\" },\n    \"at twelve\": { time: \"12:00\" },\n    \"at thirteen\": { time: \"13:00\" },\n    \"at fourteen\": { time: \"14:00\" },\n    \"at fifteen\": { time: \"15:00\" },\n    \"at sixteen\": { time: \"16:00\" },\n    \"at seventeen\": { time: \"17:00\" },\n    \"at eighteen\": { time: \"18:00\" },\n    \"at nineteen\": { time: \"19:00\" },\n    \"at twenty\": { time: \"20:00\" },\n    \"at twenty one\": { time: \"21:00\" },\n    \"at twenty two\": { time: \"22:00\" },\n    \"at twenty three\": { time: \"23:00\" },\n    \"at twenty four\": { time: \"00:00\" },\n\n    \"one\": { time: \"01:00\" },\n    \"two\": { time: \"02:00\" },\n    \"three\": { time: \"03:00\" },\n    \"four\": { time: \"04:00\" },\n    \"five\": { time: \"05:00\" },\n    \"six\": { time: \"06:00\" },\n    \"seven\": { time: \"07:00\" },\n    \"eight\": { time: \"08:00\" },\n    \"nine\": { time: \"09:00\" },\n    \"ten\": { time: \"10:00\" },\n    \"eleven\": { time: \"11:00\" },\n    \"twelve\": { time: \"12:00\" },\n    \"thirteen\": { time: \"13:00\" },\n    \"fourteen\": { time: \"14:00\" },\n    \"fifteen\": { time: \"15:00\" },\n    \"sixteen\": { time: \"16:00\" },\n    \"seventeen\": { time: \"17:00\" },\n    \"eighteen\": { time: \"18:00\" },\n    \"nineteen\": { time: \"19:00\" },\n    \"twenty\": { time: \"20:00\" },\n    \"twenty one\": { time: \"21:00\" },\n    \"twenty two\": { time: \"22:00\" },\n    \"twenty three\": { time: \"23:00\" },\n    \"twenty four\": { time: \"00:00\" },\n\n    \"at 1\": { time: \"01:00\" },\n    \"at 2\": { time: \"02:00\" },\n    \"at 3\": { time: \"03:00\" },\n    \"at 4\": { time: \"04:00\" },\n    \"at 5\": { time: \"05:00\" },\n    \"at 6\": { time: \"06:00\" },\n    \"at 7\": { time: \"07:00\" },\n    \"at 8\": { time: \"08:00\" },\n    \"at 9\": { time: \"09:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"at 13\": { time: \"13:00\" },\n    \"at 14\": { time: \"14:00\" },\n    \"at 15\": { time: \"15:00\" },\n    \"at 16\": { time: \"16:00\" },\n    \"at 17\": { time: \"17:00\" },\n    \"at 18\": { time: \"18:00\" },\n    \"at 19\": { time: \"19:00\" },\n    \"at 20\": { time: \"20:00\" },\n    \"at 21\": { time: \"21:00\" },\n    \"at 22\": { time: \"22:00\" },\n    \"at 23\": { time: \"23:00\" },\n    \"at 24\": { time: \"00:00\" },\n\n    \"1\": { time: \"01:00\" },\n    \"2\": { time: \"02:00\" },\n    \"3\": { time: \"03:00\" },\n    \"4\": { time: \"04:00\" },\n    \"5\": { time: \"05:00\" },\n    \"6\": { time: \"06:00\" },\n    \"7\": { time: \"07:00\" },\n    \"8\": { time: \"08:00\" },\n    \"9\": { time: \"09:00\" },\n    \"10\": { time: \"10:00\" },\n    \"11\": { time: \"11:00\" },\n    \"12\": { time: \"12:00\" },\n    \"13\": { time: \"13:00\" },\n    \"14\": { time: \"14:00\" },\n    \"15\": { time: \"15:00\" },\n    \"16\": { time: \"16:00\" },\n    \"17\": { time: \"17:00\" },\n    \"18\": { time: \"18:00\" },\n    \"19\": { time: \"19:00\" },\n    \"20\": { time: \"20:00\" },\n    \"21\": { time: \"21:00\" },\n    \"22\": { time: \"22:00\" },\n    \"23\": { time: \"23:00\" },\n    \"24\": { time: \"00:00\" }\n}\n\n//second grammar for trues and falses\nconst grammar2 : { [index: string]: boolean } = \n    {\"yes\": true,\n    \"Yes\": true,\n    \"yes of course\": true,\n    \"Yes of course\": true,\n    \"sure\": true,\n    \"Sure\": true,\n    \"absolutely\": true,\n    \"Absolutely\": true,\n    \"perfect\": true,\n    \"Perfect\": true,\n    \"no\": false,\n    \"No\": false,\n    \"no way\": false,\n    \"No way\": false\n}\n\n//new\nconst commands = {\"help\": \"h\", \"Help\": \"H\"}\n\nconst grammar3 ={\"count\": 0}\n//new\n\n\n/*function promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: \"prompt\",\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: \"ask\" }\n            },\n            ask: {\n                entry: send(\"LISTEN\")\n            },\n        }})\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n   \n    initial: \"init\",\n    states: {\n        init: {\n            on: {\n                CLICK: \"welcome\"\n            }            \n        },        \n\n        welcome: {\n            on: {\n                RECOGNISED: {\n                    target: \"query\",\n                    actions: assign((context) => { return { option: context.recResult } }),\n                }    \n            },\n                    ...promptAndAsk(\"What would you like to do? Your options are appointment, to do item or timer\")\n        },\n\n\n        query: {\n            invoke: {\n                id: \"rasa\",\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: \"menu\",\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data)]\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n                },\n                onError: {\n                    target: \"welcome\",\n                    actions: (context, event) => console.log(event.data)\n                }\n            }\n        },\n\n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: \"todo\", cond: (context) => context.option === \"todo\" },\n                    { target: \"timer\", cond: (context) => context.option === \"timer\" },\n                    { target: \"appointment\", cond: (context) => context.option === \"appointment\" }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I understand.`\n                    })),\n        }, \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a timer`\n                    }))\n                }}\n        },\n        \n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create an appointment`\n                    }))\n                }}\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n\t\t\t\t\tcond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I do not know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"wholeday\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`,\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I do not understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        wholeday: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === false),\n                    target: \"time\"\n                },\n\t\t{cond: (context) => (grammar2[context.recResult] === true),\n\t\ttarget: \"confirm_meeting_whole_day\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. Will it take the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry I do not understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t            }\n                }\n\t},\n        time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirm_time\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.day}. What time is your meeting?`,\n                    \n                    })),\n            on: { ENDSPEECH: \"ask\" }\n                },\n        ask: {\n            entry: listen()\n                },\n        nomatch: {\n            entry: say(\"Sorry I do not know that\"),\n        on: { ENDSPEECH: \"prompt\" }\n                }\n                }\n        },\n        confirm_meeting_whole_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === false),\n                    target: \"init\"\n                },\n\t\t{cond: (context) => (grammar2[context.recResult] === true),\n\t\ttarget: \"confirmed\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry I do not understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t           }\n                }\n\n\t},\n    confirm_time: {\n        initial: \"prompt\",\n        on:  {\n            RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === false),\n                target: \"who\"\n            },\n    {cond: (context) => (grammar2[context.recResult] === true),\n    target: \"confirmed\"\n    },\n            { target: \".nomatch\" }]\n        },\n        states: {\n            prompt: {\n               entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                })),\n        on: { ENDSPEECH: \"ask\" }\n            },\n    ask: {\n         entry: listen()\n        },\n    nomatch: {\n        entry: say(\"Sorry I do not understand\"),\n    on: { ENDSPEECH: \"prompt\" }\n           }\n            },\n        },\n    confirmed: {\n        initial: \"prompt\",\n        on: { ENDSPEECH: \"init\" },\n        states: {\n            prompt: {\n                entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Your appointment has been created!`\n                }))\n            },\n    }\n    }\n    }})\n*/\n\n\nfunction promptAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN')\n            },\n        }})\n}\n\n/* //lab 2 base code\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = \n\n({\n    initial: 'init',\n    states: \n    {\n        init:{\n            on: {\n                CLICK: 'welcome'\n                }\n             },\n        welcome: \n        {\n            on: {\n                RECOGNISED: {\n                    target: \"query\",\n                    actions: assign((context) => { return { option: context.recResult } }),\n                }    \n            },\n                    ...promptAsk(\"What would you like to do?\")\n        },\n\n        query: \n        {\n            invoke: {\n            \n            id: 'rasa',\n            src: (context, event) => nluRequest(context.option),\n            onDone: {\n                target: 'menu',\n                actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                (context: SDSContext, event: any) => console.log(event.data)]\n            },\n            onError: {\n                target: 'welcome',\n                actions: (context, event) => console.log(event.data)\n\n                }\n            }\n        },\n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: 'todo', cond: (context) => context.option === 'todo' },\n                    { target: 'timer', cond: (context) => context.option === 'timer' },\n                    { target: 'appointment', cond: (context) => context.option === 'appointment' }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I see.`\n                    })),\n        },\n                 nomatch: {\n                    entry: say(\"Sorry, I don't understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create a timer`\n                    }))\n                }}\n        },\n        \n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create an appointment`\n                    }))\n                }}\n        },\n\n        who: \n        \n        {\n            initial: \"prompt\",\n            on: \n            {\n                RECOGNISED: \n                [\n                    {\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n                    },\n                { target: \".nomatch\" }\n                ]\n            },\n\n            states: \n            \n            {\n                prompt: \n                \n                {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                \n                ask: \n                \n                {\n                    entry: listen()\n                },\n                \n                nomatch: \n                \n                {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n\n        day: \n        \n        {\n            initial: \"prompt\",\n            on: \n            \n            {\n\t            RECOGNISED: \n                [\n                    {\n\t                cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n\t\t            actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n\t\t            target: \"wholeday\"\n\n\t\t            },\t\n\n\t\t            { target: \".nomatch\" }\n                \n                ]\n\t        },\n\n            states: \n\n            {\n                prompt: \n                \n                {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n\t\t            on: { ENDSPEECH: \"ask\" }\n                },\n\t\t        ask: \n                \n                {\n\t\t            entry: listen()\n\t            },\n\n\t\t        nomatch: \n                \n                {\n\t\t            entry: say(\"Sorry I don't know which day are you talking about\"),\n\t\t            on: { ENDSPEECH: \"prompt\" }\n\t            }\t     \n            }\n        },\n\n\n\t    wholeday: \n        \n        {\n\t\t        initial: \"prompt\",\n\t\t        on: \n                \n                {\n\t                RECOGNISED: \n                    \n                    [\n                        {cond: (context) => grammar2[context.recResult] === true,\n                        target: \"timefixed\"},\n\n\t\t\t\t\t\t{cond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\t\ttarget: \"settime\"},\n\n\t                { target: \".nomatch\" }\n                    ]\n\t\t        \n                },\n\n\n\t\t        states: \n                \n                {\n\t\t            prompt: \n                    \n                    {\n\t\t\t            entry: send((context) => ({\n\t\t\t                type: \"SPEAK\",\n\t\t\t\t\t\t    value: `Good. Appointment is on ${context.day}. Will it take the whole day?`\n\t\t\t            })),\n\t\t\t            on: { ENDSPEECH: \"ask\" }\n\t\t            },\n\n\t\t            ask: {\n\t\t                entry: listen()\n\t\t            },\n\n\t\t            nomatch: \n\n                    {\n\t\t\t            entry: say(\"Please repeat it again\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t            }\n\t\t        }\t     \n        },\n\n\n            timefixed: \n            \n            {\n\t\t           initial: \"prompt\",\n\n\t               on: \n                   \n                   {\n\t\t               RECOGNISED: \n                       \n                       [\n                           {cond: (context) => grammar2[context.recResult] === true,\n\t\t\t               target: \"Finished\"},\n\t\t\t\t\t\t   {cond: (context) => grammar2[context.recResult] === false,\n                           target: \"who\"},\n\t\t                   { target: \".nomatch\" }\n                        ]\n\t\t            },\n\n\n\n\t\t            states: \n                    \n                    {\n\t\t                prompt: \n                        \n                        {\n\t\t\t                entry: send((context) => ({\n\t\t\t                    type: \"SPEAK\",\n\t\t\t\t\t\t\t\tvalue: `Good. Do you want to me create an appointment with ${context.person} on ${context.day}for the whole day?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\n\n\t\t                ask: \n                        \n                        {\n\t\t\t                entry: listen()\n\t\t                },\n\n\t\t                nomatch: \n                        \n                        {\n\t\t\t                entry: say(\"Please repeat it again\"),\n\t\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t                }\n                    }\n\t        },\n\n\t\t\tsettime: \n                \n                    {\n\n\t\t\t\t\t    initial: \"prompt\",\n\t\t\t\t\t    on: \n                    \n                    {\n\t\t\t\t\t\tRECOGNISED: \n                        [\n                            {\n\t\t\t\t\t\t\t\n                            cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n\t\t\t\t\t\t\tactions: assign((context) => { return { time: grammar[context.recResult].time }}),\n\t\t\t\t\t\t\ttarget: \"withtime\"\n\n\t\t\t\t\t\t    },\n\n\t\t\t\t\t\t    { target: \".nomatch\" }\n                        ]\n\t\t\t\t\t},\n\n\n\t\t\t\t\t    states: \n\n                        {\n\t\t\t\t\t\t    prompt: { entry: say(\"What time is your meeting\"),\n\t\t\t\t\t\t    on: { ENDSPEECH: \"ask\" }\n\t\t\t\t\t    },\n\n\t\t\t\t\task: \n                    {\n\t\t\t\t\t\tentry: listen()\n\t\t\t\t    },\n\n\t\t\t\tnomatch:\n                \n                {\n\t\t\t\t\tentry: say(\"Please repeat it again\"),\n\t\t\t\t\ton: { ENDSPEECH: \"prompt\" }\n\t\t\t\t}\n\t\t\t            }\n\t\t                \n                    },\n\n\n\t\twithtime: \n        \n        {\n\t\t\tinitial: \"prompt\",\n\t\t\ton: \n            \n            {\n\t\t\t\tRECOGNISED: \n                [\n                    \n                    { \n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\n\t\t\t\t\ttarget: \"Finished\"\n                    },\n\t\t\t\t\t{\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\ttarget: \"who\"\n\t\t\t\t    },\n\t\t\t\t    { target: \".nomatch\" }\n                ]\n\t\t\t},\n\n\n\t\t\t states: \n             \n            {\n\t\t\t\t prompt: \n                 \n                 {\n\t\t\t\t\t entry: send((context) => ({\n\t\t\t\t\t\t type: \"SPEAK\",\n\t\t\t\t\t\t value: `Good. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n\t\t\t\t\t })),\n\t\t\t\t\t on: { ENDSPEECH: \"ask\" }\n\t\t\t\t },\n\n\t\t\t\t ask: \n                {\n\t\t\t\t\t entry: listen()\n\t\t\t\t},\n\n\t\t\t\t nomatch: \n                 \n                 {\n\t\t\t\t\t entry: say(\"Please repeat it again\"),\n\t\t\t\t\t on: { ENDSPEECH: \"prompt\" }\n\t\t\t\t }\n\t\t\t}\n\t\t},\n\n                Finished: \n                \n                {\n\t\t                 initial: \"prompt\",\n\t\t                 on: { ENDSPEECH: \"init\" },\n\t\t                 states: \n                        {\n\t\t\t                 prompt: { entry: say(\"Your appointment has been created!\")},\n\t                    }\n\t            }\t    \n    }\n\n})*/\n\n// new code for lab 4\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\t\twelcome: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    target: \"query\",\n                    cond: (context) => !(context.recResult in commands),\n                    actions: assign((context) => { return { option: context.recResult } }),\n                },\n                {target: \"help1\",\n                cond: (context) => context.recResult in commands }],\n                MAXSPEECH: [{target:\"welcome.maxspeech1\",\n                cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}]\n            },\n            states: {        \n                prompt: {\n                entry: say(\"What would you like to do?\"),\n                on: { ENDSPEECH: \"ask\" }\n            },\n            hist: {type: \"history\"},\n               maxspeech1: {\n                ...speech(\"You have not responded. What is it you would like to do?\")\n        },  \n            ask: {\n                entry: [listen(), send('MAXSPEECH', {delay: 5000})]\n            }\n        }   \n    }, \n    \n        help1:{\n            ...helpm(\"Please tell me what you want to do.\",\"welcome\")\n        },\n\t\tquery: {\n            invoke: {\n                id: \"rasa\",\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: \"menu\",\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data)]\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n                },\n                onError: {\n                    target: \"welcome\",\n                    actions: (context, event) => console.log(event.data)\n                }\n            }\n        },\n      \n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: \"todo\", cond: (context) => context.option === \"todo\" },\n                    { target: \"timer\", cond: (context) => context.option === \"timer\" },\n                    { target: \"appointment\", cond: (context) => context.option === \"appointment\" }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I understand，you want a ${context.option}.`\n                    })),\n        },\n     /*            nomatch: {\n                    entry: say(\"Sorry, I don\"t understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } */ \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a to do item.`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a timer`\n                    }))\n                }}\n        },\n        \n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create an appointment`\n                    }))\n                }}\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" ,\n                 cond: (context) => !(context.recResult in commands),\n                 actions: cancel(\"maxsp\")},\n                 {target: \"help2\",\n                 cond: (context) => context.recResult in commands}],\n                 MAXSPEECH: [{target:\"who.maxspeech2\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                hist: {type: \"history\"},\n                ask: {\n                    entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n                },\n                maxspeech2: {\n                    ...speech(\"You did not respond. Which person are you meeting with?\")\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know them\"),\n                    on: { ENDSPEECH:  \"prompt\" }\n                \n                }\n             }\n        },\n        help2:{\n            ...helpm(\"Please tell me the name\",\"who\")\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n\t            RECOGNISED: [{\n\t                cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n\t\t            actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n\t\t            target: \"wholeday\"\n\n\t\t        },\t\n\t\t        { target: \".nomatch\" ,\n                cond: (context) => !(context.recResult in commands),\n                actions: cancel(\"maxsp\")},\n                {target: \"help3\",\n                cond: (context) => context.recResult in commands}],\n                MAXSPEECH: [{target:\"day.maxspeech3\",\n                cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t        },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. What day is your meeting on?`\n                    })),\n\t\t            on: { ENDSPEECH: \"ask\" }\n                },\n                hist: {type: \"history\"},\n\t\t        ask: {\n\t\t            entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t            },\n                maxspeech3: {\n                 ...speech(\"You did not respond, state a day\")\n              },\n\t\t        nomatch: {\n\t\t            entry: say(\"Sorry, I don't know which day you are talking about.\"),\n\t\t            on: { ENDSPEECH: \"prompt\" }\n\t            }\t     \n            }\n        },\n        help3:{\n            ...helpm(\"Please tell me the day\",\"day\")\n        },\n        \n\t    wholeday: {\n\t\t        initial: \"prompt\",\n\t\t        on: {\n\t                RECOGNISED: [{\n\t\t\t            cond: (context) => grammar2[context.recResult] === true,\n                        target: \"notime\"},\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\t\ttarget: \"whattime\"\n\n\t\t            },\n\t                { target: \".nomatch\",\n                    cond: (context) => !(context.recResult in commands),\n                    actions: cancel(\"maxsp\")},\n                    {target: \"help4\",\n                    cond: (context) => context.recResult in commands}],\n                    MAXSPEECH: [{target:\"wholeday.maxspeech4\",\n                    cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t\t        },\n\t\t        states: {\n\t\t            prompt: {\n\t\t\t            entry: send((context) => ({\n\t\t\t                type: \"SPEAK\",\n\t\t\t\t\t\t    value: `Good, on ${context.day}. Will it take the whole day?`\n\t\t\t            })),\n\t\t\t            on: { ENDSPEECH: \"ask\" }\n\t\t            },\n                    hist: {type: \"history\"},\n\t\t            ask: {\n\t\t                entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t            },\n                    maxspeech4: {\n                      ...speech(\"You did not respond, make a decision\")\n                    },\n\t\t            nomatch: {\n\t\t\t            entry: say(\"Please repeat it again\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t            }\n\t\t        }\t     \n            },\n            help4:{\n                ...helpm(\"Please tell me the decision\",\"wholeday\")\n            },\n            notime: {\n\t\t           initial: \"prompt\",\n\t               on: {\n\t\t               RECOGNISED: [{ \n\t\t\t               cond: (context) => grammar2[context.recResult] === true,\n\t\t\t               target: \"Finished\"},\n\t\t\t\t\t\t   {\n\t\t\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n                           target: \"who\"\n\t\t\t\t\t\t   \n\t\t                },\n\t\t                { target: \".nomatch\",\n                        cond: (context) => !(context.recResult in commands),\n                        actions: cancel(\"maxsp\")},\n                        {target: \"help5\",\n                        cond: (context) => context.recResult in commands}],\n                        MAXSPEECH: [{target:\"notime.maxspeech5\",\n                        cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}]  \n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t\t                entry: send((context) => ({\n\t\t\t                    type: \"SPEAK\",\n\t\t\t\t\t\t\t\tvalue: `Great. Do you want to me create an appointment with ${context.person} on ${context.day} for the whole day?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n\t\t                },\n                        hist: {type: \"history\"},\n\t\t                ask: {\n\t\t\t                entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t                },\n                        maxspeech5: {\n                             ...speech(\"You did not respond, please confirm.\")},\n\t\t                nomatch: {\n\t\t\t                entry: say(\"Please, repeat it again\"),\n\t\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t                }\n                    }\n\t            },\n                help5:{\n                    ...helpm(\"Please confirm it\",\"notime\")\n                },\n\t\t\t\twhattime: {\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tRECOGNISED: [{\n\t\t\t\t\t\t\tcond: (context) => \"time\" in (grammar[context.recResult] || {}),\n\t\t\t\t\t\t\tactions: assign((context) => { return { time: grammar[context.recResult].time } }),\n\t\t\t\t\t\t\ttarget: \"withtime\"\n\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ target: \".nomatch\" ,\n                        cond: (context) => !(context.recResult in commands),\n                        actions: cancel(\"maxsp\")},\n                        {target: \"help6\",\n                        cond: (context) => context.recResult in commands}],\n                        MAXSPEECH: [{target:\"whattime.maxspeech6\",\n                        cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}]  \n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: { entry: say(\"What time is your meeting\"),\n\t\t\t\t\t\ton: { ENDSPEECH: \"ask\" }\n\t\t\t\t\t},\n                    hist: {type: \"history\"},\n\t\t\t\t\task: {\n\t\t\t\t\t\tentry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t\t\t},\n                maxspeech6: {\n                  ...speech(\"You did not respond, state a time\")\n                },\n\t\t\t\tnomatch: {\n\t\t\t\t\tentry: say(\"Please repeat it again\"),\n\t\t\t\t\ton: { ENDSPEECH: \"prompt\" }\n\t\t\t\t}\n\t\t\t}\n\t\t},\n        help6:{\n            ...helpm(\"Please tell me the time\",\"whattime\")\n        },\n        \n\t\twithtime: {\n\t\t\tinitial: \"prompt\",\n\t\t\ton: {\n\t\t\t\tRECOGNISED: [{ \n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\n\t\t\t\t\ttarget: \"Finished\"},\n\t\t\t\t\t{\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\ttarget: \"who\"\n\n\t\t\t\t },\n\t\t\t\t { target: \".nomatch\",\n                 cond: (context) => !(context.recResult in commands),\n                 actions: cancel(\"maxsp\")},\n                 {target: \"help7\",\n                 cond: (context) => context.recResult in commands}],\n                 MAXSPEECH: [{target:\"withtime.maxspeech7\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t\t\t },\n\t\t\t states: {\n\t\t\t\t prompt: {\n\t\t\t\t\t entry: send((context) => ({\n\t\t\t\t\t\t type: \"SPEAK\",\n\t\t\t\t\t\t value: `Great. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n\t\t\t\t\t })),\n\t\t\t\t\t on: { ENDSPEECH: \"ask\" }\n\t\t\t\t },\n                 hist: {type: \"history\"},\n\t\t\t\t ask: {\n\t\t\t\t\t entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t\t\t },\n                maxspeech7: {\n                 ...speech(\"You did not respond, please confirm\")\n                },        \n\t\t\t\t nomatch: {\n\t\t\t\t\t entry: say(\"Please repeat it again\"),\n\t\t\t\t\t on: { ENDSPEECH: \"prompt\" }\n\t\t\t\t }\n\t\t\t }\n\t\t},\n        help7:{\n            ...helpm(\"Please confirm\",\"withtime\")\n        },\n        \n        Finished: {\n\t\t                 initial: \"prompt\",\n\t\t                 on: { ENDSPEECH: \"init\" },\n\t\t                 states: {\n\t\t\t                 prompt: { entry: say(\"Ok, great! Your appointment has been created!\")\n\t\t                    },\n\t                    }\n\t                }\t    \n                }\n            })\n\n\n\n\n//the api for rasa to use\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\"; // have to set up temporary permission/access for the robot to not give error: \"Unexpected token S in JSON at position 0\"\nconst rasaurl = \"https://intents-oyousuf.herokuapp.com/model/parse\"\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: \"POST\",\n        headers: { \"Origin\": \"http://localhost:3000/react-xstate-colourchanger\" },\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\n\n"]},"metadata":{},"sourceType":"module"}