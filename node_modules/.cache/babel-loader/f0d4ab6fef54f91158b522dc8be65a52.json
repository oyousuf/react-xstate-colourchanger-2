{"ast":null,"code":"import { __assign } from './_virtual/_tslib.js';\nimport { interpret } from 'xstate';\nimport { toSCXMLEvent, toEventObject, toObserver } from 'xstate/lib/utils';\nimport { getLazy, stringify, isReceiverEvent, parseReceiverEvent } from './utils.js';\nimport { createInspectMachine } from './inspectMachine.js';\nvar serviceMap = new Map();\n\nfunction createDevTools() {\n  var services = new Set();\n  var serviceListeners = new Set();\n  return {\n    services: services,\n    register: function register(service) {\n      services.add(service);\n      serviceMap.set(service.sessionId, service);\n      serviceListeners.forEach(function (listener) {\n        return listener(service);\n      });\n      service.onStop(function () {\n        services.delete(service);\n        serviceMap.delete(service.sessionId);\n      });\n    },\n    unregister: function unregister(service) {\n      services.delete(service);\n      serviceMap.delete(service.sessionId);\n    },\n    onRegister: function onRegister(listener) {\n      serviceListeners.add(listener);\n      services.forEach(function (service) {\n        return listener(service);\n      });\n      return {\n        unsubscribe: function unsubscribe() {\n          serviceListeners.delete(listener);\n        }\n      };\n    }\n  };\n}\n\nvar defaultInspectorOptions = {\n  url: 'https://statecharts.io/inspect',\n  iframe: function iframe() {\n    return document.querySelector('iframe[data-xstate]');\n  },\n  devTools: function devTools() {\n    var devTools = createDevTools();\n    globalThis.__xstate__ = devTools;\n    return devTools;\n  }\n};\n\nfunction inspect(options) {\n  var _a = __assign(__assign({}, defaultInspectorOptions), options),\n      iframe = _a.iframe,\n      url = _a.url,\n      devTools = _a.devTools;\n\n  var resolvedIframe = getLazy(iframe);\n\n  if (resolvedIframe === null) {\n    console.warn('No suitable <iframe> found to embed the inspector. Please pass an <iframe> element to `inspect(iframe)` or create an <iframe data-xstate></iframe> element.');\n    return undefined;\n  }\n\n  var resolvedDevTools = getLazy(devTools);\n  var inspectMachine = createInspectMachine(resolvedDevTools);\n  var inspectService = interpret(inspectMachine).start();\n  var listeners = new Set();\n  var sub = inspectService.subscribe(function (state) {\n    listeners.forEach(function (listener) {\n      return listener.next(state);\n    });\n  });\n  var targetWindow;\n  var client;\n\n  var messageHandler = function messageHandler(event) {\n    if (typeof event.data === 'object' && event.data !== null && 'type' in event.data) {\n      if (resolvedIframe && !targetWindow) {\n        targetWindow = resolvedIframe.contentWindow;\n      }\n\n      if (!client) {\n        client = {\n          send: function send(e) {\n            targetWindow.postMessage(e, url);\n          }\n        };\n      }\n\n      inspectService.send(__assign(__assign({}, event.data), {\n        client: client\n      }));\n    }\n  };\n\n  window.addEventListener('message', messageHandler);\n  window.addEventListener('unload', function () {\n    inspectService.send({\n      type: 'unload'\n    });\n  });\n\n  if (resolvedIframe === false) {\n    targetWindow = window.open(url, 'xstateinspector');\n  }\n\n  resolvedDevTools.onRegister(function (service) {\n    var _a;\n\n    inspectService.send({\n      type: 'service.register',\n      machine: stringify(service.machine),\n      state: stringify(service.state || service.initialState),\n      sessionId: service.sessionId,\n      id: service.id,\n      parent: (_a = service.parent) === null || _a === void 0 ? void 0 : _a.sessionId\n    });\n    inspectService.send({\n      type: 'service.event',\n      event: stringify((service.state || service.initialState)._event),\n      sessionId: service.sessionId\n    }); // monkey-patch service.send so that we know when an event was sent\n    // to a service *before* it is processed, since other events might occur\n    // while the sent one is being processed, which throws the order off\n\n    var originalSend = service.send.bind(service);\n\n    service.send = function inspectSend(event, payload) {\n      inspectService.send({\n        type: 'service.event',\n        event: stringify(toSCXMLEvent(toEventObject(event, payload))),\n        sessionId: service.sessionId\n      });\n      return originalSend(event, payload);\n    };\n\n    service.subscribe(function (state) {\n      inspectService.send({\n        type: 'service.state',\n        state: stringify(state),\n        sessionId: service.sessionId\n      });\n    });\n    service.onStop(function () {\n      inspectService.send({\n        type: 'service.stop',\n        sessionId: service.sessionId\n      });\n    });\n  });\n\n  if (resolvedIframe) {\n    resolvedIframe.addEventListener('load', function () {\n      targetWindow = resolvedIframe.contentWindow;\n    });\n    resolvedIframe.setAttribute('src', url);\n  }\n\n  return {\n    send: function send(event) {\n      inspectService.send(event);\n    },\n    subscribe: function subscribe(next, onError, onComplete) {\n      var observer = toObserver(next, onError, onComplete);\n      listeners.add(observer);\n      return {\n        unsubscribe: function unsubscribe() {\n          listeners.delete(observer);\n        }\n      };\n    },\n    disconnect: function disconnect() {\n      inspectService.send('disconnect');\n      window.removeEventListener('message', messageHandler);\n      sub.unsubscribe();\n    }\n  };\n}\n\nfunction createWindowReceiver(options) {\n  var _a = options || {},\n      _b = _a.window,\n      ownWindow = _b === void 0 ? window : _b,\n      _c = _a.targetWindow,\n      targetWindow = _c === void 0 ? window.self === window.top ? window.opener : window.parent : _c;\n\n  var observers = new Set();\n\n  var handler = function handler(event) {\n    var data = event.data;\n\n    if (isReceiverEvent(data)) {\n      observers.forEach(function (listener) {\n        return listener.next(parseReceiverEvent(data));\n      });\n    }\n  };\n\n  ownWindow.addEventListener('message', handler);\n  var actorRef = {\n    id: 'xstate.windowReceiver',\n    send: function send(event) {\n      if (!targetWindow) {\n        return;\n      }\n\n      targetWindow.postMessage(event, '*');\n    },\n    subscribe: function subscribe(next, onError, onComplete) {\n      var observer = toObserver(next, onError, onComplete);\n      observers.add(observer);\n      return {\n        unsubscribe: function unsubscribe() {\n          observers.delete(observer);\n        }\n      };\n    },\n    stop: function stop() {\n      observers.clear();\n      ownWindow.removeEventListener('message', handler);\n    }\n  };\n  actorRef.send({\n    type: 'xstate.inspecting'\n  });\n  return actorRef;\n}\n\nfunction createWebSocketReceiver(options) {\n  var _a = options.protocol,\n      protocol = _a === void 0 ? 'ws' : _a;\n  var ws = new WebSocket(protocol + \"://\" + options.server);\n  var observers = new Set();\n  var actorRef = {\n    id: 'xstate.webSocketReceiver',\n    send: function send(event) {\n      ws.send(JSON.stringify(event));\n    },\n    subscribe: function subscribe(next, onError, onComplete) {\n      var observer = toObserver(next, onError, onComplete);\n      observers.add(observer);\n      return {\n        unsubscribe: function unsubscribe() {\n          observers.delete(observer);\n        }\n      };\n    }\n  };\n\n  ws.onopen = function () {\n    actorRef.send({\n      type: 'xstate.inspecting'\n    });\n  };\n\n  ws.onmessage = function (event) {\n    if (typeof event.data !== 'string') {\n      return;\n    }\n\n    try {\n      var eventObject_1 = JSON.parse(event.data);\n\n      if (isReceiverEvent(eventObject_1)) {\n        observers.forEach(function (observer) {\n          observer.next(parseReceiverEvent(eventObject_1));\n        });\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  ws.onerror = function (err) {\n    observers.forEach(function (observer) {\n      var _a;\n\n      (_a = observer.error) === null || _a === void 0 ? void 0 : _a.call(observer, err);\n    });\n  };\n\n  return actorRef;\n}\n\nexport { createDevTools, createWebSocketReceiver, createWindowReceiver, inspect, serviceMap };","map":{"version":3,"sources":["C:/Users/User/react-xstate-colourchanger/node_modules/@xstate/inspect/es/browser.js"],"names":["__assign","interpret","toSCXMLEvent","toEventObject","toObserver","getLazy","stringify","isReceiverEvent","parseReceiverEvent","createInspectMachine","serviceMap","Map","createDevTools","services","Set","serviceListeners","register","service","add","set","sessionId","forEach","listener","onStop","delete","unregister","onRegister","unsubscribe","defaultInspectorOptions","url","iframe","document","querySelector","devTools","globalThis","__xstate__","inspect","options","_a","resolvedIframe","console","warn","undefined","resolvedDevTools","inspectMachine","inspectService","start","listeners","sub","subscribe","state","next","targetWindow","client","messageHandler","event","data","contentWindow","send","e","postMessage","window","addEventListener","type","open","machine","initialState","id","parent","_event","originalSend","bind","inspectSend","payload","setAttribute","onError","onComplete","observer","disconnect","removeEventListener","createWindowReceiver","_b","ownWindow","_c","self","top","opener","observers","handler","actorRef","stop","clear","createWebSocketReceiver","protocol","ws","WebSocket","server","JSON","onopen","onmessage","eventObject_1","parse","error","onerror","err","call"],"mappings":"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","sourcesContent":["import { __assign } from './_virtual/_tslib.js';\nimport { interpret } from 'xstate';\nimport { toSCXMLEvent, toEventObject, toObserver } from 'xstate/lib/utils';\nimport { getLazy, stringify, isReceiverEvent, parseReceiverEvent } from './utils.js';\nimport { createInspectMachine } from './inspectMachine.js';\n\nvar serviceMap = new Map();\nfunction createDevTools() {\n    var services = new Set();\n    var serviceListeners = new Set();\n    return {\n        services: services,\n        register: function (service) {\n            services.add(service);\n            serviceMap.set(service.sessionId, service);\n            serviceListeners.forEach(function (listener) { return listener(service); });\n            service.onStop(function () {\n                services.delete(service);\n                serviceMap.delete(service.sessionId);\n            });\n        },\n        unregister: function (service) {\n            services.delete(service);\n            serviceMap.delete(service.sessionId);\n        },\n        onRegister: function (listener) {\n            serviceListeners.add(listener);\n            services.forEach(function (service) { return listener(service); });\n            return {\n                unsubscribe: function () {\n                    serviceListeners.delete(listener);\n                }\n            };\n        }\n    };\n}\nvar defaultInspectorOptions = {\n    url: 'https://statecharts.io/inspect',\n    iframe: function () {\n        return document.querySelector('iframe[data-xstate]');\n    },\n    devTools: function () {\n        var devTools = createDevTools();\n        globalThis.__xstate__ = devTools;\n        return devTools;\n    }\n};\nfunction inspect(options) {\n    var _a = __assign(__assign({}, defaultInspectorOptions), options), iframe = _a.iframe, url = _a.url, devTools = _a.devTools;\n    var resolvedIframe = getLazy(iframe);\n    if (resolvedIframe === null) {\n        console.warn('No suitable <iframe> found to embed the inspector. Please pass an <iframe> element to `inspect(iframe)` or create an <iframe data-xstate></iframe> element.');\n        return undefined;\n    }\n    var resolvedDevTools = getLazy(devTools);\n    var inspectMachine = createInspectMachine(resolvedDevTools);\n    var inspectService = interpret(inspectMachine).start();\n    var listeners = new Set();\n    var sub = inspectService.subscribe(function (state) {\n        listeners.forEach(function (listener) { return listener.next(state); });\n    });\n    var targetWindow;\n    var client;\n    var messageHandler = function (event) {\n        if (typeof event.data === 'object' &&\n            event.data !== null &&\n            'type' in event.data) {\n            if (resolvedIframe && !targetWindow) {\n                targetWindow = resolvedIframe.contentWindow;\n            }\n            if (!client) {\n                client = {\n                    send: function (e) {\n                        targetWindow.postMessage(e, url);\n                    }\n                };\n            }\n            inspectService.send(__assign(__assign({}, event.data), { client: client }));\n        }\n    };\n    window.addEventListener('message', messageHandler);\n    window.addEventListener('unload', function () {\n        inspectService.send({ type: 'unload' });\n    });\n    if (resolvedIframe === false) {\n        targetWindow = window.open(url, 'xstateinspector');\n    }\n    resolvedDevTools.onRegister(function (service) {\n        var _a;\n        inspectService.send({\n            type: 'service.register',\n            machine: stringify(service.machine),\n            state: stringify(service.state || service.initialState),\n            sessionId: service.sessionId,\n            id: service.id,\n            parent: (_a = service.parent) === null || _a === void 0 ? void 0 : _a.sessionId\n        });\n        inspectService.send({\n            type: 'service.event',\n            event: stringify((service.state || service.initialState)._event),\n            sessionId: service.sessionId\n        });\n        // monkey-patch service.send so that we know when an event was sent\n        // to a service *before* it is processed, since other events might occur\n        // while the sent one is being processed, which throws the order off\n        var originalSend = service.send.bind(service);\n        service.send = function inspectSend(event, payload) {\n            inspectService.send({\n                type: 'service.event',\n                event: stringify(toSCXMLEvent(toEventObject(event, payload))),\n                sessionId: service.sessionId\n            });\n            return originalSend(event, payload);\n        };\n        service.subscribe(function (state) {\n            inspectService.send({\n                type: 'service.state',\n                state: stringify(state),\n                sessionId: service.sessionId\n            });\n        });\n        service.onStop(function () {\n            inspectService.send({\n                type: 'service.stop',\n                sessionId: service.sessionId\n            });\n        });\n    });\n    if (resolvedIframe) {\n        resolvedIframe.addEventListener('load', function () {\n            targetWindow = resolvedIframe.contentWindow;\n        });\n        resolvedIframe.setAttribute('src', url);\n    }\n    return {\n        send: function (event) {\n            inspectService.send(event);\n        },\n        subscribe: function (next, onError, onComplete) {\n            var observer = toObserver(next, onError, onComplete);\n            listeners.add(observer);\n            return {\n                unsubscribe: function () {\n                    listeners.delete(observer);\n                }\n            };\n        },\n        disconnect: function () {\n            inspectService.send('disconnect');\n            window.removeEventListener('message', messageHandler);\n            sub.unsubscribe();\n        }\n    };\n}\nfunction createWindowReceiver(options) {\n    var _a = options || {}, _b = _a.window, ownWindow = _b === void 0 ? window : _b, _c = _a.targetWindow, targetWindow = _c === void 0 ? window.self === window.top ? window.opener : window.parent : _c;\n    var observers = new Set();\n    var handler = function (event) {\n        var data = event.data;\n        if (isReceiverEvent(data)) {\n            observers.forEach(function (listener) { return listener.next(parseReceiverEvent(data)); });\n        }\n    };\n    ownWindow.addEventListener('message', handler);\n    var actorRef = {\n        id: 'xstate.windowReceiver',\n        send: function (event) {\n            if (!targetWindow) {\n                return;\n            }\n            targetWindow.postMessage(event, '*');\n        },\n        subscribe: function (next, onError, onComplete) {\n            var observer = toObserver(next, onError, onComplete);\n            observers.add(observer);\n            return {\n                unsubscribe: function () {\n                    observers.delete(observer);\n                }\n            };\n        },\n        stop: function () {\n            observers.clear();\n            ownWindow.removeEventListener('message', handler);\n        }\n    };\n    actorRef.send({\n        type: 'xstate.inspecting'\n    });\n    return actorRef;\n}\nfunction createWebSocketReceiver(options) {\n    var _a = options.protocol, protocol = _a === void 0 ? 'ws' : _a;\n    var ws = new WebSocket(protocol + \"://\" + options.server);\n    var observers = new Set();\n    var actorRef = {\n        id: 'xstate.webSocketReceiver',\n        send: function (event) {\n            ws.send(JSON.stringify(event));\n        },\n        subscribe: function (next, onError, onComplete) {\n            var observer = toObserver(next, onError, onComplete);\n            observers.add(observer);\n            return {\n                unsubscribe: function () {\n                    observers.delete(observer);\n                }\n            };\n        }\n    };\n    ws.onopen = function () {\n        actorRef.send({\n            type: 'xstate.inspecting'\n        });\n    };\n    ws.onmessage = function (event) {\n        if (typeof event.data !== 'string') {\n            return;\n        }\n        try {\n            var eventObject_1 = JSON.parse(event.data);\n            if (isReceiverEvent(eventObject_1)) {\n                observers.forEach(function (observer) {\n                    observer.next(parseReceiverEvent(eventObject_1));\n                });\n            }\n        }\n        catch (e) {\n            console.error(e);\n        }\n    };\n    ws.onerror = function (err) {\n        observers.forEach(function (observer) {\n            var _a;\n            (_a = observer.error) === null || _a === void 0 ? void 0 : _a.call(observer, err);\n        });\n    };\n    return actorRef;\n}\n\nexport { createDevTools, createWebSocketReceiver, createWindowReceiver, inspect, serviceMap };\n"]},"metadata":{},"sourceType":"module"}